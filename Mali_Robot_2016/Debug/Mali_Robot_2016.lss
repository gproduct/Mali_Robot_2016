
Mali_Robot_2016.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000014e6  0000159a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014e6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016d  0080011a  0080011a  000015b4  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000015b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000002c0  00000000  00000000  000015b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000676  00000000  00000000  00001877  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000286f  00000000  00000000  00001eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3d  00000000  00000000  0000475c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c11  00000000  00000000  00005399  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  00007fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b14  00000000  00000000  0000840c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000262a  00000000  00000000  00008f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f8  00000000  00000000  0000b54a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
}//END OF servo_init


void servo_position1(unsigned char dutyCycle)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       2:	00 00       	nop
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
	_delay_ms(50);
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
	
	return buffer[0];
}
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
unsigned int received = 0;



unsigned char GPIO_PinRegister(volatile unsigned char *baseAddress, unsigned char pin)
{
       6:	00 00       	nop

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
	
	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	80 c6       	rjmp	.+3328   	; 0xd32 <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	7d c0       	rjmp	.+250    	; 0x144 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	da c6       	rjmp	.+3508   	; 0xe0a <__vector_21>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a5 c6       	rjmp	.+3402   	; 0xda8 <__vector_23>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	28 c7       	rjmp	.+3664   	; 0xed2 <__vector_32>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	f3 c6       	rjmp	.+3558   	; 0xe70 <__vector_34>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 ee       	ldi	r30, 0xE6	; 230
      a8:	f4 e1       	ldi	r31, 0x14	; 20
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 31       	cpi	r26, 0x1A	; 26
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	aa e1       	ldi	r26, 0x1A	; 26
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a7 38       	cpi	r26, 0x87	; 135
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	07 d3       	rcall	.+1550   	; 0x6da <main>
      cc:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <servo_init>:
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
	DDRE |= (1 << PINE3) | (1 << PINE4) | (1 << PINE5);
      d2:	ed e2       	ldi	r30, 0x2D	; 45
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	20 81       	ld	r18, Z
      d8:	28 63       	ori	r18, 0x38	; 56
      da:	20 83       	st	Z, r18
	
	TCNT3 = 0;
      dc:	10 92 95 00 	sts	0x0095, r1
      e0:	10 92 94 00 	sts	0x0094, r1
	OCR3A = 0;
      e4:	10 92 99 00 	sts	0x0099, r1
      e8:	10 92 98 00 	sts	0x0098, r1
	OCR3B = 0;
      ec:	10 92 9b 00 	sts	0x009B, r1
      f0:	10 92 9a 00 	sts	0x009A, r1
	OCR3C = 0;
      f4:	10 92 9d 00 	sts	0x009D, r1
      f8:	10 92 9c 00 	sts	0x009C, r1
	
	TCCR3A = (1 << COM3A1) | (1 << COM3A0) | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
      fc:	2e ef       	ldi	r18, 0xFE	; 254
      fe:	20 93 90 00 	sts	0x0090, r18
	TCCR3B = (1 << WGM32) | (1 << WGM33) | (1 << CS31); // PRESKALER = 1
     102:	2a e1       	ldi	r18, 0x1A	; 26
     104:	20 93 91 00 	sts	0x0091, r18
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
     108:	88 0f       	add	r24, r24
     10a:	99 1f       	adc	r25, r25
     10c:	88 0f       	add	r24, r24
     10e:	99 1f       	adc	r25, r25
     110:	88 0f       	add	r24, r24
     112:	99 1f       	adc	r25, r25
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b0 e0       	ldi	r27, 0x00	; 0
     118:	bc 01       	movw	r22, r24
     11a:	cd 01       	movw	r24, r26
     11c:	0e 94 95 08 	call	0x112a	; 0x112a <__floatunsisf>
     120:	9b 01       	movw	r18, r22
     122:	ac 01       	movw	r20, r24
     124:	60 e8       	ldi	r22, 0x80	; 128
     126:	76 e9       	ldi	r23, 0x96	; 150
     128:	88 e1       	ldi	r24, 0x18	; 24
     12a:	9b e4       	ldi	r25, 0x4B	; 75
     12c:	6a d7       	rcall	.+3796   	; 0x1002 <__divsf3>
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	5f e3       	ldi	r21, 0x3F	; 63
     136:	00 d7       	rcall	.+3584   	; 0xf38 <__subsf3>
     138:	cc d7       	rcall	.+3992   	; 0x10d2 <__fixunssfsi>
     13a:	70 93 97 00 	sts	0x0097, r23
     13e:	60 93 96 00 	sts	0x0096, r22
}//END OF servo_init
     142:	08 95       	ret

00000144 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     144:	1f 92       	push	r1
     146:	0f 92       	push	r0
     148:	0f b6       	in	r0, 0x3f	; 63
     14a:	0f 92       	push	r0
     14c:	0b b6       	in	r0, 0x3b	; 59
     14e:	0f 92       	push	r0
     150:	11 24       	eor	r1, r1
     152:	cf 92       	push	r12
     154:	df 92       	push	r13
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	2f 93       	push	r18
     15e:	3f 93       	push	r19
     160:	4f 93       	push	r20
     162:	5f 93       	push	r21
     164:	6f 93       	push	r22
     166:	7f 93       	push	r23
     168:	8f 93       	push	r24
     16a:	9f 93       	push	r25
     16c:	af 93       	push	r26
     16e:	bf 93       	push	r27
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	ef 93       	push	r30
     176:	ff 93       	push	r31
	unsigned char tempPage = CANPAGE;
     178:	f0 90 ed 00 	lds	r15, 0x00ED
     17c:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     17e:	ad ee       	ldi	r26, 0xED	; 237
     180:	b0 e0       	ldi	r27, 0x00	; 0

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     182:	ee ee       	ldi	r30, 0xEE	; 238
     184:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     186:	89 2f       	mov	r24, r25
     188:	82 95       	swap	r24
     18a:	80 7f       	andi	r24, 0xF0	; 240
     18c:	8c 93       	st	X, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     18e:	80 81       	ld	r24, Z
     190:	85 ff       	sbrs	r24, 5
     192:	50 c0       	rjmp	.+160    	; 0x234 <__vector_18+0xf0>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     194:	80 e8       	ldi	r24, 0x80	; 128
     196:	80 93 ef 00 	sts	0x00EF, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     19a:	ee ee       	ldi	r30, 0xEE	; 238
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	8f 7d       	andi	r24, 0xDF	; 223
     1a2:	80 83       	st	Z, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     1a4:	20 91 f2 00 	lds	r18, 0x00F2
     1a8:	80 91 f3 00 	lds	r24, 0x00F3

			for(i = 0; i < 8; ++i)
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     1ac:	88 0f       	add	r24, r24
     1ae:	88 0f       	add	r24, r24
     1b0:	88 0f       	add	r24, r24
     1b2:	22 95       	swap	r18
     1b4:	26 95       	lsr	r18
     1b6:	27 70       	andi	r18, 0x07	; 7
     1b8:	82 2b       	or	r24, r18
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	9c 01       	movw	r18, r24
     1be:	22 0f       	add	r18, r18
     1c0:	33 1f       	adc	r19, r19
     1c2:	e9 01       	movw	r28, r18
     1c4:	c8 5e       	subi	r28, 0xE8	; 232
     1c6:	de 4f       	sbci	r29, 0xFE	; 254
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	bc 01       	movw	r22, r24
     1ce:	61 50       	subi	r22, 0x01	; 1
     1d0:	70 40       	sbci	r23, 0x00	; 0
     1d2:	0f 2e       	mov	r0, r31
     1d4:	fe e2       	ldi	r31, 0x2E	; 46
     1d6:	cf 2e       	mov	r12, r31
     1d8:	f1 e0       	ldi	r31, 0x01	; 1
     1da:	df 2e       	mov	r13, r31
     1dc:	f0 2d       	mov	r31, r0
     1de:	c6 0e       	add	r12, r22
     1e0:	d7 1e       	adc	r13, r23
     1e2:	0a ef       	ldi	r16, 0xFA	; 250
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	ab 01       	movw	r20, r22
     1e8:	d6 01       	movw	r26, r12
     1ea:	8c 91       	ld	r24, X
     1ec:	f9 01       	movw	r30, r18
     1ee:	e8 0f       	add	r30, r24
     1f0:	f1 1d       	adc	r31, r1
     1f2:	cf 01       	movw	r24, r30
     1f4:	e8 81       	ld	r30, Y
     1f6:	f9 81       	ldd	r31, Y+1	; 0x01
     1f8:	e8 0f       	add	r30, r24
     1fa:	f9 1f       	adc	r31, r25
     1fc:	d8 01       	movw	r26, r16
     1fe:	8c 91       	ld	r24, X
     200:	80 83       	st	Z, r24
     202:	2f 5f       	subi	r18, 0xFF	; 255
     204:	3f 4f       	sbci	r19, 0xFF	; 255
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     206:	28 30       	cpi	r18, 0x08	; 8
     208:	31 05       	cpc	r19, r1
     20a:	69 f7       	brne	.-38     	; 0x1e6 <__vector_18+0xa2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     20c:	fb 01       	movw	r30, r22
     20e:	e2 5d       	subi	r30, 0xD2	; 210
     210:	fe 4f       	sbci	r31, 0xFE	; 254
     212:	80 81       	ld	r24, Z
     214:	8f 5f       	subi	r24, 0xFF	; 255
     216:	80 83       	st	Z, r24
     218:	80 81       	ld	r24, Z
     21a:	85 30       	cpi	r24, 0x05	; 5
     21c:	21 f4       	brne	.+8      	; 0x226 <__vector_18+0xe2>
				*(rxWrIndex + ide - 1) = 0;
     21e:	fb 01       	movw	r30, r22
     220:	e2 5d       	subi	r30, 0xD2	; 210
     222:	fe 4f       	sbci	r31, 0xFE	; 254
     224:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     226:	fa 01       	movw	r30, r20
     228:	ee 5b       	subi	r30, 0xBE	; 190
     22a:	fe 4f       	sbci	r31, 0xFE	; 254
     22c:	80 81       	ld	r24, Z
     22e:	8f 5f       	subi	r24, 0xFF	; 255
     230:	80 83       	st	Z, r24
     232:	0f c0       	rjmp	.+30     	; 0x252 <__vector_18+0x10e>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     234:	80 81       	ld	r24, Z
     236:	86 ff       	sbrs	r24, 6
     238:	08 c0       	rjmp	.+16     	; 0x24a <__vector_18+0x106>
		{
			CANCDMOB = 0; // disable mob
     23a:	10 92 ef 00 	sts	0x00EF, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     23e:	ee ee       	ldi	r30, 0xEE	; 238
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	8f 7b       	andi	r24, 0xBF	; 191
     246:	80 83       	st	Z, r24
     248:	04 c0       	rjmp	.+8      	; 0x252 <__vector_18+0x10e>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     24a:	9f 5f       	subi	r25, 0xFF	; 255
     24c:	9f 30       	cpi	r25, 0x0F	; 15
     24e:	09 f0       	breq	.+2      	; 0x252 <__vector_18+0x10e>
     250:	9a cf       	rjmp	.-204    	; 0x186 <__vector_18+0x42>

			break;
		}
	}

	CANPAGE = tempPage;
     252:	f0 92 ed 00 	sts	0x00ED, r15
	CANGIT = CANGIT; // zato sto tako treba.
     256:	ea ed       	ldi	r30, 0xDA	; 218
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	80 83       	st	Z, r24
}
     25e:	ff 91       	pop	r31
     260:	ef 91       	pop	r30
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	bf 91       	pop	r27
     268:	af 91       	pop	r26
     26a:	9f 91       	pop	r25
     26c:	8f 91       	pop	r24
     26e:	7f 91       	pop	r23
     270:	6f 91       	pop	r22
     272:	5f 91       	pop	r21
     274:	4f 91       	pop	r20
     276:	3f 91       	pop	r19
     278:	2f 91       	pop	r18
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	ff 90       	pop	r15
     280:	df 90       	pop	r13
     282:	cf 90       	pop	r12
     284:	0f 90       	pop	r0
     286:	0b be       	out	0x3b, r0	; 59
     288:	0f 90       	pop	r0
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	0f 90       	pop	r0
     28e:	1f 90       	pop	r1
     290:	18 95       	reti

00000292 <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	8c 01       	movw	r16, r24
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     2a4:	a6 2f       	mov	r26, r22
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	ad 01       	movw	r20, r26
     2aa:	41 50       	subi	r20, 0x01	; 1
     2ac:	50 40       	sbci	r21, 0x00	; 0
     2ae:	c2 e4       	ldi	r28, 0x42	; 66
     2b0:	d1 e0       	ldi	r29, 0x01	; 1
     2b2:	fe 01       	movw	r30, r28
     2b4:	e4 0f       	add	r30, r20
     2b6:	f5 1f       	adc	r31, r21
     2b8:	7a 01       	movw	r14, r20
     2ba:	80 81       	ld	r24, Z
     2bc:	88 23       	and	r24, r24
     2be:	e1 f3       	breq	.-8      	; 0x2b8 <CAN_Read+0x26>

	for(i = 0; i < 8; ++i)
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     2c0:	26 2f       	mov	r18, r22
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	c9 01       	movw	r24, r18
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	ec 01       	movw	r28, r24
     2cc:	c8 5e       	subi	r28, 0xE8	; 232
     2ce:	de 4f       	sbci	r29, 0xFE	; 254
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	21 50       	subi	r18, 0x01	; 1
     2d6:	30 40       	sbci	r19, 0x00	; 0
     2d8:	0f 2e       	mov	r0, r31
     2da:	f8 e3       	ldi	r31, 0x38	; 56
     2dc:	cf 2e       	mov	r12, r31
     2de:	f1 e0       	ldi	r31, 0x01	; 1
     2e0:	df 2e       	mov	r13, r31
     2e2:	f0 2d       	mov	r31, r0
     2e4:	d6 01       	movw	r26, r12
     2e6:	a2 0f       	add	r26, r18
     2e8:	b3 1f       	adc	r27, r19
     2ea:	8c 91       	ld	r24, X
     2ec:	fa 01       	movw	r30, r20
     2ee:	e8 0f       	add	r30, r24
     2f0:	f1 1d       	adc	r31, r1
     2f2:	cf 01       	movw	r24, r30
     2f4:	e8 81       	ld	r30, Y
     2f6:	f9 81       	ldd	r31, Y+1	; 0x01
     2f8:	e8 0f       	add	r30, r24
     2fa:	f9 1f       	adc	r31, r25
     2fc:	80 81       	ld	r24, Z
     2fe:	f8 01       	movw	r30, r16
     300:	e4 0f       	add	r30, r20
     302:	f5 1f       	adc	r31, r21
     304:	80 83       	st	Z, r24
     306:	4f 5f       	subi	r20, 0xFF	; 255
     308:	5f 4f       	sbci	r21, 0xFF	; 255
{
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     30a:	48 30       	cpi	r20, 0x08	; 8
     30c:	51 05       	cpc	r21, r1
     30e:	69 f7       	brne	.-38     	; 0x2ea <CAN_Read+0x58>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     310:	f9 01       	movw	r30, r18
     312:	e8 5c       	subi	r30, 0xC8	; 200
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	80 81       	ld	r24, Z
     318:	8f 5f       	subi	r24, 0xFF	; 255
     31a:	80 83       	st	Z, r24
     31c:	80 81       	ld	r24, Z
     31e:	85 30       	cpi	r24, 0x05	; 5
     320:	21 f4       	brne	.+8      	; 0x32a <CAN_Read+0x98>
		*(rxRdIndex + sendingNodeID - 1) = 0;
     322:	f9 01       	movw	r30, r18
     324:	e8 5c       	subi	r30, 0xC8	; 200
     326:	fe 4f       	sbci	r31, 0xFE	; 254
     328:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     32a:	f7 01       	movw	r30, r14
     32c:	ee 5b       	subi	r30, 0xBE	; 190
     32e:	fe 4f       	sbci	r31, 0xFE	; 254
     330:	80 81       	ld	r24, Z
     332:	81 50       	subi	r24, 0x01	; 1
     334:	80 83       	st	Z, r24

	return 0;
}
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	df 90       	pop	r13
     346:	cf 90       	pop	r12
     348:	08 95       	ret

0000034a <CAN_Write>:


char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     34a:	ac 01       	movw	r20, r24
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     34c:	e9 ed       	ldi	r30, 0xD9	; 217
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	80 81       	ld	r24, Z
     352:	84 fd       	sbrc	r24, 4
     354:	fd cf       	rjmp	.-6      	; 0x350 <CAN_Write+0x6>
     356:	80 81       	ld	r24, Z
     358:	83 fd       	sbrc	r24, 3
     35a:	fa cf       	rjmp	.-12     	; 0x350 <CAN_Write+0x6>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     35c:	90 91 ed 00 	lds	r25, 0x00ED
     360:	20 e0       	ldi	r18, 0x00	; 0

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     362:	ad ee       	ldi	r26, 0xED	; 237
     364:	b0 e0       	ldi	r27, 0x00	; 0

		if(!(CANCDMOB >> 6))
     366:	ef ee       	ldi	r30, 0xEF	; 239
     368:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     36a:	82 2f       	mov	r24, r18
     36c:	82 95       	swap	r24
     36e:	80 7f       	andi	r24, 0xF0	; 240
     370:	8c 93       	st	X, r24

		if(!(CANCDMOB >> 6))
     372:	80 81       	ld	r24, Z
     374:	82 95       	swap	r24
     376:	86 95       	lsr	r24
     378:	86 95       	lsr	r24
     37a:	83 70       	andi	r24, 0x03	; 3
     37c:	21 f0       	breq	.+8      	; 0x386 <CAN_Write+0x3c>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     37e:	2f 5f       	subi	r18, 0xFF	; 255
     380:	2f 30       	cpi	r18, 0x0F	; 15
     382:	99 f7       	brne	.-26     	; 0x36a <CAN_Write+0x20>
     384:	28 c0       	rjmp	.+80     	; 0x3d6 <CAN_Write+0x8c>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     386:	2f 30       	cpi	r18, 0x0F	; 15
     388:	31 f1       	breq	.+76     	; 0x3d6 <CAN_Write+0x8c>
		return -1;


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     38a:	86 2f       	mov	r24, r22
     38c:	82 95       	swap	r24
     38e:	88 0f       	add	r24, r24
     390:	80 7e       	andi	r24, 0xE0	; 224
     392:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
     396:	86 2f       	mov	r24, r22
     398:	86 95       	lsr	r24
     39a:	86 95       	lsr	r24
     39c:	86 95       	lsr	r24
     39e:	80 93 f3 00 	sts	0x00F3, r24

	// DLC = 8
	CANCDMOB = 8;
     3a2:	88 e0       	ldi	r24, 0x08	; 8
     3a4:	80 93 ef 00 	sts	0x00EF, r24
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
		CANMSG = data[i];
     3ac:	aa ef       	ldi	r26, 0xFA	; 250
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
     3b0:	fa 01       	movw	r30, r20
     3b2:	e2 0f       	add	r30, r18
     3b4:	f3 1f       	adc	r31, r19
     3b6:	80 81       	ld	r24, Z
     3b8:	8c 93       	st	X, r24
     3ba:	2f 5f       	subi	r18, 0xFF	; 255
     3bc:	3f 4f       	sbci	r19, 0xFF	; 255

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     3be:	28 30       	cpi	r18, 0x08	; 8
     3c0:	31 05       	cpc	r19, r1
     3c2:	b1 f7       	brne	.-20     	; 0x3b0 <CAN_Write+0x66>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     3c4:	ef ee       	ldi	r30, 0xEF	; 239
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	80 64       	ori	r24, 0x40	; 64
     3cc:	80 83       	st	Z, r24

	CANPAGE = tempPage;
     3ce:	90 93 ed 00 	sts	0x00ED, r25
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	08 95       	ret

	return 0;
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
}
     3d8:	08 95       	ret

000003da <CAN_Init>:
	return 0;
}


void CAN_Init(unsigned char numOfNodes)
{
     3da:	2f 92       	push	r2
     3dc:	3f 92       	push	r3
     3de:	4f 92       	push	r4
     3e0:	5f 92       	push	r5
     3e2:	6f 92       	push	r6
     3e4:	7f 92       	push	r7
     3e6:	8f 92       	push	r8
     3e8:	9f 92       	push	r9
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	df 93       	push	r29
     3fc:	cf 93       	push	r28
     3fe:	0f 92       	push	r0
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	89 83       	std	Y+1, r24	; 0x01
{
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 d8 00 	sts	0x00D8, r24
     40c:	90 e0       	ldi	r25, 0x00	; 0

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     40e:	0f 2e       	mov	r0, r31
     410:	fd ee       	ldi	r31, 0xED	; 237
     412:	6f 2e       	mov	r6, r31
     414:	77 24       	eor	r7, r7
     416:	f0 2d       	mov	r31, r0

		CANSTMOB = 0;
     418:	0f 2e       	mov	r0, r31
     41a:	fe ee       	ldi	r31, 0xEE	; 238
     41c:	cf 2e       	mov	r12, r31
     41e:	dd 24       	eor	r13, r13
     420:	f0 2d       	mov	r31, r0
		CANCDMOB = 0;
     422:	0f 2e       	mov	r0, r31
     424:	ff ee       	ldi	r31, 0xEF	; 239
     426:	af 2e       	mov	r10, r31
     428:	bb 24       	eor	r11, r11
     42a:	f0 2d       	mov	r31, r0

		CANIDT1 = 0;
     42c:	0f 2e       	mov	r0, r31
     42e:	f3 ef       	ldi	r31, 0xF3	; 243
     430:	8f 2e       	mov	r8, r31
     432:	99 24       	eor	r9, r9
     434:	f0 2d       	mov	r31, r0
		CANIDT2 = 0;
     436:	62 ef       	ldi	r22, 0xF2	; 242
     438:	70 e0       	ldi	r23, 0x00	; 0
		CANIDT3 = 0;
     43a:	01 ef       	ldi	r16, 0xF1	; 241
     43c:	10 e0       	ldi	r17, 0x00	; 0
		CANIDT4 = 0;
     43e:	0f 2e       	mov	r0, r31
     440:	f0 ef       	ldi	r31, 0xF0	; 240
     442:	ef 2e       	mov	r14, r31
     444:	ff 24       	eor	r15, r15
     446:	f0 2d       	mov	r31, r0
		CANIDM1 = 0;
     448:	27 ef       	ldi	r18, 0xF7	; 247
     44a:	30 e0       	ldi	r19, 0x00	; 0
		CANIDM2 = 0;
     44c:	46 ef       	ldi	r20, 0xF6	; 246
     44e:	50 e0       	ldi	r21, 0x00	; 0
		CANIDM3 = 0;
     450:	0f 2e       	mov	r0, r31
     452:	f5 ef       	ldi	r31, 0xF5	; 245
     454:	4f 2e       	mov	r4, r31
     456:	55 24       	eor	r5, r5
     458:	f0 2d       	mov	r31, r0
		CANIDM4 = 0;
     45a:	0f 2e       	mov	r0, r31
     45c:	f4 ef       	ldi	r31, 0xF4	; 244
     45e:	2f 2e       	mov	r2, r31
     460:	33 24       	eor	r3, r3
     462:	f0 2d       	mov	r31, r0

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
			CANMSG = 0;
     464:	ea ef       	ldi	r30, 0xFA	; 250
     466:	f0 e0       	ldi	r31, 0x00	; 0
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     468:	89 2f       	mov	r24, r25
     46a:	82 95       	swap	r24
     46c:	80 7f       	andi	r24, 0xF0	; 240
     46e:	d3 01       	movw	r26, r6
     470:	8c 93       	st	X, r24

		CANSTMOB = 0;
     472:	d6 01       	movw	r26, r12
     474:	1c 92       	st	X, r1
		CANCDMOB = 0;
     476:	d5 01       	movw	r26, r10
     478:	1c 92       	st	X, r1

		CANIDT1 = 0;
     47a:	d4 01       	movw	r26, r8
     47c:	1c 92       	st	X, r1
		CANIDT2 = 0;
     47e:	db 01       	movw	r26, r22
     480:	1c 92       	st	X, r1
		CANIDT3 = 0;
     482:	d8 01       	movw	r26, r16
     484:	1c 92       	st	X, r1
		CANIDT4 = 0;
     486:	d7 01       	movw	r26, r14
     488:	1c 92       	st	X, r1
		CANIDM1 = 0;
     48a:	d9 01       	movw	r26, r18
     48c:	1c 92       	st	X, r1
		CANIDM2 = 0;
     48e:	da 01       	movw	r26, r20
     490:	1c 92       	st	X, r1
		CANIDM3 = 0;
     492:	d2 01       	movw	r26, r4
     494:	1c 92       	st	X, r1
		CANIDM4 = 0;
     496:	d1 01       	movw	r26, r2
     498:	1c 92       	st	X, r1
     49a:	80 e0       	ldi	r24, 0x00	; 0

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
			CANMSG = 0;
     49c:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	88 30       	cpi	r24, 0x08	; 8
     4a2:	e1 f7       	brne	.-8      	; 0x49c <CAN_Init+0xc2>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     4a4:	9f 5f       	subi	r25, 0xFF	; 255
     4a6:	9f 30       	cpi	r25, 0x0F	; 15
     4a8:	f9 f6       	brne	.-66     	; 0x468 <CAN_Init+0x8e>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	80 93 d8 00 	sts	0x00D8, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     4b6:	88 e0       	ldi	r24, 0x08	; 8
     4b8:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     4bc:	8e e5       	ldi	r24, 0x5E	; 94
     4be:	80 93 e4 00 	sts	0x00E4, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     4c2:	10 92 e5 00 	sts	0x00E5, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     4c6:	80 eb       	ldi	r24, 0xB0	; 176
     4c8:	80 93 db 00 	sts	0x00DB, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     4cc:	8f e7       	ldi	r24, 0x7F	; 127
     4ce:	80 93 df 00 	sts	0x00DF, r24
	CANIE2 = 0xFF;
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	80 93 de 00 	sts	0x00DE, r24
	sei();
     4d8:	78 94       	sei

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     4da:	b9 81       	ldd	r27, Y+1	; 0x01
     4dc:	bb 23       	and	r27, r27
     4de:	09 f4       	brne	.+2      	; 0x4e2 <CAN_Init+0x108>
     4e0:	86 c0       	rjmp	.+268    	; 0x5ee <CAN_Init+0x214>
     4e2:	0f 2e       	mov	r0, r31
     4e4:	fa e1       	ldi	r31, 0x1A	; 26
     4e6:	8f 2e       	mov	r8, r31
     4e8:	f1 e0       	ldi	r31, 0x01	; 1
     4ea:	9f 2e       	mov	r9, r31
     4ec:	f0 2d       	mov	r31, r0
     4ee:	aa 24       	eor	r10, r10
     4f0:	bb 24       	eor	r11, r11
     4f2:	66 24       	eor	r6, r6
     4f4:	77 24       	eor	r7, r7
     4f6:	63 94       	inc	r6


static char CAN_InitRxMob(unsigned int ide)
{
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     4f8:	0f 2e       	mov	r0, r31
     4fa:	fd ee       	ldi	r31, 0xED	; 237
     4fc:	ef 2e       	mov	r14, r31
     4fe:	ff 24       	eor	r15, r15
     500:	f0 2d       	mov	r31, r0
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     502:	0f 2e       	mov	r0, r31
     504:	ff ee       	ldi	r31, 0xEF	; 239
     506:	cf 2e       	mov	r12, r31
     508:	dd 24       	eor	r13, r13
     50a:	f0 2d       	mov	r31, r0
	for(i = 0; i < numOfNodes; ++i)
	{
		CAN_InitRxMob(i + 1);
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     50c:	0f 2e       	mov	r0, r31
     50e:	f8 e3       	ldi	r31, 0x38	; 56
     510:	4f 2e       	mov	r4, r31
     512:	f1 e0       	ldi	r31, 0x01	; 1
     514:	5f 2e       	mov	r5, r31
     516:	f0 2d       	mov	r31, r0
     518:	0f 2e       	mov	r0, r31
     51a:	fe e2       	ldi	r31, 0x2E	; 46
     51c:	2f 2e       	mov	r2, r31
     51e:	f1 e0       	ldi	r31, 0x01	; 1
     520:	3f 2e       	mov	r3, r31
     522:	f0 2d       	mov	r31, r0

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     524:	85 01       	movw	r16, r10


static char CAN_InitRxMob(unsigned int ide)
{
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     526:	f7 01       	movw	r30, r14
     528:	20 81       	ld	r18, Z

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     52a:	a9 ed       	ldi	r26, 0xD9	; 217
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	8c 91       	ld	r24, X
     530:	84 fd       	sbrc	r24, 4
     532:	fb cf       	rjmp	.-10     	; 0x52a <CAN_Init+0x150>
     534:	8c 91       	ld	r24, X
     536:	83 fd       	sbrc	r24, 3
     538:	f8 cf       	rjmp	.-16     	; 0x52a <CAN_Init+0x150>
     53a:	90 e0       	ldi	r25, 0x00	; 0

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     53c:	89 2f       	mov	r24, r25
     53e:	82 95       	swap	r24
     540:	80 7f       	andi	r24, 0xF0	; 240
     542:	f7 01       	movw	r30, r14
     544:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     546:	d6 01       	movw	r26, r12
     548:	8c 91       	ld	r24, X
     54a:	82 95       	swap	r24
     54c:	86 95       	lsr	r24
     54e:	86 95       	lsr	r24
     550:	83 70       	andi	r24, 0x03	; 3
     552:	19 f5       	brne	.+70     	; 0x59a <CAN_Init+0x1c0>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     554:	ef e0       	ldi	r30, 0x0F	; 15
     556:	ec 93       	st	X, r30

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     558:	c3 01       	movw	r24, r6
     55a:	90 70       	andi	r25, 0x00	; 0
     55c:	96 95       	lsr	r25
     55e:	87 95       	ror	r24
     560:	96 95       	lsr	r25
     562:	87 95       	ror	r24
     564:	96 95       	lsr	r25
     566:	87 95       	ror	r24
     568:	a3 ef       	ldi	r26, 0xF3	; 243
     56a:	b0 e0       	ldi	r27, 0x00	; 0
     56c:	8c 93       	st	X, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     56e:	86 2d       	mov	r24, r6
     570:	82 95       	swap	r24
     572:	88 0f       	add	r24, r24
     574:	80 7e       	andi	r24, 0xE0	; 224
     576:	e2 ef       	ldi	r30, 0xF2	; 242
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     57c:	e0 ee       	ldi	r30, 0xE0	; 224
     57e:	a6 ef       	ldi	r26, 0xF6	; 246
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	ec 93       	st	X, r30
		CANIDM1 = 0xFF;
     584:	ef ef       	ldi	r30, 0xFF	; 255
     586:	a7 ef       	ldi	r26, 0xF7	; 247
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	ec 93       	st	X, r30

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     58c:	d6 01       	movw	r26, r12
     58e:	8c 91       	ld	r24, X
     590:	80 68       	ori	r24, 0x80	; 128
     592:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     594:	f7 01       	movw	r30, r14
     596:	20 83       	st	Z, r18
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <CAN_Init+0x1ca>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     59a:	9f 5f       	subi	r25, 0xFF	; 255
     59c:	9f 30       	cpi	r25, 0x0F	; 15
     59e:	71 f6       	brne	.-100    	; 0x53c <CAN_Init+0x162>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     5a0:	d7 01       	movw	r26, r14
     5a2:	2c 93       	st	X, r18
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
	{
		CAN_InitRxMob(i + 1);
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     5a4:	85 e0       	ldi	r24, 0x05	; 5
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	74 d6       	rcall	.+3304   	; 0x1296 <calloc>
     5ae:	f4 01       	movw	r30, r8
     5b0:	80 83       	st	Z, r24
     5b2:	91 83       	std	Z+1, r25	; 0x01
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     5b4:	e2 e4       	ldi	r30, 0x42	; 66
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	e0 0f       	add	r30, r16
     5ba:	f1 1f       	adc	r31, r17
     5bc:	10 82       	st	Z, r1
     5be:	80 81       	ld	r24, Z
     5c0:	f2 01       	movw	r30, r4
     5c2:	e0 0f       	add	r30, r16
     5c4:	f1 1f       	adc	r31, r17
     5c6:	80 83       	st	Z, r24
     5c8:	80 81       	ld	r24, Z
     5ca:	f1 01       	movw	r30, r2
     5cc:	e0 0f       	add	r30, r16
     5ce:	f1 1f       	adc	r31, r17
     5d0:	80 83       	st	Z, r24
     5d2:	08 94       	sec
     5d4:	a1 1c       	adc	r10, r1
     5d6:	b1 1c       	adc	r11, r1
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	88 0e       	add	r8, r24
     5de:	99 1e       	adc	r9, r25
     5e0:	08 94       	sec
     5e2:	61 1c       	adc	r6, r1
     5e4:	71 1c       	adc	r7, r1

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     5e6:	99 81       	ldd	r25, Y+1	; 0x01
     5e8:	a9 16       	cp	r10, r25
     5ea:	08 f4       	brcc	.+2      	; 0x5ee <CAN_Init+0x214>
     5ec:	9b cf       	rjmp	.-202    	; 0x524 <CAN_Init+0x14a>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     5ee:	0f 90       	pop	r0
     5f0:	cf 91       	pop	r28
     5f2:	df 91       	pop	r29
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	bf 90       	pop	r11
     602:	af 90       	pop	r10
     604:	9f 90       	pop	r9
     606:	8f 90       	pop	r8
     608:	7f 90       	pop	r7
     60a:	6f 90       	pop	r6
     60c:	5f 90       	pop	r5
     60e:	4f 90       	pop	r4
     610:	3f 90       	pop	r3
     612:	2f 90       	pop	r2
     614:	08 95       	ret

00000616 <greenSide>:
};
/*************************************************************************************************************************************************************************************
																				ZUTA STRANA
*************************************************************************************************************************************************************************************/
void greenSide(void)
{
     616:	2f 92       	push	r2
     618:	3f 92       	push	r3
     61a:	4f 92       	push	r4
     61c:	5f 92       	push	r5
     61e:	6f 92       	push	r6
     620:	7f 92       	push	r7
     622:	8f 92       	push	r8
     624:	9f 92       	push	r9
     626:	af 92       	push	r10
     628:	bf 92       	push	r11
     62a:	cf 92       	push	r12
     62c:	df 92       	push	r13
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	df 93       	push	r29
     638:	cf 93       	push	r28
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	27 97       	sbiw	r28, 0x07	; 7
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
	position startingPosition;
	unsigned char currentPosition = 0, nextPosition = 0, odometryStatus;
	unsigned char activeState = TACTIC_ONE;
	
	startingPosition.x = 0;
     64a:	1a 82       	std	Y+2, r1	; 0x02
     64c:	19 82       	std	Y+1, r1	; 0x01
	startingPosition.y = 0;
     64e:	1c 82       	std	Y+4, r1	; 0x04
     650:	1b 82       	std	Y+3, r1	; 0x03
	startingPosition.angle = 0;
     652:	1e 82       	std	Y+6, r1	; 0x06
     654:	1d 82       	std	Y+5, r1	; 0x05
	setPosition(startingPosition);
     656:	49 81       	ldd	r20, Y+1	; 0x01
     658:	5a 81       	ldd	r21, Y+2	; 0x02
     65a:	6b 81       	ldd	r22, Y+3	; 0x03
     65c:	7c 81       	ldd	r23, Y+4	; 0x04
     65e:	8d 81       	ldd	r24, Y+5	; 0x05
     660:	9e 81       	ldd	r25, Y+6	; 0x06
     662:	5a d0       	rcall	.+180    	; 0x718 <setPosition>
				break;
			
			case TACTIC_ONE:
				for(currentPosition = nextPosition;currentPosition < TACTIC_ONE_POSITION_COUNT; currentPosition++)
				{
					odometryStatus = gotoXY(greenSideTacticOnePositions[currentPosition].point, greenSideTacticOnePositions[currentPosition].speed,
     664:	ac e0       	ldi	r26, 0x0C	; 12
     666:	b1 e0       	ldi	r27, 0x01	; 1
     668:	fd 01       	movw	r30, r26
     66a:	81 91       	ld	r24, Z+
     66c:	8f 83       	std	Y+7, r24	; 0x07
     66e:	10 81       	ld	r17, Z
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	ad 90       	ld	r10, X+
     674:	bc 90       	ld	r11, X
     676:	13 97       	sbiw	r26, 0x03	; 3
     678:	41 e0       	ldi	r20, 0x01	; 1
     67a:	70 90 06 01 	lds	r7, 0x0106
     67e:	60 90 07 01 	lds	r6, 0x0107
     682:	50 90 08 01 	lds	r5, 0x0108
     686:	40 90 09 01 	lds	r4, 0x0109
     68a:	30 90 0a 01 	lds	r3, 0x010A
     68e:	20 90 0b 01 	lds	r2, 0x010B
	startingPosition.angle = 0;
	setPosition(startingPosition);
	
	while (1)
	{
		switch(activeState)
     692:	0f 2e       	mov	r0, r31
     694:	f0 e1       	ldi	r31, 0x10	; 16
     696:	8f 2e       	mov	r8, r31
     698:	f7 e2       	ldi	r31, 0x27	; 39
     69a:	9f 2e       	mov	r9, r31
     69c:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     69e:	0f 2e       	mov	r0, r31
     6a0:	fa ef       	ldi	r31, 0xFA	; 250
     6a2:	cf 2e       	mov	r12, r31
     6a4:	dd 24       	eor	r13, r13
     6a6:	f0 2d       	mov	r31, r0
     6a8:	42 30       	cpi	r20, 0x02	; 2
     6aa:	19 f0       	breq	.+6      	; 0x6b2 <greenSide+0x9c>
     6ac:	41 30       	cpi	r20, 0x01	; 1
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <greenSide+0x92>
     6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <greenSide+0xac>
     6b2:	94 01       	movw	r18, r8
     6b4:	c6 01       	movw	r24, r12
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <greenSide+0xa0>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ba:	21 50       	subi	r18, 0x01	; 1
     6bc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6be:	d1 f7       	brne	.-12     	; 0x6b4 <greenSide+0x9e>
     6c0:	f3 cf       	rjmp	.-26     	; 0x6a8 <greenSide+0x92>
				break;
			
			case TACTIC_ONE:
				for(currentPosition = nextPosition;currentPosition < TACTIC_ONE_POSITION_COUNT; currentPosition++)
				{
					odometryStatus = gotoXY(greenSideTacticOnePositions[currentPosition].point, greenSideTacticOnePositions[currentPosition].speed,
     6c2:	47 2d       	mov	r20, r7
     6c4:	56 2d       	mov	r21, r6
     6c6:	65 2d       	mov	r22, r5
     6c8:	74 2d       	mov	r23, r4
     6ca:	83 2d       	mov	r24, r3
     6cc:	92 2d       	mov	r25, r2
     6ce:	2f 81       	ldd	r18, Y+7	; 0x07
     6d0:	01 2f       	mov	r16, r17
     6d2:	75 01       	movw	r14, r10
     6d4:	45 d1       	rcall	.+650    	; 0x960 <gotoXY>
     6d6:	42 e0       	ldi	r20, 0x02	; 2
     6d8:	e7 cf       	rjmp	.-50     	; 0x6a8 <greenSide+0x92>

000006da <main>:
		while(1);
	}
}
int main(void)
{
	SystemInit();
     6da:	13 d3       	rcall	.+1574   	; 0xd02 <SystemInit>
     6dc:	28 ee       	ldi	r18, 0xE8	; 232
     6de:	33 e0       	ldi	r19, 0x03	; 3
     6e0:	4a ef       	ldi	r20, 0xFA	; 250
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	ca 01       	movw	r24, r20
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <main+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ea:	21 50       	subi	r18, 0x01	; 1
     6ec:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6ee:	d1 f7       	brne	.-12     	; 0x6e4 <main+0xa>
	
	_delay_ms(100);
    while (1) 
    {
		if(sidesSwitch() == 0)
     6f0:	fc d2       	rcall	.+1528   	; 0xcea <sidesSwitch>
     6f2:	88 23       	and	r24, r24
     6f4:	11 f4       	brne	.+4      	; 0x6fa <main+0x20>
		{
			purpleSide();			
     6f6:	02 d2       	rcall	.+1028   	; 0xafc <purpleSide>
     6f8:	fb cf       	rjmp	.-10     	; 0x6f0 <main+0x16>
		}
		else{
			greenSide();
     6fa:	8d df       	rcall	.-230    	; 0x616 <greenSide>
     6fc:	f9 cf       	rjmp	.-14     	; 0x6f0 <main+0x16>

000006fe <TimerHook>:
#include "actuators.h"
#include "odometry.h"

void TimerHook(void)
{
	if(matchIsStarted() == 1 && getSystemTime() > 90000)
     6fe:	fe d2       	rcall	.+1532   	; 0xcfc <matchIsStarted>
     700:	81 30       	cpi	r24, 0x01	; 1
     702:	49 f4       	brne	.+18     	; 0x716 <TimerHook+0x18>
     704:	e4 d2       	rcall	.+1480   	; 0xcce <getSystemTime>
     706:	61 59       	subi	r22, 0x91	; 145
     708:	7f 45       	sbci	r23, 0x5F	; 95
     70a:	81 40       	sbci	r24, 0x01	; 1
     70c:	90 40       	sbci	r25, 0x00	; 0
     70e:	18 f0       	brcs	.+6      	; 0x716 <TimerHook+0x18>
	{
		stop(HARD_STOP);
     710:	83 e5       	ldi	r24, 0x53	; 83
     712:	cd d0       	rcall	.+410    	; 0x8ae <stop>
     714:	ff cf       	rjmp	.-2      	; 0x714 <TimerHook+0x16>
     716:	08 95       	ret

00000718 <setPosition>:
		}
	}
}

char setPosition(position coordinates)
{
     718:	2f 92       	push	r2
     71a:	3f 92       	push	r3
     71c:	4f 92       	push	r4
     71e:	5f 92       	push	r5
     720:	6f 92       	push	r6
     722:	7f 92       	push	r7
     724:	8f 92       	push	r8
     726:	9f 92       	push	r9
     728:	af 92       	push	r10
     72a:	bf 92       	push	r11
     72c:	cf 92       	push	r12
     72e:	df 92       	push	r13
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	df 93       	push	r29
     73a:	cf 93       	push	r28
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	66 97       	sbiw	r28, 0x16	; 22
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
     74c:	49 87       	std	Y+9, r20	; 0x09
     74e:	5a 87       	std	Y+10, r21	; 0x0a
     750:	6b 87       	std	Y+11, r22	; 0x0b
     752:	7c 87       	std	Y+12, r23	; 0x0c
     754:	8d 87       	std	Y+13, r24	; 0x0d
     756:	9e 87       	std	Y+14, r25	; 0x0e
     758:	4d 84       	ldd	r4, Y+13	; 0x0d
     75a:	5e 84       	ldd	r5, Y+14	; 0x0e
	position temp;
	
	while(1)
	{
		buffer[0] = 'I';
		buffer[1] = coordinates.x >> 8;
     75c:	89 85       	ldd	r24, Y+9	; 0x09
     75e:	9a 85       	ldd	r25, Y+10	; 0x0a
     760:	98 8b       	std	Y+16, r25	; 0x10
     762:	8f 87       	std	Y+15, r24	; 0x0f
     764:	5e 8b       	std	Y+22, r21	; 0x16
		buffer[2] = coordinates.x & 0XFF;
		buffer[3] = coordinates.y >> 8;
     766:	2b 84       	ldd	r2, Y+11	; 0x0b
     768:	3c 84       	ldd	r3, Y+12	; 0x0c
     76a:	7d 8b       	std	Y+21, r23	; 0x15
     76c:	0a ef       	ldi	r16, 0xFA	; 250
     76e:	10 e0       	ldi	r17, 0x00	; 0
		buffer[4] = coordinates.y & 0XFF;
		buffer[5] = coordinates.angle << 8;
		buffer[6] = coordinates.angle & 0XFF;
		
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     770:	7e 01       	movw	r14, r28
     772:	08 94       	sec
     774:	e1 1c       	adc	r14, r1
     776:	f1 1c       	adc	r15, r1
     778:	0f 2e       	mov	r0, r31
     77a:	f4 ef       	ldi	r31, 0xF4	; 244
     77c:	6f 2e       	mov	r6, r31
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	7f 2e       	mov	r7, r31
     782:	f0 2d       	mov	r31, r0
	unsigned char buffer[8];
	position temp;
	
	while(1)
	{
		buffer[0] = 'I';
     784:	89 e4       	ldi	r24, 0x49	; 73
     786:	89 83       	std	Y+1, r24	; 0x01
		buffer[1] = coordinates.x >> 8;
     788:	9e 89       	ldd	r25, Y+22	; 0x16
     78a:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2] = coordinates.x & 0XFF;
     78c:	2f 85       	ldd	r18, Y+15	; 0x0f
     78e:	2b 83       	std	Y+3, r18	; 0x03
		buffer[3] = coordinates.y >> 8;
     790:	8d 89       	ldd	r24, Y+21	; 0x15
     792:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4] = coordinates.y & 0XFF;
     794:	2d 82       	std	Y+5, r2	; 0x05
		buffer[5] = coordinates.angle << 8;
     796:	1e 82       	std	Y+6, r1	; 0x06
		buffer[6] = coordinates.angle & 0XFF;
     798:	4f 82       	std	Y+7, r4	; 0x07
     79a:	07 c0       	rjmp	.+14     	; 0x7aa <setPosition+0x92>
		
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     79c:	93 01       	movw	r18, r6
     79e:	c8 01       	movw	r24, r16
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <setPosition+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a4:	21 50       	subi	r18, 0x01	; 1
     7a6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7a8:	d1 f7       	brne	.-12     	; 0x79e <setPosition+0x86>
     7aa:	c7 01       	movw	r24, r14
     7ac:	63 ec       	ldi	r22, 0xC3	; 195
     7ae:	cd dd       	rcall	.-1126   	; 0x34a <CAN_Write>
     7b0:	88 23       	and	r24, r24
     7b2:	a1 f7       	brne	.-24     	; 0x79c <setPosition+0x84>
		_delay_ms(50); // DA LI TREBA PROVERA ZA ERROR?
		
		buffer[0] = 'P';
     7b4:	90 e5       	ldi	r25, 0x50	; 80
     7b6:	99 83       	std	Y+1, r25	; 0x01
     7b8:	07 c0       	rjmp	.+14     	; 0x7c8 <setPosition+0xb0>
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     7ba:	93 01       	movw	r18, r6
     7bc:	c8 01       	movw	r24, r16
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <setPosition+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7c6:	d1 f7       	brne	.-12     	; 0x7bc <setPosition+0xa4>
     7c8:	c7 01       	movw	r24, r14
     7ca:	63 ec       	ldi	r22, 0xC3	; 195
     7cc:	be dd       	rcall	.-1156   	; 0x34a <CAN_Write>
     7ce:	88 23       	and	r24, r24
     7d0:	a1 f7       	brne	.-24     	; 0x7ba <setPosition+0xa2>
		_delay_ms(50);
		CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
     7d2:	c7 01       	movw	r24, r14
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	5d dd       	rcall	.-1350   	; 0x292 <CAN_Read>
		
		temp.x = (buffer[1] << 8) | buffer[2];
		temp.y = (buffer[3] << 8) | buffer[4];
     7d8:	2c 81       	ldd	r18, Y+4	; 0x04
     7da:	2c 8b       	std	Y+20, r18	; 0x14
     7dc:	8d 81       	ldd	r24, Y+5	; 0x05
     7de:	8b 8b       	std	Y+19, r24	; 0x13
		temp.angle = (buffer[5] << 8) | buffer[6];
     7e0:	9e 81       	ldd	r25, Y+6	; 0x06
     7e2:	9a 8b       	std	Y+18, r25	; 0x12
     7e4:	2f 81       	ldd	r18, Y+7	; 0x07
     7e6:	29 8b       	std	Y+17, r18	; 0x11
		
		if(!((fabs(temp.x - coordinates.x) > 5) || (fabs(temp.y - coordinates.y) > 5 || (fabs(temp.angle - coordinates.angle) > 5))))
     7e8:	da 80       	ldd	r13, Y+2	; 0x02
     7ea:	cc 24       	eor	r12, r12
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	b6 01       	movw	r22, r12
     7f2:	68 2b       	or	r22, r24
     7f4:	79 2b       	or	r23, r25
     7f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     7f8:	98 89       	ldd	r25, Y+16	; 0x10
     7fa:	68 1b       	sub	r22, r24
     7fc:	79 0b       	sbc	r23, r25
     7fe:	88 27       	eor	r24, r24
     800:	77 fd       	sbrc	r23, 7
     802:	80 95       	com	r24
     804:	98 2f       	mov	r25, r24
     806:	93 d4       	rcall	.+2342   	; 0x112e <__floatsisf>
     808:	9f 77       	andi	r25, 0x7F	; 127
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	40 ea       	ldi	r20, 0xA0	; 160
     810:	50 e4       	ldi	r21, 0x40	; 64
     812:	19 d5       	rcall	.+2610   	; 0x1246 <__gesf2>
     814:	18 16       	cp	r1, r24
     816:	0c f4       	brge	.+2      	; 0x81a <setPosition+0x102>
     818:	b5 cf       	rjmp	.-150    	; 0x784 <setPosition+0x6c>
     81a:	bc 88       	ldd	r11, Y+20	; 0x14
     81c:	aa 24       	eor	r10, r10
     81e:	2b 89       	ldd	r18, Y+19	; 0x13
     820:	82 2f       	mov	r24, r18
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	b5 01       	movw	r22, r10
     826:	68 2b       	or	r22, r24
     828:	79 2b       	or	r23, r25
     82a:	62 19       	sub	r22, r2
     82c:	73 09       	sbc	r23, r3
     82e:	88 27       	eor	r24, r24
     830:	77 fd       	sbrc	r23, 7
     832:	80 95       	com	r24
     834:	98 2f       	mov	r25, r24
     836:	7b d4       	rcall	.+2294   	; 0x112e <__floatsisf>
     838:	9f 77       	andi	r25, 0x7F	; 127
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 ea       	ldi	r20, 0xA0	; 160
     840:	50 e4       	ldi	r21, 0x40	; 64
     842:	01 d5       	rcall	.+2562   	; 0x1246 <__gesf2>
     844:	18 16       	cp	r1, r24
     846:	0c f4       	brge	.+2      	; 0x84a <setPosition+0x132>
     848:	9d cf       	rjmp	.-198    	; 0x784 <setPosition+0x6c>
     84a:	9a 88       	ldd	r9, Y+18	; 0x12
     84c:	88 24       	eor	r8, r8
     84e:	29 89       	ldd	r18, Y+17	; 0x11
     850:	82 2f       	mov	r24, r18
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	b4 01       	movw	r22, r8
     856:	68 2b       	or	r22, r24
     858:	79 2b       	or	r23, r25
     85a:	64 19       	sub	r22, r4
     85c:	75 09       	sbc	r23, r5
     85e:	88 27       	eor	r24, r24
     860:	77 fd       	sbrc	r23, 7
     862:	80 95       	com	r24
     864:	98 2f       	mov	r25, r24
     866:	63 d4       	rcall	.+2246   	; 0x112e <__floatsisf>
     868:	9f 77       	andi	r25, 0x7F	; 127
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 ea       	ldi	r20, 0xA0	; 160
     870:	50 e4       	ldi	r21, 0x40	; 64
     872:	e9 d4       	rcall	.+2514   	; 0x1246 <__gesf2>
     874:	18 16       	cp	r1, r24
     876:	0c f4       	brge	.+2      	; 0x87a <setPosition+0x162>
     878:	85 cf       	rjmp	.-246    	; 0x784 <setPosition+0x6c>
		return ODOMETRY_SUCCESS;
	}
}
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	66 96       	adiw	r28, 0x16	; 22
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	cf 91       	pop	r28
     88a:	df 91       	pop	r29
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	df 90       	pop	r13
     896:	cf 90       	pop	r12
     898:	bf 90       	pop	r11
     89a:	af 90       	pop	r10
     89c:	9f 90       	pop	r9
     89e:	8f 90       	pop	r8
     8a0:	7f 90       	pop	r7
     8a2:	6f 90       	pop	r6
     8a4:	5f 90       	pop	r5
     8a6:	4f 90       	pop	r4
     8a8:	3f 90       	pop	r3
     8aa:	2f 90       	pop	r2
     8ac:	08 95       	ret

000008ae <stop>:
#include <stdlib.h>
#include <util/delay.h>
#include <math.h>

char stop(char type)
{
     8ae:	af 92       	push	r10
     8b0:	bf 92       	push	r11
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	df 93       	push	r29
     8c0:	cf 93       	push	r28
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	28 97       	sbiw	r28, 0x08	; 8
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	b8 2e       	mov	r11, r24
     8d4:	0a ef       	ldi	r16, 0xFA	; 250
     8d6:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
		buffer[0] = type;
		
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     8d8:	7e 01       	movw	r14, r28
     8da:	08 94       	sec
     8dc:	e1 1c       	adc	r14, r1
     8de:	f1 1c       	adc	r15, r1
     8e0:	0f 2e       	mov	r0, r31
     8e2:	f4 ef       	ldi	r31, 0xF4	; 244
     8e4:	cf 2e       	mov	r12, r31
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
     8e8:	df 2e       	mov	r13, r31
     8ea:	f0 2d       	mov	r31, r0
		_delay_ms(50);
		
		buffer[0] = 'P';
     8ec:	0f 2e       	mov	r0, r31
     8ee:	f0 e5       	ldi	r31, 0x50	; 80
     8f0:	af 2e       	mov	r10, r31
     8f2:	f0 2d       	mov	r31, r0
{
	unsigned char buffer[8];
	
	while(1)
	{
		buffer[0] = type;
     8f4:	b9 82       	std	Y+1, r11	; 0x01
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <stop+0x58>
		
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     8f8:	96 01       	movw	r18, r12
     8fa:	c8 01       	movw	r24, r16
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <stop+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     900:	21 50       	subi	r18, 0x01	; 1
     902:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     904:	d1 f7       	brne	.-12     	; 0x8fa <stop+0x4c>
     906:	c7 01       	movw	r24, r14
     908:	63 ec       	ldi	r22, 0xC3	; 195
     90a:	1f dd       	rcall	.-1474   	; 0x34a <CAN_Write>
     90c:	88 23       	and	r24, r24
     90e:	a1 f7       	brne	.-24     	; 0x8f8 <stop+0x4a>
		_delay_ms(50);
		
		buffer[0] = 'P';
     910:	a9 82       	std	Y+1, r10	; 0x01
     912:	07 c0       	rjmp	.+14     	; 0x922 <stop+0x74>
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     914:	96 01       	movw	r18, r12
     916:	c8 01       	movw	r24, r16
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <stop+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     91c:	21 50       	subi	r18, 0x01	; 1
     91e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     920:	d1 f7       	brne	.-12     	; 0x916 <stop+0x68>
     922:	c7 01       	movw	r24, r14
     924:	63 ec       	ldi	r22, 0xC3	; 195
     926:	11 dd       	rcall	.-1502   	; 0x34a <CAN_Write>
     928:	88 23       	and	r24, r24
     92a:	a1 f7       	brne	.-24     	; 0x914 <stop+0x66>
		_delay_ms(50);
		CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
     92c:	c7 01       	movw	r24, r14
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	b0 dc       	rcall	.-1696   	; 0x292 <CAN_Read>
		
		if(buffer[0] != MOVING && buffer[0] != ROTATING)
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	8d 34       	cpi	r24, 0x4D	; 77
     936:	f1 f2       	breq	.-68     	; 0x8f4 <stop+0x46>
     938:	82 35       	cpi	r24, 0x52	; 82
     93a:	e1 f2       	breq	.-72     	; 0x8f4 <stop+0x46>
		return ODOMETRY_SUCCESS;
	}
}
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	28 96       	adiw	r28, 0x08	; 8
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	cf 91       	pop	r28
     94c:	df 91       	pop	r29
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	af 90       	pop	r10
     95e:	08 95       	ret

00000960 <gotoXY>:
		}
	}
}

char gotoXY(position coordinates, unsigned char speed, signed char direction, char (*callback)(unsigned long startTime))
{
     960:	2f 92       	push	r2
     962:	3f 92       	push	r3
     964:	4f 92       	push	r4
     966:	5f 92       	push	r5
     968:	7f 92       	push	r7
     96a:	8f 92       	push	r8
     96c:	9f 92       	push	r9
     96e:	af 92       	push	r10
     970:	bf 92       	push	r11
     972:	cf 92       	push	r12
     974:	df 92       	push	r13
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	df 93       	push	r29
     980:	cf 93       	push	r28
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	2e 97       	sbiw	r28, 0x0e	; 14
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	49 87       	std	Y+9, r20	; 0x09
     994:	5a 87       	std	Y+10, r21	; 0x0a
     996:	6b 87       	std	Y+11, r22	; 0x0b
     998:	7c 87       	std	Y+12, r23	; 0x0c
     99a:	8d 87       	std	Y+13, r24	; 0x0d
     99c:	9e 87       	std	Y+14, r25	; 0x0e
     99e:	70 2e       	mov	r7, r16
     9a0:	27 01       	movw	r4, r14
     9a2:	c9 84       	ldd	r12, Y+9	; 0x09
     9a4:	da 84       	ldd	r13, Y+10	; 0x0a
     9a6:	eb 84       	ldd	r14, Y+11	; 0x0b
     9a8:	fc 84       	ldd	r15, Y+12	; 0x0c
	unsigned char buffer[8], callbackReturnValue;
	unsigned long time;
	
	buffer[0] = 'V';
     9aa:	86 e5       	ldi	r24, 0x56	; 86
     9ac:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = speed;
     9ae:	2a 83       	std	Y+2, r18	; 0x02
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     9b0:	5e 01       	movw	r10, r28
     9b2:	08 94       	sec
     9b4:	a1 1c       	adc	r10, r1
     9b6:	b1 1c       	adc	r11, r1
     9b8:	0f 2e       	mov	r0, r31
     9ba:	f4 ef       	ldi	r31, 0xF4	; 244
     9bc:	8f 2e       	mov	r8, r31
     9be:	f1 e0       	ldi	r31, 0x01	; 1
     9c0:	9f 2e       	mov	r9, r31
     9c2:	f0 2d       	mov	r31, r0
     9c4:	0a ef       	ldi	r16, 0xFA	; 250
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	07 c0       	rjmp	.+14     	; 0x9d8 <gotoXY+0x78>
     9ca:	94 01       	movw	r18, r8
     9cc:	c8 01       	movw	r24, r16
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	f1 f7       	brne	.-4      	; 0x9ce <gotoXY+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9d2:	21 50       	subi	r18, 0x01	; 1
     9d4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d6:	d1 f7       	brne	.-12     	; 0x9cc <gotoXY+0x6c>
     9d8:	c5 01       	movw	r24, r10
     9da:	63 ec       	ldi	r22, 0xC3	; 195
     9dc:	b6 dc       	rcall	.-1684   	; 0x34a <CAN_Write>
     9de:	88 23       	and	r24, r24
     9e0:	a1 f7       	brne	.-24     	; 0x9ca <gotoXY+0x6a>
	_delay_ms(50);
	
	buffer[0] = 'G';
     9e2:	87 e4       	ldi	r24, 0x47	; 71
     9e4:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = coordinates.x >> 8;
     9e6:	8d 2d       	mov	r24, r13
     9e8:	99 27       	eor	r25, r25
     9ea:	87 fd       	sbrc	r24, 7
     9ec:	9a 95       	dec	r25
     9ee:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = coordinates.x & 0XFF;
     9f0:	cb 82       	std	Y+3, r12	; 0x03
	buffer[3] = coordinates.y >> 8;
     9f2:	8f 2d       	mov	r24, r15
     9f4:	99 27       	eor	r25, r25
     9f6:	87 fd       	sbrc	r24, 7
     9f8:	9a 95       	dec	r25
     9fa:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = coordinates.y & 0XFF;
     9fc:	ed 82       	std	Y+5, r14	; 0x05
	buffer[5] = 0;//Mozda ne treba 0
     9fe:	1e 82       	std	Y+6, r1	; 0x06
	buffer[6] = direction;
     a00:	7f 82       	std	Y+7, r7	; 0x07
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     a02:	7e 01       	movw	r14, r28
     a04:	08 94       	sec
     a06:	e1 1c       	adc	r14, r1
     a08:	f1 1c       	adc	r15, r1
     a0a:	0f 2e       	mov	r0, r31
     a0c:	f4 ef       	ldi	r31, 0xF4	; 244
     a0e:	cf 2e       	mov	r12, r31
     a10:	f1 e0       	ldi	r31, 0x01	; 1
     a12:	df 2e       	mov	r13, r31
     a14:	f0 2d       	mov	r31, r0
     a16:	0a ef       	ldi	r16, 0xFA	; 250
     a18:	10 e0       	ldi	r17, 0x00	; 0
     a1a:	07 c0       	rjmp	.+14     	; 0xa2a <gotoXY+0xca>
     a1c:	96 01       	movw	r18, r12
     a1e:	c8 01       	movw	r24, r16
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	f1 f7       	brne	.-4      	; 0xa20 <gotoXY+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a24:	21 50       	subi	r18, 0x01	; 1
     a26:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a28:	d1 f7       	brne	.-12     	; 0xa1e <gotoXY+0xbe>
     a2a:	c7 01       	movw	r24, r14
     a2c:	63 ec       	ldi	r22, 0xC3	; 195
     a2e:	8d dc       	rcall	.-1766   	; 0x34a <CAN_Write>
     a30:	88 23       	and	r24, r24
     a32:	a1 f7       	brne	.-24     	; 0xa1c <gotoXY+0xbc>
	_delay_ms(50);
	
	time = getSystemTime();
     a34:	4c d1       	rcall	.+664    	; 0xcce <getSystemTime>
     a36:	4c 01       	movw	r8, r24
     a38:	aa 24       	eor	r10, r10
     a3a:	97 fc       	sbrc	r9, 7
     a3c:	a0 94       	com	r10
     a3e:	ba 2c       	mov	r11, r10
	while (1)
	{
		buffer[0] = 'P';
     a40:	0f 2e       	mov	r0, r31
     a42:	f0 e5       	ldi	r31, 0x50	; 80
     a44:	7f 2e       	mov	r7, r31
     a46:	f0 2d       	mov	r31, r0
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     a48:	0f 2e       	mov	r0, r31
     a4a:	f4 ef       	ldi	r31, 0xF4	; 244
     a4c:	2f 2e       	mov	r2, r31
     a4e:	f1 e0       	ldi	r31, 0x01	; 1
     a50:	3f 2e       	mov	r3, r31
     a52:	f0 2d       	mov	r31, r0
     a54:	0a ef       	ldi	r16, 0xFA	; 250
     a56:	10 e0       	ldi	r17, 0x00	; 0
     a58:	7e 01       	movw	r14, r28
     a5a:	08 94       	sec
     a5c:	e1 1c       	adc	r14, r1
     a5e:	f1 1c       	adc	r15, r1
     a60:	c1 01       	movw	r24, r2
     a62:	d2 2c       	mov	r13, r2
     a64:	c9 2e       	mov	r12, r25
	_delay_ms(50);
	
	time = getSystemTime();
	while (1)
	{
		buffer[0] = 'P';
     a66:	79 82       	std	Y+1, r7	; 0x01
     a68:	07 c0       	rjmp	.+14     	; 0xa78 <gotoXY+0x118>
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     a6a:	8d 2d       	mov	r24, r13
     a6c:	9c 2d       	mov	r25, r12
     a6e:	f8 01       	movw	r30, r16
     a70:	31 97       	sbiw	r30, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <gotoXY+0x110>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a74:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a76:	d9 f7       	brne	.-10     	; 0xa6e <gotoXY+0x10e>
     a78:	c7 01       	movw	r24, r14
     a7a:	63 ec       	ldi	r22, 0xC3	; 195
     a7c:	66 dc       	rcall	.-1844   	; 0x34a <CAN_Write>
     a7e:	88 23       	and	r24, r24
     a80:	a1 f7       	brne	.-24     	; 0xa6a <gotoXY+0x10a>
		_delay_ms(50);
		CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
     a82:	c7 01       	movw	r24, r14
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	05 dc       	rcall	.-2038   	; 0x292 <CAN_Read>
		
		if(buffer[0] == IDLE)
     a88:	49 81       	ldd	r20, Y+1	; 0x01
     a8a:	49 34       	cpi	r20, 0x49	; 73
     a8c:	11 f4       	brne	.+4      	; 0xa92 <gotoXY+0x132>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	1d c0       	rjmp	.+58     	; 0xacc <gotoXY+0x16c>
		return ODOMETRY_SUCCESS;
		else if(buffer[0] == STUCK)
     a92:	43 35       	cpi	r20, 0x53	; 83
     a94:	11 f4       	brne	.+4      	; 0xa9a <gotoXY+0x13a>
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	19 c0       	rjmp	.+50     	; 0xacc <gotoXY+0x16c>
		return ODOMETRY_STUCK;
		else if(buffer[0] == ERROR)
     a9a:	45 34       	cpi	r20, 0x45	; 69
     a9c:	b1 f0       	breq	.+44     	; 0xaca <gotoXY+0x16a>
     a9e:	91 01       	movw	r18, r2
     aa0:	c8 01       	movw	r24, r16
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <gotoXY+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aaa:	d1 f7       	brne	.-12     	; 0xaa0 <gotoXY+0x140>
		return ODOMETRY_FAIL;
		
		_delay_ms(50);
		if(buffer[0] != 'R' && callback != NULL)
     aac:	42 35       	cpi	r20, 0x52	; 82
     aae:	d9 f2       	breq	.-74     	; 0xa66 <gotoXY+0x106>
     ab0:	41 14       	cp	r4, r1
     ab2:	51 04       	cpc	r5, r1
     ab4:	c1 f2       	breq	.-80     	; 0xa66 <gotoXY+0x106>
		{
			callbackReturnValue = callback(time);
     ab6:	c5 01       	movw	r24, r10
     ab8:	b4 01       	movw	r22, r8
     aba:	f2 01       	movw	r30, r4
     abc:	09 95       	icall
			if(callbackReturnValue == 1)
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	21 f0       	breq	.+8      	; 0xaca <gotoXY+0x16a>
			return ODOMETRY_FAIL;
			if(callbackReturnValue == 2)
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	81 f6       	brne	.-96     	; 0xa66 <gotoXY+0x106>
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <gotoXY+0x16c>
     aca:	81 e0       	ldi	r24, 0x01	; 1
			return ODOMETRY_CALLBACK_RETURN;
		}
	}
}
     acc:	2e 96       	adiw	r28, 0x0e	; 14
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	de bf       	out	0x3e, r29	; 62
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	cd bf       	out	0x3d, r28	; 61
     ad8:	cf 91       	pop	r28
     ada:	df 91       	pop	r29
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	df 90       	pop	r13
     ae6:	cf 90       	pop	r12
     ae8:	bf 90       	pop	r11
     aea:	af 90       	pop	r10
     aec:	9f 90       	pop	r9
     aee:	8f 90       	pop	r8
     af0:	7f 90       	pop	r7
     af2:	5f 90       	pop	r5
     af4:	4f 90       	pop	r4
     af6:	3f 90       	pop	r3
     af8:	2f 90       	pop	r2
     afa:	08 95       	ret

00000afc <purpleSide>:

/*************************************************************************************************************************************************************************************
																				ZELENA STRANA
*************************************************************************************************************************************************************************************/
void purpleSide(void)
{
     afc:	2f 92       	push	r2
     afe:	3f 92       	push	r3
     b00:	4f 92       	push	r4
     b02:	5f 92       	push	r5
     b04:	6f 92       	push	r6
     b06:	7f 92       	push	r7
     b08:	8f 92       	push	r8
     b0a:	9f 92       	push	r9
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	27 97       	sbiw	r28, 0x07	; 7
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
	position startingPosition;
	unsigned char currentPosition = 0, nextPosition = 0, odometryStatus;
	unsigned char activeState = TACTIC_ONE;
	
	//namestiti startingposition
	startingPosition.x = 0;
     b30:	1a 82       	std	Y+2, r1	; 0x02
     b32:	19 82       	std	Y+1, r1	; 0x01
	startingPosition.y = 0;
     b34:	1c 82       	std	Y+4, r1	; 0x04
     b36:	1b 82       	std	Y+3, r1	; 0x03
	startingPosition.angle = 0;
     b38:	1e 82       	std	Y+6, r1	; 0x06
     b3a:	1d 82       	std	Y+5, r1	; 0x05
	setPosition(startingPosition);
     b3c:	49 81       	ldd	r20, Y+1	; 0x01
     b3e:	5a 81       	ldd	r21, Y+2	; 0x02
     b40:	6b 81       	ldd	r22, Y+3	; 0x03
     b42:	7c 81       	ldd	r23, Y+4	; 0x04
     b44:	8d 81       	ldd	r24, Y+5	; 0x05
     b46:	9e 81       	ldd	r25, Y+6	; 0x06
     b48:	e7 dd       	rcall	.-1074   	; 0x718 <setPosition>
				nextPosition = currentPosition;
				break;
			case TACTIC_ONE:
				for(currentPosition = nextPosition;currentPosition < TACTIC_ONE_POSITION_COUNT; currentPosition++)
				{
					odometryStatus = gotoXY(purpleSideTacticOnePositions[currentPosition].point, purpleSideTacticOnePositions[currentPosition].speed,
     b4a:	a6 e1       	ldi	r26, 0x16	; 22
     b4c:	b1 e0       	ldi	r27, 0x01	; 1
     b4e:	fd 01       	movw	r30, r26
     b50:	81 91       	ld	r24, Z+
     b52:	8f 83       	std	Y+7, r24	; 0x07
     b54:	10 81       	ld	r17, Z
     b56:	12 96       	adiw	r26, 0x02	; 2
     b58:	ad 90       	ld	r10, X+
     b5a:	bc 90       	ld	r11, X
     b5c:	13 97       	sbiw	r26, 0x03	; 3
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	70 90 10 01 	lds	r7, 0x0110
     b64:	60 90 11 01 	lds	r6, 0x0111
     b68:	50 90 12 01 	lds	r5, 0x0112
     b6c:	40 90 13 01 	lds	r4, 0x0113
     b70:	30 90 14 01 	lds	r3, 0x0114
     b74:	20 90 15 01 	lds	r2, 0x0115
	startingPosition.angle = 0;
	setPosition(startingPosition);
	
	while (1)
	{
		switch(activeState)
     b78:	0f 2e       	mov	r0, r31
     b7a:	f0 e1       	ldi	r31, 0x10	; 16
     b7c:	8f 2e       	mov	r8, r31
     b7e:	f7 e2       	ldi	r31, 0x27	; 39
     b80:	9f 2e       	mov	r9, r31
     b82:	f0 2d       	mov	r31, r0
     b84:	0f 2e       	mov	r0, r31
     b86:	fa ef       	ldi	r31, 0xFA	; 250
     b88:	cf 2e       	mov	r12, r31
     b8a:	dd 24       	eor	r13, r13
     b8c:	f0 2d       	mov	r31, r0
     b8e:	42 30       	cpi	r20, 0x02	; 2
     b90:	19 f0       	breq	.+6      	; 0xb98 <purpleSide+0x9c>
     b92:	41 30       	cpi	r20, 0x01	; 1
     b94:	e1 f7       	brne	.-8      	; 0xb8e <purpleSide+0x92>
     b96:	08 c0       	rjmp	.+16     	; 0xba8 <purpleSide+0xac>
     b98:	94 01       	movw	r18, r8
     b9a:	c6 01       	movw	r24, r12
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <purpleSide+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba0:	21 50       	subi	r18, 0x01	; 1
     ba2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba4:	d1 f7       	brne	.-12     	; 0xb9a <purpleSide+0x9e>
     ba6:	f3 cf       	rjmp	.-26     	; 0xb8e <purpleSide+0x92>
				nextPosition = currentPosition;
				break;
			case TACTIC_ONE:
				for(currentPosition = nextPosition;currentPosition < TACTIC_ONE_POSITION_COUNT; currentPosition++)
				{
					odometryStatus = gotoXY(purpleSideTacticOnePositions[currentPosition].point, purpleSideTacticOnePositions[currentPosition].speed,
     ba8:	47 2d       	mov	r20, r7
     baa:	56 2d       	mov	r21, r6
     bac:	65 2d       	mov	r22, r5
     bae:	74 2d       	mov	r23, r4
     bb0:	83 2d       	mov	r24, r3
     bb2:	92 2d       	mov	r25, r2
     bb4:	2f 81       	ldd	r18, Y+7	; 0x07
     bb6:	01 2f       	mov	r16, r17
     bb8:	75 01       	movw	r14, r10
     bba:	d2 de       	rcall	.-604    	; 0x960 <gotoXY>
     bbc:	42 e0       	ldi	r20, 0x02	; 2
     bbe:	e7 cf       	rjmp	.-50     	; 0xb8e <purpleSide+0x92>

00000bc0 <GPIO_PinRead>:
	return i;
}

unsigned char GPIO_PinRead(unsigned char pinHandler)
{
	return ( (gpios[pinHandler]->buffer[0]) & (gpios[pinHandler]->buffer[1]) & (gpios[pinHandler]->buffer[2]) );
     bc0:	e8 2f       	mov	r30, r24
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	e1 5b       	subi	r30, 0xB1	; 177
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	01 90       	ld	r0, Z+
     bce:	f0 81       	ld	r31, Z
     bd0:	e0 2d       	mov	r30, r0
     bd2:	23 81       	ldd	r18, Z+3	; 0x03
     bd4:	84 81       	ldd	r24, Z+4	; 0x04
     bd6:	95 81       	ldd	r25, Z+5	; 0x05
     bd8:	82 23       	and	r24, r18
}
     bda:	89 23       	and	r24, r25
     bdc:	08 95       	ret

00000bde <GPIO_ReadFromRegister>:

unsigned char GPIO_ReadFromRegister(unsigned char pinHandler)
{
	unsigned char state = 0;

	state = ((_MMIO_BYTE(gpios[pinHandler]->baseAddress - 2)) >> (gpios[pinHandler]->pinPosition)) & 0x01;
     bde:	e8 2f       	mov	r30, r24
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	ee 0f       	add	r30, r30
     be4:	ff 1f       	adc	r31, r31
     be6:	e1 5b       	subi	r30, 0xB1	; 177
     be8:	fe 4f       	sbci	r31, 0xFE	; 254
     bea:	a0 81       	ld	r26, Z
     bec:	b1 81       	ldd	r27, Z+1	; 0x01
     bee:	ed 91       	ld	r30, X+
     bf0:	fc 91       	ld	r31, X
     bf2:	11 97       	sbiw	r26, 0x01	; 1
     bf4:	32 97       	sbiw	r30, 0x02	; 2
     bf6:	80 81       	ld	r24, Z
     bf8:	12 96       	adiw	r26, 0x02	; 2
     bfa:	2c 91       	ld	r18, X
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <GPIO_ReadFromRegister+0x26>
     c00:	95 95       	asr	r25
     c02:	87 95       	ror	r24
     c04:	2a 95       	dec	r18
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <GPIO_ReadFromRegister+0x22>

	return state;
}
     c08:	81 70       	andi	r24, 0x01	; 1
     c0a:	08 95       	ret

00000c0c <fillDebaunsingData>:

void fillDebaunsingData(void)
{
     c0c:	cf 92       	push	r12
     c0e:	df 92       	push	r13
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
	unsigned char i;
	static char j = 0;

	if(++j >= 3)
     c1a:	80 91 4e 01 	lds	r24, 0x014E
     c1e:	8f 5f       	subi	r24, 0xFF	; 255
     c20:	80 93 4e 01 	sts	0x014E, r24
     c24:	83 30       	cpi	r24, 0x03	; 3
     c26:	10 f0       	brcs	.+4      	; 0xc2c <fillDebaunsingData+0x20>
		j = 0;
     c28:	10 92 4e 01 	sts	0x014E, r1

	for(i = 0; i < inputsNumber; ++i)
     c2c:	80 91 4d 01 	lds	r24, 0x014D
     c30:	88 23       	and	r24, r24
     c32:	09 f1       	breq	.+66     	; 0xc76 <fillDebaunsingData+0x6a>
		gpios[i]->buffer[j] = GPIO_ReadFromRegister(i);
     c34:	80 91 4e 01 	lds	r24, 0x014E
     c38:	c8 2f       	mov	r28, r24
     c3a:	d0 e0       	ldi	r29, 0x00	; 0
     c3c:	ff 24       	eor	r15, r15
     c3e:	0f 2e       	mov	r0, r31
     c40:	ff e4       	ldi	r31, 0x4F	; 79
     c42:	cf 2e       	mov	r12, r31
     c44:	f1 e0       	ldi	r31, 0x01	; 1
     c46:	df 2e       	mov	r13, r31
     c48:	f0 2d       	mov	r31, r0
     c4a:	8f 2d       	mov	r24, r15
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	f6 01       	movw	r30, r12
     c54:	e8 0f       	add	r30, r24
     c56:	f9 1f       	adc	r31, r25
     c58:	00 81       	ld	r16, Z
     c5a:	11 81       	ldd	r17, Z+1	; 0x01
     c5c:	8f 2d       	mov	r24, r15
     c5e:	bf df       	rcall	.-130    	; 0xbde <GPIO_ReadFromRegister>
     c60:	0c 0f       	add	r16, r28
     c62:	1d 1f       	adc	r17, r29
     c64:	0d 5f       	subi	r16, 0xFD	; 253
     c66:	1f 4f       	sbci	r17, 0xFF	; 255
     c68:	f8 01       	movw	r30, r16
     c6a:	80 83       	st	Z, r24
	static char j = 0;

	if(++j >= 3)
		j = 0;

	for(i = 0; i < inputsNumber; ++i)
     c6c:	f3 94       	inc	r15
     c6e:	80 91 4d 01 	lds	r24, 0x014D
     c72:	f8 16       	cp	r15, r24
     c74:	50 f3       	brcs	.-44     	; 0xc4a <fillDebaunsingData+0x3e>
		gpios[i]->buffer[j] = GPIO_ReadFromRegister(i);
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	08 95       	ret

00000c86 <Timer_Init>:

void Timer_Init(unsigned int freq)
{
    TCCR1A = 0;
     c86:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
     c8a:	29 e0       	ldi	r18, 0x09	; 9
     c8c:	20 93 81 00 	sts	0x0081, r18
	OCR1A = (double)F_CPU / freq + 0.5;
     c90:	a0 e0       	ldi	r26, 0x00	; 0
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	bc 01       	movw	r22, r24
     c96:	cd 01       	movw	r24, r26
     c98:	48 d2       	rcall	.+1168   	; 0x112a <__floatunsisf>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	60 e8       	ldi	r22, 0x80	; 128
     ca0:	76 e9       	ldi	r23, 0x96	; 150
     ca2:	88 e1       	ldi	r24, 0x18	; 24
     ca4:	9b e4       	ldi	r25, 0x4B	; 75
     ca6:	ad d1       	rcall	.+858    	; 0x1002 <__divsf3>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	5f e3       	ldi	r21, 0x3F	; 63
     cb0:	44 d1       	rcall	.+648    	; 0xf3a <__addsf3>
     cb2:	0f d2       	rcall	.+1054   	; 0x10d2 <__fixunssfsi>
     cb4:	70 93 89 00 	sts	0x0089, r23
     cb8:	60 93 88 00 	sts	0x0088, r22
	TIMSK1 = 1 << OCIE1A;
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	80 93 6f 00 	sts	0x006F, r24

	SREG |= 0x80;
     cc2:	ef e5       	ldi	r30, 0x5F	; 95
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	80 68       	ori	r24, 0x80	; 128
     cca:	80 83       	st	Z, r24
}
     ccc:	08 95       	ret

00000cce <getSystemTime>:
	systemTime = 0;
	matchStarted = 1;
}
unsigned long getSystemTime(void)
{
	return systemTime;
     cce:	20 91 77 01 	lds	r18, 0x0177
     cd2:	30 91 78 01 	lds	r19, 0x0178
     cd6:	40 91 79 01 	lds	r20, 0x0179
     cda:	50 91 7a 01 	lds	r21, 0x017A
}
     cde:	62 2f       	mov	r22, r18
     ce0:	73 2f       	mov	r23, r19
     ce2:	84 2f       	mov	r24, r20
     ce4:	95 2f       	mov	r25, r21
     ce6:	08 95       	ret

00000ce8 <jumperCheck>:
	{
		return 1;
	}
	
	return 0;*/
}
     ce8:	08 95       	ret

00000cea <sidesSwitch>:

signed char sidesSwitch(void)
{
	if(GPIO_PinRead(sidesSwitch) == 0)
     cea:	85 e7       	ldi	r24, 0x75	; 117
     cec:	96 e0       	ldi	r25, 0x06	; 6
     cee:	68 df       	rcall	.-304    	; 0xbc0 <GPIO_PinRead>
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	88 23       	and	r24, r24
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <sidesSwitch+0xe>
     cf6:	91 e0       	ldi	r25, 0x01	; 1
	{
		return 1;
	}
	
	return 0;
}
     cf8:	89 2f       	mov	r24, r25
     cfa:	08 95       	ret

00000cfc <matchIsStarted>:
unsigned char matchIsStarted(void)
{
	return matchStarted;
     cfc:	80 91 4c 01 	lds	r24, 0x014C
}
     d00:	08 95       	ret

00000d02 <SystemInit>:
}

void SystemInit(void)
{	
	//_delay_ms(1000);
	servo_init(50);
     d02:	82 e3       	ldi	r24, 0x32	; 50
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	e5 d9       	rcall	.-3126   	; 0xd2 <servo_init>
	
	Timer_Init(1000);
     d08:	88 ee       	ldi	r24, 0xE8	; 232
     d0a:	93 e0       	ldi	r25, 0x03	; 3
     d0c:	bc df       	rcall	.-136    	; 0xc86 <Timer_Init>
	CAN_Init(4);
     d0e:	84 e0       	ldi	r24, 0x04	; 4
     d10:	64 db       	rcall	.-2360   	; 0x3da <CAN_Init>
	
	
	//logger("Initializing digital inputs...\n\r");
	//forwardUpperLeftSensor = GPIO_PinRegister(GPIOA_BASE, 4);//prednji gornji levi senzor za detekciju protivnika		//radi
	
	while(jumperCheck() == 1);
     d12:	ea df       	rcall	.-44     	; 0xce8 <jumperCheck>
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	61 f0       	breq	.+24     	; 0xd30 <SystemInit+0x2e>
	systemTime = 0;
     d18:	10 92 77 01 	sts	0x0177, r1
     d1c:	10 92 78 01 	sts	0x0178, r1
     d20:	10 92 79 01 	sts	0x0179, r1
     d24:	10 92 7a 01 	sts	0x017A, r1
	matchStarted = 1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 4c 01 	sts	0x014C, r24
}
     d2e:	08 95       	ret
     d30:	ff cf       	rjmp	.-2      	; 0xd30 <SystemInit+0x2e>

00000d32 <__vector_12>:
	SREG |= 0x80;
}


ISR(TIMER1_COMPA_vect)
{
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	0b b6       	in	r0, 0x3b	; 59
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	2f 93       	push	r18
     d42:	3f 93       	push	r19
     d44:	4f 93       	push	r20
     d46:	5f 93       	push	r21
     d48:	6f 93       	push	r22
     d4a:	7f 93       	push	r23
     d4c:	8f 93       	push	r24
     d4e:	9f 93       	push	r25
     d50:	af 93       	push	r26
     d52:	bf 93       	push	r27
     d54:	ef 93       	push	r30
     d56:	ff 93       	push	r31
	fillDebaunsingData();
     d58:	59 df       	rcall	.-334    	; 0xc0c <fillDebaunsingData>
    #if USE_TIMER_HOOK == 1
    TimerHook();
     d5a:	d1 dc       	rcall	.-1630   	; 0x6fe <TimerHook>
    #endif // USE_TIMER_HOOK
	systemTime++;
     d5c:	80 91 77 01 	lds	r24, 0x0177
     d60:	90 91 78 01 	lds	r25, 0x0178
     d64:	a0 91 79 01 	lds	r26, 0x0179
     d68:	b0 91 7a 01 	lds	r27, 0x017A
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	a1 1d       	adc	r26, r1
     d70:	b1 1d       	adc	r27, r1
     d72:	80 93 77 01 	sts	0x0177, r24
     d76:	90 93 78 01 	sts	0x0178, r25
     d7a:	a0 93 79 01 	sts	0x0179, r26
     d7e:	b0 93 7a 01 	sts	0x017A, r27
}
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	7f 91       	pop	r23
     d90:	6f 91       	pop	r22
     d92:	5f 91       	pop	r21
     d94:	4f 91       	pop	r20
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0b be       	out	0x3b, r0	; 59
     d9e:	0f 90       	pop	r0
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	0f 90       	pop	r0
     da4:	1f 90       	pop	r1
     da6:	18 95       	reti

00000da8 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
     da8:	1f 92       	push	r1
     daa:	0f 92       	push	r0
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	0f 92       	push	r0
     db0:	0b b6       	in	r0, 0x3b	; 59
     db2:	0f 92       	push	r0
     db4:	11 24       	eor	r1, r1
     db6:	8f 93       	push	r24
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
	if(tx0_counter)
     dbc:	80 91 81 01 	lds	r24, 0x0181
     dc0:	88 23       	and	r24, r24
     dc2:	c9 f0       	breq	.+50     	; 0xdf6 <__vector_23+0x4e>
	{
		tx0_counter--;
     dc4:	80 91 81 01 	lds	r24, 0x0181
     dc8:	81 50       	subi	r24, 0x01	; 1
     dca:	80 93 81 01 	sts	0x0181, r24
		UDR0 = tx0_buffer[tx0_rd_index];
     dce:	80 91 82 01 	lds	r24, 0x0182
     dd2:	e3 e8       	ldi	r30, 0x83	; 131
     dd4:	f1 e0       	ldi	r31, 0x01	; 1
     dd6:	e8 0f       	add	r30, r24
     dd8:	f1 1d       	adc	r31, r1
     dda:	80 81       	ld	r24, Z
     ddc:	80 93 c6 00 	sts	0x00C6, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
     de0:	80 91 82 01 	lds	r24, 0x0182
     de4:	8f 5f       	subi	r24, 0xFF	; 255
     de6:	80 93 82 01 	sts	0x0182, r24
     dea:	80 91 82 01 	lds	r24, 0x0182
     dee:	80 34       	cpi	r24, 0x40	; 64
     df0:	11 f4       	brne	.+4      	; 0xdf6 <__vector_23+0x4e>
			tx0_rd_index = 0;	
     df2:	10 92 82 01 	sts	0x0182, r1
	}	
}
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	8f 91       	pop	r24
     dfc:	0f 90       	pop	r0
     dfe:	0b be       	out	0x3b, r0	; 59
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	0b b6       	in	r0, 0x3b	; 59
     e14:	0f 92       	push	r0
     e16:	11 24       	eor	r1, r1
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	ef 93       	push	r30
     e1e:	ff 93       	push	r31
	unsigned char status;
	status = UCSR0A;
     e20:	80 91 c0 00 	lds	r24, 0x00C0

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))	
     e24:	8c 71       	andi	r24, 0x1C	; 28
     e26:	c9 f4       	brne	.+50     	; 0xe5a <__vector_21+0x50>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
     e28:	80 91 80 01 	lds	r24, 0x0180
     e2c:	90 91 c6 00 	lds	r25, 0x00C6
     e30:	e3 ec       	ldi	r30, 0xC3	; 195
     e32:	f1 e0       	ldi	r31, 0x01	; 1
     e34:	e8 0f       	add	r30, r24
     e36:	f1 1d       	adc	r31, r1
     e38:	90 83       	st	Z, r25
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
     e3a:	80 91 80 01 	lds	r24, 0x0180
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	80 93 80 01 	sts	0x0180, r24
     e44:	80 91 80 01 	lds	r24, 0x0180
     e48:	80 34       	cpi	r24, 0x40	; 64
     e4a:	11 f4       	brne	.+4      	; 0xe50 <__vector_21+0x46>
			rx0_wr_index = 0;
     e4c:	10 92 80 01 	sts	0x0180, r1
			
		rx0_counter++;
     e50:	80 91 7f 01 	lds	r24, 0x017F
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	80 93 7f 01 	sts	0x017F, r24
	}
}
     e5a:	ff 91       	pop	r31
     e5c:	ef 91       	pop	r30
     e5e:	9f 91       	pop	r25
     e60:	8f 91       	pop	r24
     e62:	0f 90       	pop	r0
     e64:	0b be       	out	0x3b, r0	; 59
     e66:	0f 90       	pop	r0
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	0f 90       	pop	r0
     e6c:	1f 90       	pop	r1
     e6e:	18 95       	reti

00000e70 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	0b b6       	in	r0, 0x3b	; 59
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	8f 93       	push	r24
     e80:	ef 93       	push	r30
     e82:	ff 93       	push	r31
	if(tx1_counter)
     e84:	80 91 7c 01 	lds	r24, 0x017C
     e88:	88 23       	and	r24, r24
     e8a:	c9 f0       	breq	.+50     	; 0xebe <__vector_34+0x4e>
	{
		tx1_counter--;
     e8c:	80 91 7c 01 	lds	r24, 0x017C
     e90:	81 50       	subi	r24, 0x01	; 1
     e92:	80 93 7c 01 	sts	0x017C, r24
		UDR1=tx1_buffer[tx1_rd_index];
     e96:	80 91 7e 01 	lds	r24, 0x017E
     e9a:	e3 e0       	ldi	r30, 0x03	; 3
     e9c:	f2 e0       	ldi	r31, 0x02	; 2
     e9e:	e8 0f       	add	r30, r24
     ea0:	f1 1d       	adc	r31, r1
     ea2:	80 81       	ld	r24, Z
     ea4:	80 93 ce 00 	sts	0x00CE, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
     ea8:	80 91 7e 01 	lds	r24, 0x017E
     eac:	8f 5f       	subi	r24, 0xFF	; 255
     eae:	80 93 7e 01 	sts	0x017E, r24
     eb2:	80 91 7e 01 	lds	r24, 0x017E
     eb6:	80 34       	cpi	r24, 0x40	; 64
     eb8:	11 f4       	brne	.+4      	; 0xebe <__vector_34+0x4e>
			tx1_rd_index = 0;	
     eba:	10 92 7e 01 	sts	0x017E, r1
	}	
}
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	8f 91       	pop	r24
     ec4:	0f 90       	pop	r0
     ec6:	0b be       	out	0x3b, r0	; 59
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_32>:

ISR(USART1_RX_vect)
{
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	0b b6       	in	r0, 0x3b	; 59
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	8f 93       	push	r24
     ee2:	9f 93       	push	r25
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
	unsigned char status;
	status = UCSR1A;
     ee8:	80 91 c8 00 	lds	r24, 0x00C8

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
     eec:	8c 71       	andi	r24, 0x1C	; 28
     eee:	c9 f4       	brne	.+50     	; 0xf22 <__vector_32+0x50>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
     ef0:	80 91 7d 01 	lds	r24, 0x017D
     ef4:	90 91 ce 00 	lds	r25, 0x00CE
     ef8:	e3 e4       	ldi	r30, 0x43	; 67
     efa:	f2 e0       	ldi	r31, 0x02	; 2
     efc:	e8 0f       	add	r30, r24
     efe:	f1 1d       	adc	r31, r1
     f00:	90 83       	st	Z, r25
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
     f02:	80 91 7d 01 	lds	r24, 0x017D
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	80 93 7d 01 	sts	0x017D, r24
     f0c:	80 91 7d 01 	lds	r24, 0x017D
     f10:	80 34       	cpi	r24, 0x40	; 64
     f12:	11 f4       	brne	.+4      	; 0xf18 <__vector_32+0x46>
		rx1_wr_index = 0;
     f14:	10 92 7d 01 	sts	0x017D, r1
		
		rx1_counter++;
     f18:	80 91 7b 01 	lds	r24, 0x017B
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	80 93 7b 01 	sts	0x017B, r24
	}
}
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	0f 90       	pop	r0
     f2c:	0b be       	out	0x3b, r0	; 59
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	0f 90       	pop	r0
     f34:	1f 90       	pop	r1
     f36:	18 95       	reti

00000f38 <__subsf3>:
     f38:	50 58       	subi	r21, 0x80	; 128

00000f3a <__addsf3>:
     f3a:	bb 27       	eor	r27, r27
     f3c:	aa 27       	eor	r26, r26
     f3e:	0e d0       	rcall	.+28     	; 0xf5c <__addsf3x>
     f40:	48 c1       	rjmp	.+656    	; 0x11d2 <__fp_round>
     f42:	39 d1       	rcall	.+626    	; 0x11b6 <__fp_pscA>
     f44:	30 f0       	brcs	.+12     	; 0xf52 <__addsf3+0x18>
     f46:	3e d1       	rcall	.+636    	; 0x11c4 <__fp_pscB>
     f48:	20 f0       	brcs	.+8      	; 0xf52 <__addsf3+0x18>
     f4a:	31 f4       	brne	.+12     	; 0xf58 <__addsf3+0x1e>
     f4c:	9f 3f       	cpi	r25, 0xFF	; 255
     f4e:	11 f4       	brne	.+4      	; 0xf54 <__addsf3+0x1a>
     f50:	1e f4       	brtc	.+6      	; 0xf58 <__addsf3+0x1e>
     f52:	2e c1       	rjmp	.+604    	; 0x11b0 <__fp_nan>
     f54:	0e f4       	brtc	.+2      	; 0xf58 <__addsf3+0x1e>
     f56:	e0 95       	com	r30
     f58:	e7 fb       	bst	r30, 7
     f5a:	24 c1       	rjmp	.+584    	; 0x11a4 <__fp_inf>

00000f5c <__addsf3x>:
     f5c:	e9 2f       	mov	r30, r25
     f5e:	4a d1       	rcall	.+660    	; 0x11f4 <__fp_split3>
     f60:	80 f3       	brcs	.-32     	; 0xf42 <__addsf3+0x8>
     f62:	ba 17       	cp	r27, r26
     f64:	62 07       	cpc	r22, r18
     f66:	73 07       	cpc	r23, r19
     f68:	84 07       	cpc	r24, r20
     f6a:	95 07       	cpc	r25, r21
     f6c:	18 f0       	brcs	.+6      	; 0xf74 <__addsf3x+0x18>
     f6e:	71 f4       	brne	.+28     	; 0xf8c <__addsf3x+0x30>
     f70:	9e f5       	brtc	.+102    	; 0xfd8 <__addsf3x+0x7c>
     f72:	62 c1       	rjmp	.+708    	; 0x1238 <__fp_zero>
     f74:	0e f4       	brtc	.+2      	; 0xf78 <__addsf3x+0x1c>
     f76:	e0 95       	com	r30
     f78:	0b 2e       	mov	r0, r27
     f7a:	ba 2f       	mov	r27, r26
     f7c:	a0 2d       	mov	r26, r0
     f7e:	0b 01       	movw	r0, r22
     f80:	b9 01       	movw	r22, r18
     f82:	90 01       	movw	r18, r0
     f84:	0c 01       	movw	r0, r24
     f86:	ca 01       	movw	r24, r20
     f88:	a0 01       	movw	r20, r0
     f8a:	11 24       	eor	r1, r1
     f8c:	ff 27       	eor	r31, r31
     f8e:	59 1b       	sub	r21, r25
     f90:	99 f0       	breq	.+38     	; 0xfb8 <__addsf3x+0x5c>
     f92:	59 3f       	cpi	r21, 0xF9	; 249
     f94:	50 f4       	brcc	.+20     	; 0xfaa <__addsf3x+0x4e>
     f96:	50 3e       	cpi	r21, 0xE0	; 224
     f98:	68 f1       	brcs	.+90     	; 0xff4 <__addsf3x+0x98>
     f9a:	1a 16       	cp	r1, r26
     f9c:	f0 40       	sbci	r31, 0x00	; 0
     f9e:	a2 2f       	mov	r26, r18
     fa0:	23 2f       	mov	r18, r19
     fa2:	34 2f       	mov	r19, r20
     fa4:	44 27       	eor	r20, r20
     fa6:	58 5f       	subi	r21, 0xF8	; 248
     fa8:	f3 cf       	rjmp	.-26     	; 0xf90 <__addsf3x+0x34>
     faa:	46 95       	lsr	r20
     fac:	37 95       	ror	r19
     fae:	27 95       	ror	r18
     fb0:	a7 95       	ror	r26
     fb2:	f0 40       	sbci	r31, 0x00	; 0
     fb4:	53 95       	inc	r21
     fb6:	c9 f7       	brne	.-14     	; 0xfaa <__addsf3x+0x4e>
     fb8:	7e f4       	brtc	.+30     	; 0xfd8 <__addsf3x+0x7c>
     fba:	1f 16       	cp	r1, r31
     fbc:	ba 0b       	sbc	r27, r26
     fbe:	62 0b       	sbc	r22, r18
     fc0:	73 0b       	sbc	r23, r19
     fc2:	84 0b       	sbc	r24, r20
     fc4:	ba f0       	brmi	.+46     	; 0xff4 <__addsf3x+0x98>
     fc6:	91 50       	subi	r25, 0x01	; 1
     fc8:	a1 f0       	breq	.+40     	; 0xff2 <__addsf3x+0x96>
     fca:	ff 0f       	add	r31, r31
     fcc:	bb 1f       	adc	r27, r27
     fce:	66 1f       	adc	r22, r22
     fd0:	77 1f       	adc	r23, r23
     fd2:	88 1f       	adc	r24, r24
     fd4:	c2 f7       	brpl	.-16     	; 0xfc6 <__addsf3x+0x6a>
     fd6:	0e c0       	rjmp	.+28     	; 0xff4 <__addsf3x+0x98>
     fd8:	ba 0f       	add	r27, r26
     fda:	62 1f       	adc	r22, r18
     fdc:	73 1f       	adc	r23, r19
     fde:	84 1f       	adc	r24, r20
     fe0:	48 f4       	brcc	.+18     	; 0xff4 <__addsf3x+0x98>
     fe2:	87 95       	ror	r24
     fe4:	77 95       	ror	r23
     fe6:	67 95       	ror	r22
     fe8:	b7 95       	ror	r27
     fea:	f7 95       	ror	r31
     fec:	9e 3f       	cpi	r25, 0xFE	; 254
     fee:	08 f0       	brcs	.+2      	; 0xff2 <__addsf3x+0x96>
     ff0:	b3 cf       	rjmp	.-154    	; 0xf58 <__addsf3+0x1e>
     ff2:	93 95       	inc	r25
     ff4:	88 0f       	add	r24, r24
     ff6:	08 f0       	brcs	.+2      	; 0xffa <__addsf3x+0x9e>
     ff8:	99 27       	eor	r25, r25
     ffa:	ee 0f       	add	r30, r30
     ffc:	97 95       	ror	r25
     ffe:	87 95       	ror	r24
    1000:	08 95       	ret

00001002 <__divsf3>:
    1002:	0c d0       	rcall	.+24     	; 0x101c <__divsf3x>
    1004:	e6 c0       	rjmp	.+460    	; 0x11d2 <__fp_round>
    1006:	de d0       	rcall	.+444    	; 0x11c4 <__fp_pscB>
    1008:	40 f0       	brcs	.+16     	; 0x101a <__divsf3+0x18>
    100a:	d5 d0       	rcall	.+426    	; 0x11b6 <__fp_pscA>
    100c:	30 f0       	brcs	.+12     	; 0x101a <__divsf3+0x18>
    100e:	21 f4       	brne	.+8      	; 0x1018 <__divsf3+0x16>
    1010:	5f 3f       	cpi	r21, 0xFF	; 255
    1012:	19 f0       	breq	.+6      	; 0x101a <__divsf3+0x18>
    1014:	c7 c0       	rjmp	.+398    	; 0x11a4 <__fp_inf>
    1016:	51 11       	cpse	r21, r1
    1018:	10 c1       	rjmp	.+544    	; 0x123a <__fp_szero>
    101a:	ca c0       	rjmp	.+404    	; 0x11b0 <__fp_nan>

0000101c <__divsf3x>:
    101c:	eb d0       	rcall	.+470    	; 0x11f4 <__fp_split3>
    101e:	98 f3       	brcs	.-26     	; 0x1006 <__divsf3+0x4>

00001020 <__divsf3_pse>:
    1020:	99 23       	and	r25, r25
    1022:	c9 f3       	breq	.-14     	; 0x1016 <__divsf3+0x14>
    1024:	55 23       	and	r21, r21
    1026:	b1 f3       	breq	.-20     	; 0x1014 <__divsf3+0x12>
    1028:	95 1b       	sub	r25, r21
    102a:	55 0b       	sbc	r21, r21
    102c:	bb 27       	eor	r27, r27
    102e:	aa 27       	eor	r26, r26
    1030:	62 17       	cp	r22, r18
    1032:	73 07       	cpc	r23, r19
    1034:	84 07       	cpc	r24, r20
    1036:	38 f0       	brcs	.+14     	; 0x1046 <__divsf3_pse+0x26>
    1038:	9f 5f       	subi	r25, 0xFF	; 255
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	22 0f       	add	r18, r18
    103e:	33 1f       	adc	r19, r19
    1040:	44 1f       	adc	r20, r20
    1042:	aa 1f       	adc	r26, r26
    1044:	a9 f3       	breq	.-22     	; 0x1030 <__divsf3_pse+0x10>
    1046:	33 d0       	rcall	.+102    	; 0x10ae <__divsf3_pse+0x8e>
    1048:	0e 2e       	mov	r0, r30
    104a:	3a f0       	brmi	.+14     	; 0x105a <__divsf3_pse+0x3a>
    104c:	e0 e8       	ldi	r30, 0x80	; 128
    104e:	30 d0       	rcall	.+96     	; 0x10b0 <__divsf3_pse+0x90>
    1050:	91 50       	subi	r25, 0x01	; 1
    1052:	50 40       	sbci	r21, 0x00	; 0
    1054:	e6 95       	lsr	r30
    1056:	00 1c       	adc	r0, r0
    1058:	ca f7       	brpl	.-14     	; 0x104c <__divsf3_pse+0x2c>
    105a:	29 d0       	rcall	.+82     	; 0x10ae <__divsf3_pse+0x8e>
    105c:	fe 2f       	mov	r31, r30
    105e:	27 d0       	rcall	.+78     	; 0x10ae <__divsf3_pse+0x8e>
    1060:	66 0f       	add	r22, r22
    1062:	77 1f       	adc	r23, r23
    1064:	88 1f       	adc	r24, r24
    1066:	bb 1f       	adc	r27, r27
    1068:	26 17       	cp	r18, r22
    106a:	37 07       	cpc	r19, r23
    106c:	48 07       	cpc	r20, r24
    106e:	ab 07       	cpc	r26, r27
    1070:	b0 e8       	ldi	r27, 0x80	; 128
    1072:	09 f0       	breq	.+2      	; 0x1076 <__divsf3_pse+0x56>
    1074:	bb 0b       	sbc	r27, r27
    1076:	80 2d       	mov	r24, r0
    1078:	bf 01       	movw	r22, r30
    107a:	ff 27       	eor	r31, r31
    107c:	93 58       	subi	r25, 0x83	; 131
    107e:	5f 4f       	sbci	r21, 0xFF	; 255
    1080:	2a f0       	brmi	.+10     	; 0x108c <__divsf3_pse+0x6c>
    1082:	9e 3f       	cpi	r25, 0xFE	; 254
    1084:	51 05       	cpc	r21, r1
    1086:	68 f0       	brcs	.+26     	; 0x10a2 <__divsf3_pse+0x82>
    1088:	8d c0       	rjmp	.+282    	; 0x11a4 <__fp_inf>
    108a:	d7 c0       	rjmp	.+430    	; 0x123a <__fp_szero>
    108c:	5f 3f       	cpi	r21, 0xFF	; 255
    108e:	ec f3       	brlt	.-6      	; 0x108a <__divsf3_pse+0x6a>
    1090:	98 3e       	cpi	r25, 0xE8	; 232
    1092:	dc f3       	brlt	.-10     	; 0x108a <__divsf3_pse+0x6a>
    1094:	86 95       	lsr	r24
    1096:	77 95       	ror	r23
    1098:	67 95       	ror	r22
    109a:	b7 95       	ror	r27
    109c:	f7 95       	ror	r31
    109e:	9f 5f       	subi	r25, 0xFF	; 255
    10a0:	c9 f7       	brne	.-14     	; 0x1094 <__divsf3_pse+0x74>
    10a2:	88 0f       	add	r24, r24
    10a4:	91 1d       	adc	r25, r1
    10a6:	96 95       	lsr	r25
    10a8:	87 95       	ror	r24
    10aa:	97 f9       	bld	r25, 7
    10ac:	08 95       	ret
    10ae:	e1 e0       	ldi	r30, 0x01	; 1
    10b0:	66 0f       	add	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	bb 1f       	adc	r27, r27
    10b8:	62 17       	cp	r22, r18
    10ba:	73 07       	cpc	r23, r19
    10bc:	84 07       	cpc	r24, r20
    10be:	ba 07       	cpc	r27, r26
    10c0:	20 f0       	brcs	.+8      	; 0x10ca <__divsf3_pse+0xaa>
    10c2:	62 1b       	sub	r22, r18
    10c4:	73 0b       	sbc	r23, r19
    10c6:	84 0b       	sbc	r24, r20
    10c8:	ba 0b       	sbc	r27, r26
    10ca:	ee 1f       	adc	r30, r30
    10cc:	88 f7       	brcc	.-30     	; 0x10b0 <__divsf3_pse+0x90>
    10ce:	e0 95       	com	r30
    10d0:	08 95       	ret

000010d2 <__fixunssfsi>:
    10d2:	98 d0       	rcall	.+304    	; 0x1204 <__fp_splitA>
    10d4:	88 f0       	brcs	.+34     	; 0x10f8 <__fixunssfsi+0x26>
    10d6:	9f 57       	subi	r25, 0x7F	; 127
    10d8:	90 f0       	brcs	.+36     	; 0x10fe <__fixunssfsi+0x2c>
    10da:	b9 2f       	mov	r27, r25
    10dc:	99 27       	eor	r25, r25
    10de:	b7 51       	subi	r27, 0x17	; 23
    10e0:	a0 f0       	brcs	.+40     	; 0x110a <__stack+0xb>
    10e2:	d1 f0       	breq	.+52     	; 0x1118 <__stack+0x19>
    10e4:	66 0f       	add	r22, r22
    10e6:	77 1f       	adc	r23, r23
    10e8:	88 1f       	adc	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	1a f0       	brmi	.+6      	; 0x10f4 <__fixunssfsi+0x22>
    10ee:	ba 95       	dec	r27
    10f0:	c9 f7       	brne	.-14     	; 0x10e4 <__fixunssfsi+0x12>
    10f2:	12 c0       	rjmp	.+36     	; 0x1118 <__stack+0x19>
    10f4:	b1 30       	cpi	r27, 0x01	; 1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <__stack+0x19>
    10f8:	9f d0       	rcall	.+318    	; 0x1238 <__fp_zero>
    10fa:	b1 e0       	ldi	r27, 0x01	; 1
    10fc:	08 95       	ret
    10fe:	9c c0       	rjmp	.+312    	; 0x1238 <__fp_zero>
    1100:	67 2f       	mov	r22, r23
    1102:	78 2f       	mov	r23, r24
    1104:	88 27       	eor	r24, r24
    1106:	b8 5f       	subi	r27, 0xF8	; 248
    1108:	39 f0       	breq	.+14     	; 0x1118 <__stack+0x19>
    110a:	b9 3f       	cpi	r27, 0xF9	; 249
    110c:	cc f3       	brlt	.-14     	; 0x1100 <__stack+0x1>
    110e:	86 95       	lsr	r24
    1110:	77 95       	ror	r23
    1112:	67 95       	ror	r22
    1114:	b3 95       	inc	r27
    1116:	d9 f7       	brne	.-10     	; 0x110e <__stack+0xf>
    1118:	3e f4       	brtc	.+14     	; 0x1128 <__stack+0x29>
    111a:	90 95       	com	r25
    111c:	80 95       	com	r24
    111e:	70 95       	com	r23
    1120:	61 95       	neg	r22
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	8f 4f       	sbci	r24, 0xFF	; 255
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	08 95       	ret

0000112a <__floatunsisf>:
    112a:	e8 94       	clt
    112c:	09 c0       	rjmp	.+18     	; 0x1140 <__floatsisf+0x12>

0000112e <__floatsisf>:
    112e:	97 fb       	bst	r25, 7
    1130:	3e f4       	brtc	.+14     	; 0x1140 <__floatsisf+0x12>
    1132:	90 95       	com	r25
    1134:	80 95       	com	r24
    1136:	70 95       	com	r23
    1138:	61 95       	neg	r22
    113a:	7f 4f       	sbci	r23, 0xFF	; 255
    113c:	8f 4f       	sbci	r24, 0xFF	; 255
    113e:	9f 4f       	sbci	r25, 0xFF	; 255
    1140:	99 23       	and	r25, r25
    1142:	a9 f0       	breq	.+42     	; 0x116e <__floatsisf+0x40>
    1144:	f9 2f       	mov	r31, r25
    1146:	96 e9       	ldi	r25, 0x96	; 150
    1148:	bb 27       	eor	r27, r27
    114a:	93 95       	inc	r25
    114c:	f6 95       	lsr	r31
    114e:	87 95       	ror	r24
    1150:	77 95       	ror	r23
    1152:	67 95       	ror	r22
    1154:	b7 95       	ror	r27
    1156:	f1 11       	cpse	r31, r1
    1158:	f8 cf       	rjmp	.-16     	; 0x114a <__floatsisf+0x1c>
    115a:	fa f4       	brpl	.+62     	; 0x119a <__floatsisf+0x6c>
    115c:	bb 0f       	add	r27, r27
    115e:	11 f4       	brne	.+4      	; 0x1164 <__floatsisf+0x36>
    1160:	60 ff       	sbrs	r22, 0
    1162:	1b c0       	rjmp	.+54     	; 0x119a <__floatsisf+0x6c>
    1164:	6f 5f       	subi	r22, 0xFF	; 255
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	8f 4f       	sbci	r24, 0xFF	; 255
    116a:	9f 4f       	sbci	r25, 0xFF	; 255
    116c:	16 c0       	rjmp	.+44     	; 0x119a <__floatsisf+0x6c>
    116e:	88 23       	and	r24, r24
    1170:	11 f0       	breq	.+4      	; 0x1176 <__floatsisf+0x48>
    1172:	96 e9       	ldi	r25, 0x96	; 150
    1174:	11 c0       	rjmp	.+34     	; 0x1198 <__floatsisf+0x6a>
    1176:	77 23       	and	r23, r23
    1178:	21 f0       	breq	.+8      	; 0x1182 <__floatsisf+0x54>
    117a:	9e e8       	ldi	r25, 0x8E	; 142
    117c:	87 2f       	mov	r24, r23
    117e:	76 2f       	mov	r23, r22
    1180:	05 c0       	rjmp	.+10     	; 0x118c <__floatsisf+0x5e>
    1182:	66 23       	and	r22, r22
    1184:	71 f0       	breq	.+28     	; 0x11a2 <__floatsisf+0x74>
    1186:	96 e8       	ldi	r25, 0x86	; 134
    1188:	86 2f       	mov	r24, r22
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	2a f0       	brmi	.+10     	; 0x119a <__floatsisf+0x6c>
    1190:	9a 95       	dec	r25
    1192:	66 0f       	add	r22, r22
    1194:	77 1f       	adc	r23, r23
    1196:	88 1f       	adc	r24, r24
    1198:	da f7       	brpl	.-10     	; 0x1190 <__floatsisf+0x62>
    119a:	88 0f       	add	r24, r24
    119c:	96 95       	lsr	r25
    119e:	87 95       	ror	r24
    11a0:	97 f9       	bld	r25, 7
    11a2:	08 95       	ret

000011a4 <__fp_inf>:
    11a4:	97 f9       	bld	r25, 7
    11a6:	9f 67       	ori	r25, 0x7F	; 127
    11a8:	80 e8       	ldi	r24, 0x80	; 128
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	08 95       	ret

000011b0 <__fp_nan>:
    11b0:	9f ef       	ldi	r25, 0xFF	; 255
    11b2:	80 ec       	ldi	r24, 0xC0	; 192
    11b4:	08 95       	ret

000011b6 <__fp_pscA>:
    11b6:	00 24       	eor	r0, r0
    11b8:	0a 94       	dec	r0
    11ba:	16 16       	cp	r1, r22
    11bc:	17 06       	cpc	r1, r23
    11be:	18 06       	cpc	r1, r24
    11c0:	09 06       	cpc	r0, r25
    11c2:	08 95       	ret

000011c4 <__fp_pscB>:
    11c4:	00 24       	eor	r0, r0
    11c6:	0a 94       	dec	r0
    11c8:	12 16       	cp	r1, r18
    11ca:	13 06       	cpc	r1, r19
    11cc:	14 06       	cpc	r1, r20
    11ce:	05 06       	cpc	r0, r21
    11d0:	08 95       	ret

000011d2 <__fp_round>:
    11d2:	09 2e       	mov	r0, r25
    11d4:	03 94       	inc	r0
    11d6:	00 0c       	add	r0, r0
    11d8:	11 f4       	brne	.+4      	; 0x11de <__fp_round+0xc>
    11da:	88 23       	and	r24, r24
    11dc:	52 f0       	brmi	.+20     	; 0x11f2 <__fp_round+0x20>
    11de:	bb 0f       	add	r27, r27
    11e0:	40 f4       	brcc	.+16     	; 0x11f2 <__fp_round+0x20>
    11e2:	bf 2b       	or	r27, r31
    11e4:	11 f4       	brne	.+4      	; 0x11ea <__fp_round+0x18>
    11e6:	60 ff       	sbrs	r22, 0
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <__fp_round+0x20>
    11ea:	6f 5f       	subi	r22, 0xFF	; 255
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	8f 4f       	sbci	r24, 0xFF	; 255
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	08 95       	ret

000011f4 <__fp_split3>:
    11f4:	57 fd       	sbrc	r21, 7
    11f6:	90 58       	subi	r25, 0x80	; 128
    11f8:	44 0f       	add	r20, r20
    11fa:	55 1f       	adc	r21, r21
    11fc:	59 f0       	breq	.+22     	; 0x1214 <__fp_splitA+0x10>
    11fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1200:	71 f0       	breq	.+28     	; 0x121e <__fp_splitA+0x1a>
    1202:	47 95       	ror	r20

00001204 <__fp_splitA>:
    1204:	88 0f       	add	r24, r24
    1206:	97 fb       	bst	r25, 7
    1208:	99 1f       	adc	r25, r25
    120a:	61 f0       	breq	.+24     	; 0x1224 <__fp_splitA+0x20>
    120c:	9f 3f       	cpi	r25, 0xFF	; 255
    120e:	79 f0       	breq	.+30     	; 0x122e <__fp_splitA+0x2a>
    1210:	87 95       	ror	r24
    1212:	08 95       	ret
    1214:	12 16       	cp	r1, r18
    1216:	13 06       	cpc	r1, r19
    1218:	14 06       	cpc	r1, r20
    121a:	55 1f       	adc	r21, r21
    121c:	f2 cf       	rjmp	.-28     	; 0x1202 <__fp_split3+0xe>
    121e:	46 95       	lsr	r20
    1220:	f1 df       	rcall	.-30     	; 0x1204 <__fp_splitA>
    1222:	08 c0       	rjmp	.+16     	; 0x1234 <__fp_splitA+0x30>
    1224:	16 16       	cp	r1, r22
    1226:	17 06       	cpc	r1, r23
    1228:	18 06       	cpc	r1, r24
    122a:	99 1f       	adc	r25, r25
    122c:	f1 cf       	rjmp	.-30     	; 0x1210 <__fp_splitA+0xc>
    122e:	86 95       	lsr	r24
    1230:	71 05       	cpc	r23, r1
    1232:	61 05       	cpc	r22, r1
    1234:	08 94       	sec
    1236:	08 95       	ret

00001238 <__fp_zero>:
    1238:	e8 94       	clt

0000123a <__fp_szero>:
    123a:	bb 27       	eor	r27, r27
    123c:	66 27       	eor	r22, r22
    123e:	77 27       	eor	r23, r23
    1240:	cb 01       	movw	r24, r22
    1242:	97 f9       	bld	r25, 7
    1244:	08 95       	ret

00001246 <__gesf2>:
    1246:	03 d0       	rcall	.+6      	; 0x124e <__fp_cmp>
    1248:	08 f4       	brcc	.+2      	; 0x124c <__gesf2+0x6>
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	08 95       	ret

0000124e <__fp_cmp>:
    124e:	99 0f       	add	r25, r25
    1250:	00 08       	sbc	r0, r0
    1252:	55 0f       	add	r21, r21
    1254:	aa 0b       	sbc	r26, r26
    1256:	e0 e8       	ldi	r30, 0x80	; 128
    1258:	fe ef       	ldi	r31, 0xFE	; 254
    125a:	16 16       	cp	r1, r22
    125c:	17 06       	cpc	r1, r23
    125e:	e8 07       	cpc	r30, r24
    1260:	f9 07       	cpc	r31, r25
    1262:	c0 f0       	brcs	.+48     	; 0x1294 <__fp_cmp+0x46>
    1264:	12 16       	cp	r1, r18
    1266:	13 06       	cpc	r1, r19
    1268:	e4 07       	cpc	r30, r20
    126a:	f5 07       	cpc	r31, r21
    126c:	98 f0       	brcs	.+38     	; 0x1294 <__fp_cmp+0x46>
    126e:	62 1b       	sub	r22, r18
    1270:	73 0b       	sbc	r23, r19
    1272:	84 0b       	sbc	r24, r20
    1274:	95 0b       	sbc	r25, r21
    1276:	39 f4       	brne	.+14     	; 0x1286 <__fp_cmp+0x38>
    1278:	0a 26       	eor	r0, r26
    127a:	61 f0       	breq	.+24     	; 0x1294 <__fp_cmp+0x46>
    127c:	23 2b       	or	r18, r19
    127e:	24 2b       	or	r18, r20
    1280:	25 2b       	or	r18, r21
    1282:	21 f4       	brne	.+8      	; 0x128c <__fp_cmp+0x3e>
    1284:	08 95       	ret
    1286:	0a 26       	eor	r0, r26
    1288:	09 f4       	brne	.+2      	; 0x128c <__fp_cmp+0x3e>
    128a:	a1 40       	sbci	r26, 0x01	; 1
    128c:	a6 95       	lsr	r26
    128e:	8f ef       	ldi	r24, 0xFF	; 255
    1290:	81 1d       	adc	r24, r1
    1292:	81 1d       	adc	r24, r1
    1294:	08 95       	ret

00001296 <calloc>:
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	68 9f       	mul	r22, r24
    12a0:	80 01       	movw	r16, r0
    12a2:	69 9f       	mul	r22, r25
    12a4:	10 0d       	add	r17, r0
    12a6:	78 9f       	mul	r23, r24
    12a8:	10 0d       	add	r17, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	c8 01       	movw	r24, r16
    12ae:	0d d0       	rcall	.+26     	; 0x12ca <malloc>
    12b0:	ec 01       	movw	r28, r24
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	21 f0       	breq	.+8      	; 0x12be <calloc+0x28>
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	a8 01       	movw	r20, r16
    12bc:	0b d1       	rcall	.+534    	; 0x14d4 <memset>
    12be:	ce 01       	movw	r24, r28
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	08 95       	ret

000012ca <malloc>:
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	bc 01       	movw	r22, r24
    12d0:	82 30       	cpi	r24, 0x02	; 2
    12d2:	91 05       	cpc	r25, r1
    12d4:	10 f4       	brcc	.+4      	; 0x12da <malloc+0x10>
    12d6:	62 e0       	ldi	r22, 0x02	; 2
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	a0 91 85 02 	lds	r26, 0x0285
    12de:	b0 91 86 02 	lds	r27, 0x0286
    12e2:	ed 01       	movw	r28, r26
    12e4:	e0 e0       	ldi	r30, 0x00	; 0
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	21 c0       	rjmp	.+66     	; 0x1330 <malloc+0x66>
    12ee:	88 81       	ld	r24, Y
    12f0:	99 81       	ldd	r25, Y+1	; 0x01
    12f2:	86 17       	cp	r24, r22
    12f4:	97 07       	cpc	r25, r23
    12f6:	69 f4       	brne	.+26     	; 0x1312 <malloc+0x48>
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	9b 81       	ldd	r25, Y+3	; 0x03
    12fc:	30 97       	sbiw	r30, 0x00	; 0
    12fe:	19 f0       	breq	.+6      	; 0x1306 <malloc+0x3c>
    1300:	93 83       	std	Z+3, r25	; 0x03
    1302:	82 83       	std	Z+2, r24	; 0x02
    1304:	04 c0       	rjmp	.+8      	; 0x130e <malloc+0x44>
    1306:	90 93 86 02 	sts	0x0286, r25
    130a:	80 93 85 02 	sts	0x0285, r24
    130e:	fe 01       	movw	r30, r28
    1310:	34 c0       	rjmp	.+104    	; 0x137a <malloc+0xb0>
    1312:	68 17       	cp	r22, r24
    1314:	79 07       	cpc	r23, r25
    1316:	38 f4       	brcc	.+14     	; 0x1326 <malloc+0x5c>
    1318:	41 15       	cp	r20, r1
    131a:	51 05       	cpc	r21, r1
    131c:	19 f0       	breq	.+6      	; 0x1324 <malloc+0x5a>
    131e:	84 17       	cp	r24, r20
    1320:	95 07       	cpc	r25, r21
    1322:	08 f4       	brcc	.+2      	; 0x1326 <malloc+0x5c>
    1324:	ac 01       	movw	r20, r24
    1326:	fe 01       	movw	r30, r28
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	9b 81       	ldd	r25, Y+3	; 0x03
    132c:	9c 01       	movw	r18, r24
    132e:	e9 01       	movw	r28, r18
    1330:	20 97       	sbiw	r28, 0x00	; 0
    1332:	e9 f6       	brne	.-70     	; 0x12ee <malloc+0x24>
    1334:	41 15       	cp	r20, r1
    1336:	51 05       	cpc	r21, r1
    1338:	a9 f1       	breq	.+106    	; 0x13a4 <malloc+0xda>
    133a:	ca 01       	movw	r24, r20
    133c:	86 1b       	sub	r24, r22
    133e:	97 0b       	sbc	r25, r23
    1340:	04 97       	sbiw	r24, 0x04	; 4
    1342:	08 f4       	brcc	.+2      	; 0x1346 <malloc+0x7c>
    1344:	ba 01       	movw	r22, r20
    1346:	e0 e0       	ldi	r30, 0x00	; 0
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	2a c0       	rjmp	.+84     	; 0x13a0 <malloc+0xd6>
    134c:	8d 91       	ld	r24, X+
    134e:	9c 91       	ld	r25, X
    1350:	11 97       	sbiw	r26, 0x01	; 1
    1352:	84 17       	cp	r24, r20
    1354:	95 07       	cpc	r25, r21
    1356:	f9 f4       	brne	.+62     	; 0x1396 <malloc+0xcc>
    1358:	64 17       	cp	r22, r20
    135a:	75 07       	cpc	r23, r21
    135c:	81 f4       	brne	.+32     	; 0x137e <malloc+0xb4>
    135e:	12 96       	adiw	r26, 0x02	; 2
    1360:	8d 91       	ld	r24, X+
    1362:	9c 91       	ld	r25, X
    1364:	13 97       	sbiw	r26, 0x03	; 3
    1366:	30 97       	sbiw	r30, 0x00	; 0
    1368:	19 f0       	breq	.+6      	; 0x1370 <malloc+0xa6>
    136a:	93 83       	std	Z+3, r25	; 0x03
    136c:	82 83       	std	Z+2, r24	; 0x02
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <malloc+0xae>
    1370:	90 93 86 02 	sts	0x0286, r25
    1374:	80 93 85 02 	sts	0x0285, r24
    1378:	fd 01       	movw	r30, r26
    137a:	32 96       	adiw	r30, 0x02	; 2
    137c:	4f c0       	rjmp	.+158    	; 0x141c <malloc+0x152>
    137e:	ca 01       	movw	r24, r20
    1380:	86 1b       	sub	r24, r22
    1382:	97 0b       	sbc	r25, r23
    1384:	fd 01       	movw	r30, r26
    1386:	e8 0f       	add	r30, r24
    1388:	f9 1f       	adc	r31, r25
    138a:	61 93       	st	Z+, r22
    138c:	71 93       	st	Z+, r23
    138e:	02 97       	sbiw	r24, 0x02	; 2
    1390:	8d 93       	st	X+, r24
    1392:	9c 93       	st	X, r25
    1394:	43 c0       	rjmp	.+134    	; 0x141c <malloc+0x152>
    1396:	fd 01       	movw	r30, r26
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	93 81       	ldd	r25, Z+3	; 0x03
    139c:	9c 01       	movw	r18, r24
    139e:	d9 01       	movw	r26, r18
    13a0:	10 97       	sbiw	r26, 0x00	; 0
    13a2:	a1 f6       	brne	.-88     	; 0x134c <malloc+0x82>
    13a4:	80 91 83 02 	lds	r24, 0x0283
    13a8:	90 91 84 02 	lds	r25, 0x0284
    13ac:	89 2b       	or	r24, r25
    13ae:	41 f4       	brne	.+16     	; 0x13c0 <malloc+0xf6>
    13b0:	80 91 02 01 	lds	r24, 0x0102
    13b4:	90 91 03 01 	lds	r25, 0x0103
    13b8:	90 93 84 02 	sts	0x0284, r25
    13bc:	80 93 83 02 	sts	0x0283, r24
    13c0:	40 91 04 01 	lds	r20, 0x0104
    13c4:	50 91 05 01 	lds	r21, 0x0105
    13c8:	41 15       	cp	r20, r1
    13ca:	51 05       	cpc	r21, r1
    13cc:	41 f4       	brne	.+16     	; 0x13de <malloc+0x114>
    13ce:	4d b7       	in	r20, 0x3d	; 61
    13d0:	5e b7       	in	r21, 0x3e	; 62
    13d2:	80 91 00 01 	lds	r24, 0x0100
    13d6:	90 91 01 01 	lds	r25, 0x0101
    13da:	48 1b       	sub	r20, r24
    13dc:	59 0b       	sbc	r21, r25
    13de:	20 91 83 02 	lds	r18, 0x0283
    13e2:	30 91 84 02 	lds	r19, 0x0284
    13e6:	24 17       	cp	r18, r20
    13e8:	35 07       	cpc	r19, r21
    13ea:	b0 f4       	brcc	.+44     	; 0x1418 <malloc+0x14e>
    13ec:	ca 01       	movw	r24, r20
    13ee:	82 1b       	sub	r24, r18
    13f0:	93 0b       	sbc	r25, r19
    13f2:	86 17       	cp	r24, r22
    13f4:	97 07       	cpc	r25, r23
    13f6:	80 f0       	brcs	.+32     	; 0x1418 <malloc+0x14e>
    13f8:	ab 01       	movw	r20, r22
    13fa:	4e 5f       	subi	r20, 0xFE	; 254
    13fc:	5f 4f       	sbci	r21, 0xFF	; 255
    13fe:	84 17       	cp	r24, r20
    1400:	95 07       	cpc	r25, r21
    1402:	50 f0       	brcs	.+20     	; 0x1418 <malloc+0x14e>
    1404:	42 0f       	add	r20, r18
    1406:	53 1f       	adc	r21, r19
    1408:	50 93 84 02 	sts	0x0284, r21
    140c:	40 93 83 02 	sts	0x0283, r20
    1410:	f9 01       	movw	r30, r18
    1412:	61 93       	st	Z+, r22
    1414:	71 93       	st	Z+, r23
    1416:	02 c0       	rjmp	.+4      	; 0x141c <malloc+0x152>
    1418:	e0 e0       	ldi	r30, 0x00	; 0
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	cf 01       	movw	r24, r30
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <free>:
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	09 f4       	brne	.+2      	; 0x142e <free+0xa>
    142c:	50 c0       	rjmp	.+160    	; 0x14ce <free+0xaa>
    142e:	ec 01       	movw	r28, r24
    1430:	22 97       	sbiw	r28, 0x02	; 2
    1432:	1b 82       	std	Y+3, r1	; 0x03
    1434:	1a 82       	std	Y+2, r1	; 0x02
    1436:	a0 91 85 02 	lds	r26, 0x0285
    143a:	b0 91 86 02 	lds	r27, 0x0286
    143e:	10 97       	sbiw	r26, 0x00	; 0
    1440:	09 f1       	breq	.+66     	; 0x1484 <free+0x60>
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	ac 17       	cp	r26, r28
    1448:	bd 07       	cpc	r27, r29
    144a:	08 f1       	brcs	.+66     	; 0x148e <free+0x6a>
    144c:	bb 83       	std	Y+3, r27	; 0x03
    144e:	aa 83       	std	Y+2, r26	; 0x02
    1450:	fe 01       	movw	r30, r28
    1452:	21 91       	ld	r18, Z+
    1454:	31 91       	ld	r19, Z+
    1456:	e2 0f       	add	r30, r18
    1458:	f3 1f       	adc	r31, r19
    145a:	ae 17       	cp	r26, r30
    145c:	bf 07       	cpc	r27, r31
    145e:	79 f4       	brne	.+30     	; 0x147e <free+0x5a>
    1460:	8d 91       	ld	r24, X+
    1462:	9c 91       	ld	r25, X
    1464:	11 97       	sbiw	r26, 0x01	; 1
    1466:	28 0f       	add	r18, r24
    1468:	39 1f       	adc	r19, r25
    146a:	2e 5f       	subi	r18, 0xFE	; 254
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	39 83       	std	Y+1, r19	; 0x01
    1470:	28 83       	st	Y, r18
    1472:	12 96       	adiw	r26, 0x02	; 2
    1474:	8d 91       	ld	r24, X+
    1476:	9c 91       	ld	r25, X
    1478:	13 97       	sbiw	r26, 0x03	; 3
    147a:	9b 83       	std	Y+3, r25	; 0x03
    147c:	8a 83       	std	Y+2, r24	; 0x02
    147e:	41 15       	cp	r20, r1
    1480:	51 05       	cpc	r21, r1
    1482:	71 f4       	brne	.+28     	; 0x14a0 <free+0x7c>
    1484:	d0 93 86 02 	sts	0x0286, r29
    1488:	c0 93 85 02 	sts	0x0285, r28
    148c:	20 c0       	rjmp	.+64     	; 0x14ce <free+0xaa>
    148e:	12 96       	adiw	r26, 0x02	; 2
    1490:	8d 91       	ld	r24, X+
    1492:	9c 91       	ld	r25, X
    1494:	13 97       	sbiw	r26, 0x03	; 3
    1496:	ad 01       	movw	r20, r26
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	11 f0       	breq	.+4      	; 0x14a0 <free+0x7c>
    149c:	dc 01       	movw	r26, r24
    149e:	d3 cf       	rjmp	.-90     	; 0x1446 <free+0x22>
    14a0:	fa 01       	movw	r30, r20
    14a2:	d3 83       	std	Z+3, r29	; 0x03
    14a4:	c2 83       	std	Z+2, r28	; 0x02
    14a6:	21 91       	ld	r18, Z+
    14a8:	31 91       	ld	r19, Z+
    14aa:	e2 0f       	add	r30, r18
    14ac:	f3 1f       	adc	r31, r19
    14ae:	ce 17       	cp	r28, r30
    14b0:	df 07       	cpc	r29, r31
    14b2:	69 f4       	brne	.+26     	; 0x14ce <free+0xaa>
    14b4:	88 81       	ld	r24, Y
    14b6:	99 81       	ldd	r25, Y+1	; 0x01
    14b8:	28 0f       	add	r18, r24
    14ba:	39 1f       	adc	r19, r25
    14bc:	2e 5f       	subi	r18, 0xFE	; 254
    14be:	3f 4f       	sbci	r19, 0xFF	; 255
    14c0:	fa 01       	movw	r30, r20
    14c2:	31 83       	std	Z+1, r19	; 0x01
    14c4:	20 83       	st	Z, r18
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ca:	93 83       	std	Z+3, r25	; 0x03
    14cc:	82 83       	std	Z+2, r24	; 0x02
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <memset>:
    14d4:	dc 01       	movw	r26, r24
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <memset+0x6>
    14d8:	6d 93       	st	X+, r22
    14da:	41 50       	subi	r20, 0x01	; 1
    14dc:	50 40       	sbci	r21, 0x00	; 0
    14de:	e0 f7       	brcc	.-8      	; 0x14d8 <memset+0x4>
    14e0:	08 95       	ret

000014e2 <_exit>:
    14e2:	f8 94       	cli

000014e4 <__stop_program>:
    14e4:	ff cf       	rjmp	.-2      	; 0x14e4 <__stop_program>
