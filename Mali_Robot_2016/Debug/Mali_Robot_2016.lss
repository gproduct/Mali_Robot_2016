
Mali_Robot_2016.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000013e6  0000149a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013e6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016d  00800110  00800110  000014aa  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000014aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000002c0  00000000  00000000  000014ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000677  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000286f  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3d  00000000  00000000  00004653  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c01  00000000  00000000  00005290  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  00007e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b15  00000000  00000000  000082f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000262a  00000000  00000000  00008e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f8  00000000  00000000  0000b433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
}//END OF servo_init


void servo_position1(unsigned char dutyCycle)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       2:	00 00       	nop
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
	_delay_ms(50);
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
	
	return buffer[0];
}
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
}

unsigned char GPIO_PinRead(unsigned char pinHandler)
{
	return ( (gpios[pinHandler]->buffer[0]) & (gpios[pinHandler]->buffer[1]) & (gpios[pinHandler]->buffer[2]) );
}
       6:	00 00       	nop

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
	
	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	00 c6       	rjmp	.+3072   	; 0xc32 <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	7c c0       	rjmp	.+248    	; 0x142 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	5a c6       	rjmp	.+3252   	; 0xd0a <__vector_21>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	25 c6       	rjmp	.+3146   	; 0xca8 <__vector_23>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a8 c6       	rjmp	.+3408   	; 0xdd2 <__vector_32>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	73 c6       	rjmp	.+3302   	; 0xd70 <__vector_34>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 ee       	ldi	r30, 0xE6	; 230
      a8:	f3 e1       	ldi	r31, 0x13	; 19
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a0 31       	cpi	r26, 0x10	; 16
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	a0 e1       	ldi	r26, 0x10	; 16
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ad 37       	cpi	r26, 0x7D	; 125
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	a4 d2       	rcall	.+1352   	; 0x614 <main>
      cc:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <servo_init>:
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
	DDRE |= (1 << PINE3) | (1 << PINE4) | (1 << PINE5);
      d2:	ed e2       	ldi	r30, 0x2D	; 45
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	20 81       	ld	r18, Z
      d8:	28 63       	ori	r18, 0x38	; 56
      da:	20 83       	st	Z, r18
	
	TCNT3 = 0;
      dc:	10 92 95 00 	sts	0x0095, r1
      e0:	10 92 94 00 	sts	0x0094, r1
	OCR3A = 0;
      e4:	10 92 99 00 	sts	0x0099, r1
      e8:	10 92 98 00 	sts	0x0098, r1
	OCR3B = 0;
      ec:	10 92 9b 00 	sts	0x009B, r1
      f0:	10 92 9a 00 	sts	0x009A, r1
	OCR3C = 0;
      f4:	10 92 9d 00 	sts	0x009D, r1
      f8:	10 92 9c 00 	sts	0x009C, r1
	
	TCCR3A = (1 << COM3A1) | (1 << COM3A0) | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
      fc:	2e ef       	ldi	r18, 0xFE	; 254
      fe:	20 93 90 00 	sts	0x0090, r18
	TCCR3B = (1 << WGM32) | (1 << WGM33) | (1 << CS31); // PRESKALER = 1
     102:	2a e1       	ldi	r18, 0x1A	; 26
     104:	20 93 91 00 	sts	0x0091, r18
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
     108:	88 0f       	add	r24, r24
     10a:	99 1f       	adc	r25, r25
     10c:	88 0f       	add	r24, r24
     10e:	99 1f       	adc	r25, r25
     110:	88 0f       	add	r24, r24
     112:	99 1f       	adc	r25, r25
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b0 e0       	ldi	r27, 0x00	; 0
     118:	bc 01       	movw	r22, r24
     11a:	cd 01       	movw	r24, r26
     11c:	86 d7       	rcall	.+3852   	; 0x102a <__floatunsisf>
     11e:	9b 01       	movw	r18, r22
     120:	ac 01       	movw	r20, r24
     122:	60 e8       	ldi	r22, 0x80	; 128
     124:	76 e9       	ldi	r23, 0x96	; 150
     126:	88 e1       	ldi	r24, 0x18	; 24
     128:	9b e4       	ldi	r25, 0x4B	; 75
     12a:	eb d6       	rcall	.+3542   	; 0xf02 <__divsf3>
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	40 e0       	ldi	r20, 0x00	; 0
     132:	5f e3       	ldi	r21, 0x3F	; 63
     134:	81 d6       	rcall	.+3330   	; 0xe38 <__subsf3>
     136:	4d d7       	rcall	.+3738   	; 0xfd2 <__fixunssfsi>
     138:	70 93 97 00 	sts	0x0097, r23
     13c:	60 93 96 00 	sts	0x0096, r22
}//END OF servo_init
     140:	08 95       	ret

00000142 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     142:	1f 92       	push	r1
     144:	0f 92       	push	r0
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	0f 92       	push	r0
     14a:	0b b6       	in	r0, 0x3b	; 59
     14c:	0f 92       	push	r0
     14e:	11 24       	eor	r1, r1
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	2f 93       	push	r18
     15c:	3f 93       	push	r19
     15e:	4f 93       	push	r20
     160:	5f 93       	push	r21
     162:	6f 93       	push	r22
     164:	7f 93       	push	r23
     166:	8f 93       	push	r24
     168:	9f 93       	push	r25
     16a:	af 93       	push	r26
     16c:	bf 93       	push	r27
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31
	unsigned char tempPage = CANPAGE;
     176:	f0 90 ed 00 	lds	r15, 0x00ED
     17a:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     17c:	ad ee       	ldi	r26, 0xED	; 237
     17e:	b0 e0       	ldi	r27, 0x00	; 0

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     180:	ee ee       	ldi	r30, 0xEE	; 238
     182:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     184:	89 2f       	mov	r24, r25
     186:	82 95       	swap	r24
     188:	80 7f       	andi	r24, 0xF0	; 240
     18a:	8c 93       	st	X, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     18c:	80 81       	ld	r24, Z
     18e:	85 ff       	sbrs	r24, 5
     190:	50 c0       	rjmp	.+160    	; 0x232 <__vector_18+0xf0>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     192:	80 e8       	ldi	r24, 0x80	; 128
     194:	80 93 ef 00 	sts	0x00EF, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     198:	ee ee       	ldi	r30, 0xEE	; 238
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	8f 7d       	andi	r24, 0xDF	; 223
     1a0:	80 83       	st	Z, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     1a2:	20 91 f2 00 	lds	r18, 0x00F2
     1a6:	80 91 f3 00 	lds	r24, 0x00F3

			for(i = 0; i < 8; ++i)
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     1aa:	88 0f       	add	r24, r24
     1ac:	88 0f       	add	r24, r24
     1ae:	88 0f       	add	r24, r24
     1b0:	22 95       	swap	r18
     1b2:	26 95       	lsr	r18
     1b4:	27 70       	andi	r18, 0x07	; 7
     1b6:	82 2b       	or	r24, r18
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	9c 01       	movw	r18, r24
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	e9 01       	movw	r28, r18
     1c2:	c2 5f       	subi	r28, 0xF2	; 242
     1c4:	de 4f       	sbci	r29, 0xFE	; 254
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	bc 01       	movw	r22, r24
     1cc:	61 50       	subi	r22, 0x01	; 1
     1ce:	70 40       	sbci	r23, 0x00	; 0
     1d0:	0f 2e       	mov	r0, r31
     1d2:	f4 e2       	ldi	r31, 0x24	; 36
     1d4:	cf 2e       	mov	r12, r31
     1d6:	f1 e0       	ldi	r31, 0x01	; 1
     1d8:	df 2e       	mov	r13, r31
     1da:	f0 2d       	mov	r31, r0
     1dc:	c6 0e       	add	r12, r22
     1de:	d7 1e       	adc	r13, r23
     1e0:	0a ef       	ldi	r16, 0xFA	; 250
     1e2:	10 e0       	ldi	r17, 0x00	; 0
     1e4:	ab 01       	movw	r20, r22
     1e6:	d6 01       	movw	r26, r12
     1e8:	8c 91       	ld	r24, X
     1ea:	f9 01       	movw	r30, r18
     1ec:	e8 0f       	add	r30, r24
     1ee:	f1 1d       	adc	r31, r1
     1f0:	cf 01       	movw	r24, r30
     1f2:	e8 81       	ld	r30, Y
     1f4:	f9 81       	ldd	r31, Y+1	; 0x01
     1f6:	e8 0f       	add	r30, r24
     1f8:	f9 1f       	adc	r31, r25
     1fa:	d8 01       	movw	r26, r16
     1fc:	8c 91       	ld	r24, X
     1fe:	80 83       	st	Z, r24
     200:	2f 5f       	subi	r18, 0xFF	; 255
     202:	3f 4f       	sbci	r19, 0xFF	; 255
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     204:	28 30       	cpi	r18, 0x08	; 8
     206:	31 05       	cpc	r19, r1
     208:	69 f7       	brne	.-38     	; 0x1e4 <__vector_18+0xa2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     20a:	fb 01       	movw	r30, r22
     20c:	ec 5d       	subi	r30, 0xDC	; 220
     20e:	fe 4f       	sbci	r31, 0xFE	; 254
     210:	80 81       	ld	r24, Z
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	80 83       	st	Z, r24
     216:	80 81       	ld	r24, Z
     218:	85 30       	cpi	r24, 0x05	; 5
     21a:	21 f4       	brne	.+8      	; 0x224 <__vector_18+0xe2>
				*(rxWrIndex + ide - 1) = 0;
     21c:	fb 01       	movw	r30, r22
     21e:	ec 5d       	subi	r30, 0xDC	; 220
     220:	fe 4f       	sbci	r31, 0xFE	; 254
     222:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     224:	fa 01       	movw	r30, r20
     226:	e8 5c       	subi	r30, 0xC8	; 200
     228:	fe 4f       	sbci	r31, 0xFE	; 254
     22a:	80 81       	ld	r24, Z
     22c:	8f 5f       	subi	r24, 0xFF	; 255
     22e:	80 83       	st	Z, r24
     230:	0f c0       	rjmp	.+30     	; 0x250 <__vector_18+0x10e>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     232:	80 81       	ld	r24, Z
     234:	86 ff       	sbrs	r24, 6
     236:	08 c0       	rjmp	.+16     	; 0x248 <__vector_18+0x106>
		{
			CANCDMOB = 0; // disable mob
     238:	10 92 ef 00 	sts	0x00EF, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     23c:	ee ee       	ldi	r30, 0xEE	; 238
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	8f 7b       	andi	r24, 0xBF	; 191
     244:	80 83       	st	Z, r24
     246:	04 c0       	rjmp	.+8      	; 0x250 <__vector_18+0x10e>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     248:	9f 5f       	subi	r25, 0xFF	; 255
     24a:	9f 30       	cpi	r25, 0x0F	; 15
     24c:	09 f0       	breq	.+2      	; 0x250 <__vector_18+0x10e>
     24e:	9a cf       	rjmp	.-204    	; 0x184 <__vector_18+0x42>

			break;
		}
	}

	CANPAGE = tempPage;
     250:	f0 92 ed 00 	sts	0x00ED, r15
	CANGIT = CANGIT; // zato sto tako treba.
     254:	ea ed       	ldi	r30, 0xDA	; 218
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	80 83       	st	Z, r24
}
     25c:	ff 91       	pop	r31
     25e:	ef 91       	pop	r30
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	bf 91       	pop	r27
     266:	af 91       	pop	r26
     268:	9f 91       	pop	r25
     26a:	8f 91       	pop	r24
     26c:	7f 91       	pop	r23
     26e:	6f 91       	pop	r22
     270:	5f 91       	pop	r21
     272:	4f 91       	pop	r20
     274:	3f 91       	pop	r19
     276:	2f 91       	pop	r18
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	df 90       	pop	r13
     280:	cf 90       	pop	r12
     282:	0f 90       	pop	r0
     284:	0b be       	out	0x3b, r0	; 59
     286:	0f 90       	pop	r0
     288:	0f be       	out	0x3f, r0	; 63
     28a:	0f 90       	pop	r0
     28c:	1f 90       	pop	r1
     28e:	18 95       	reti

00000290 <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	8c 01       	movw	r16, r24
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     2a2:	a6 2f       	mov	r26, r22
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	ad 01       	movw	r20, r26
     2a8:	41 50       	subi	r20, 0x01	; 1
     2aa:	50 40       	sbci	r21, 0x00	; 0
     2ac:	c8 e3       	ldi	r28, 0x38	; 56
     2ae:	d1 e0       	ldi	r29, 0x01	; 1
     2b0:	fe 01       	movw	r30, r28
     2b2:	e4 0f       	add	r30, r20
     2b4:	f5 1f       	adc	r31, r21
     2b6:	7a 01       	movw	r14, r20
     2b8:	80 81       	ld	r24, Z
     2ba:	88 23       	and	r24, r24
     2bc:	e1 f3       	breq	.-8      	; 0x2b6 <CAN_Read+0x26>

	for(i = 0; i < 8; ++i)
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     2be:	26 2f       	mov	r18, r22
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	c9 01       	movw	r24, r18
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	ec 01       	movw	r28, r24
     2ca:	c2 5f       	subi	r28, 0xF2	; 242
     2cc:	de 4f       	sbci	r29, 0xFE	; 254
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	21 50       	subi	r18, 0x01	; 1
     2d4:	30 40       	sbci	r19, 0x00	; 0
     2d6:	0f 2e       	mov	r0, r31
     2d8:	fe e2       	ldi	r31, 0x2E	; 46
     2da:	cf 2e       	mov	r12, r31
     2dc:	f1 e0       	ldi	r31, 0x01	; 1
     2de:	df 2e       	mov	r13, r31
     2e0:	f0 2d       	mov	r31, r0
     2e2:	d6 01       	movw	r26, r12
     2e4:	a2 0f       	add	r26, r18
     2e6:	b3 1f       	adc	r27, r19
     2e8:	8c 91       	ld	r24, X
     2ea:	fa 01       	movw	r30, r20
     2ec:	e8 0f       	add	r30, r24
     2ee:	f1 1d       	adc	r31, r1
     2f0:	cf 01       	movw	r24, r30
     2f2:	e8 81       	ld	r30, Y
     2f4:	f9 81       	ldd	r31, Y+1	; 0x01
     2f6:	e8 0f       	add	r30, r24
     2f8:	f9 1f       	adc	r31, r25
     2fa:	80 81       	ld	r24, Z
     2fc:	f8 01       	movw	r30, r16
     2fe:	e4 0f       	add	r30, r20
     300:	f5 1f       	adc	r31, r21
     302:	80 83       	st	Z, r24
     304:	4f 5f       	subi	r20, 0xFF	; 255
     306:	5f 4f       	sbci	r21, 0xFF	; 255
{
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     308:	48 30       	cpi	r20, 0x08	; 8
     30a:	51 05       	cpc	r21, r1
     30c:	69 f7       	brne	.-38     	; 0x2e8 <CAN_Read+0x58>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     30e:	f9 01       	movw	r30, r18
     310:	e2 5d       	subi	r30, 0xD2	; 210
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	80 81       	ld	r24, Z
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	80 83       	st	Z, r24
     31a:	80 81       	ld	r24, Z
     31c:	85 30       	cpi	r24, 0x05	; 5
     31e:	21 f4       	brne	.+8      	; 0x328 <CAN_Read+0x98>
		*(rxRdIndex + sendingNodeID - 1) = 0;
     320:	f9 01       	movw	r30, r18
     322:	e2 5d       	subi	r30, 0xD2	; 210
     324:	fe 4f       	sbci	r31, 0xFE	; 254
     326:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     328:	f7 01       	movw	r30, r14
     32a:	e8 5c       	subi	r30, 0xC8	; 200
     32c:	fe 4f       	sbci	r31, 0xFE	; 254
     32e:	80 81       	ld	r24, Z
     330:	81 50       	subi	r24, 0x01	; 1
     332:	80 83       	st	Z, r24

	return 0;
}
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	df 90       	pop	r13
     344:	cf 90       	pop	r12
     346:	08 95       	ret

00000348 <CAN_Write>:


char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     348:	ac 01       	movw	r20, r24
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     34a:	e9 ed       	ldi	r30, 0xD9	; 217
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	84 fd       	sbrc	r24, 4
     352:	fd cf       	rjmp	.-6      	; 0x34e <CAN_Write+0x6>
     354:	80 81       	ld	r24, Z
     356:	83 fd       	sbrc	r24, 3
     358:	fa cf       	rjmp	.-12     	; 0x34e <CAN_Write+0x6>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     35a:	90 91 ed 00 	lds	r25, 0x00ED
     35e:	20 e0       	ldi	r18, 0x00	; 0

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     360:	ad ee       	ldi	r26, 0xED	; 237
     362:	b0 e0       	ldi	r27, 0x00	; 0

		if(!(CANCDMOB >> 6))
     364:	ef ee       	ldi	r30, 0xEF	; 239
     366:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     368:	82 2f       	mov	r24, r18
     36a:	82 95       	swap	r24
     36c:	80 7f       	andi	r24, 0xF0	; 240
     36e:	8c 93       	st	X, r24

		if(!(CANCDMOB >> 6))
     370:	80 81       	ld	r24, Z
     372:	82 95       	swap	r24
     374:	86 95       	lsr	r24
     376:	86 95       	lsr	r24
     378:	83 70       	andi	r24, 0x03	; 3
     37a:	21 f0       	breq	.+8      	; 0x384 <CAN_Write+0x3c>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     37c:	2f 5f       	subi	r18, 0xFF	; 255
     37e:	2f 30       	cpi	r18, 0x0F	; 15
     380:	99 f7       	brne	.-26     	; 0x368 <CAN_Write+0x20>
     382:	28 c0       	rjmp	.+80     	; 0x3d4 <CAN_Write+0x8c>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     384:	2f 30       	cpi	r18, 0x0F	; 15
     386:	31 f1       	breq	.+76     	; 0x3d4 <CAN_Write+0x8c>
		return -1;


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     388:	86 2f       	mov	r24, r22
     38a:	82 95       	swap	r24
     38c:	88 0f       	add	r24, r24
     38e:	80 7e       	andi	r24, 0xE0	; 224
     390:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
     394:	86 2f       	mov	r24, r22
     396:	86 95       	lsr	r24
     398:	86 95       	lsr	r24
     39a:	86 95       	lsr	r24
     39c:	80 93 f3 00 	sts	0x00F3, r24

	// DLC = 8
	CANCDMOB = 8;
     3a0:	88 e0       	ldi	r24, 0x08	; 8
     3a2:	80 93 ef 00 	sts	0x00EF, r24
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
		CANMSG = data[i];
     3aa:	aa ef       	ldi	r26, 0xFA	; 250
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	fa 01       	movw	r30, r20
     3b0:	e2 0f       	add	r30, r18
     3b2:	f3 1f       	adc	r31, r19
     3b4:	80 81       	ld	r24, Z
     3b6:	8c 93       	st	X, r24
     3b8:	2f 5f       	subi	r18, 0xFF	; 255
     3ba:	3f 4f       	sbci	r19, 0xFF	; 255

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     3bc:	28 30       	cpi	r18, 0x08	; 8
     3be:	31 05       	cpc	r19, r1
     3c0:	b1 f7       	brne	.-20     	; 0x3ae <CAN_Write+0x66>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     3c2:	ef ee       	ldi	r30, 0xEF	; 239
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	80 64       	ori	r24, 0x40	; 64
     3ca:	80 83       	st	Z, r24

	CANPAGE = tempPage;
     3cc:	90 93 ed 00 	sts	0x00ED, r25
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	08 95       	ret

	return 0;
     3d4:	8f ef       	ldi	r24, 0xFF	; 255
}
     3d6:	08 95       	ret

000003d8 <CAN_Init>:
	return 0;
}


void CAN_Init(unsigned char numOfNodes)
{
     3d8:	2f 92       	push	r2
     3da:	3f 92       	push	r3
     3dc:	4f 92       	push	r4
     3de:	5f 92       	push	r5
     3e0:	6f 92       	push	r6
     3e2:	7f 92       	push	r7
     3e4:	8f 92       	push	r8
     3e6:	9f 92       	push	r9
     3e8:	af 92       	push	r10
     3ea:	bf 92       	push	r11
     3ec:	cf 92       	push	r12
     3ee:	df 92       	push	r13
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	df 93       	push	r29
     3fa:	cf 93       	push	r28
     3fc:	0f 92       	push	r0
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	89 83       	std	Y+1, r24	; 0x01
{
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	80 93 d8 00 	sts	0x00D8, r24
     40a:	90 e0       	ldi	r25, 0x00	; 0

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     40c:	0f 2e       	mov	r0, r31
     40e:	fd ee       	ldi	r31, 0xED	; 237
     410:	6f 2e       	mov	r6, r31
     412:	77 24       	eor	r7, r7
     414:	f0 2d       	mov	r31, r0

		CANSTMOB = 0;
     416:	0f 2e       	mov	r0, r31
     418:	fe ee       	ldi	r31, 0xEE	; 238
     41a:	cf 2e       	mov	r12, r31
     41c:	dd 24       	eor	r13, r13
     41e:	f0 2d       	mov	r31, r0
		CANCDMOB = 0;
     420:	0f 2e       	mov	r0, r31
     422:	ff ee       	ldi	r31, 0xEF	; 239
     424:	af 2e       	mov	r10, r31
     426:	bb 24       	eor	r11, r11
     428:	f0 2d       	mov	r31, r0

		CANIDT1 = 0;
     42a:	0f 2e       	mov	r0, r31
     42c:	f3 ef       	ldi	r31, 0xF3	; 243
     42e:	8f 2e       	mov	r8, r31
     430:	99 24       	eor	r9, r9
     432:	f0 2d       	mov	r31, r0
		CANIDT2 = 0;
     434:	62 ef       	ldi	r22, 0xF2	; 242
     436:	70 e0       	ldi	r23, 0x00	; 0
		CANIDT3 = 0;
     438:	01 ef       	ldi	r16, 0xF1	; 241
     43a:	10 e0       	ldi	r17, 0x00	; 0
		CANIDT4 = 0;
     43c:	0f 2e       	mov	r0, r31
     43e:	f0 ef       	ldi	r31, 0xF0	; 240
     440:	ef 2e       	mov	r14, r31
     442:	ff 24       	eor	r15, r15
     444:	f0 2d       	mov	r31, r0
		CANIDM1 = 0;
     446:	27 ef       	ldi	r18, 0xF7	; 247
     448:	30 e0       	ldi	r19, 0x00	; 0
		CANIDM2 = 0;
     44a:	46 ef       	ldi	r20, 0xF6	; 246
     44c:	50 e0       	ldi	r21, 0x00	; 0
		CANIDM3 = 0;
     44e:	0f 2e       	mov	r0, r31
     450:	f5 ef       	ldi	r31, 0xF5	; 245
     452:	4f 2e       	mov	r4, r31
     454:	55 24       	eor	r5, r5
     456:	f0 2d       	mov	r31, r0
		CANIDM4 = 0;
     458:	0f 2e       	mov	r0, r31
     45a:	f4 ef       	ldi	r31, 0xF4	; 244
     45c:	2f 2e       	mov	r2, r31
     45e:	33 24       	eor	r3, r3
     460:	f0 2d       	mov	r31, r0

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
			CANMSG = 0;
     462:	ea ef       	ldi	r30, 0xFA	; 250
     464:	f0 e0       	ldi	r31, 0x00	; 0
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     466:	89 2f       	mov	r24, r25
     468:	82 95       	swap	r24
     46a:	80 7f       	andi	r24, 0xF0	; 240
     46c:	d3 01       	movw	r26, r6
     46e:	8c 93       	st	X, r24

		CANSTMOB = 0;
     470:	d6 01       	movw	r26, r12
     472:	1c 92       	st	X, r1
		CANCDMOB = 0;
     474:	d5 01       	movw	r26, r10
     476:	1c 92       	st	X, r1

		CANIDT1 = 0;
     478:	d4 01       	movw	r26, r8
     47a:	1c 92       	st	X, r1
		CANIDT2 = 0;
     47c:	db 01       	movw	r26, r22
     47e:	1c 92       	st	X, r1
		CANIDT3 = 0;
     480:	d8 01       	movw	r26, r16
     482:	1c 92       	st	X, r1
		CANIDT4 = 0;
     484:	d7 01       	movw	r26, r14
     486:	1c 92       	st	X, r1
		CANIDM1 = 0;
     488:	d9 01       	movw	r26, r18
     48a:	1c 92       	st	X, r1
		CANIDM2 = 0;
     48c:	da 01       	movw	r26, r20
     48e:	1c 92       	st	X, r1
		CANIDM3 = 0;
     490:	d2 01       	movw	r26, r4
     492:	1c 92       	st	X, r1
		CANIDM4 = 0;
     494:	d1 01       	movw	r26, r2
     496:	1c 92       	st	X, r1
     498:	80 e0       	ldi	r24, 0x00	; 0

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
			CANMSG = 0;
     49a:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     49c:	8f 5f       	subi	r24, 0xFF	; 255
     49e:	88 30       	cpi	r24, 0x08	; 8
     4a0:	e1 f7       	brne	.-8      	; 0x49a <CAN_Init+0xc2>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     4a2:	9f 5f       	subi	r25, 0xFF	; 255
     4a4:	9f 30       	cpi	r25, 0x0F	; 15
     4a6:	f9 f6       	brne	.-66     	; 0x466 <CAN_Init+0x8e>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	80 93 d8 00 	sts	0x00D8, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     4b4:	88 e0       	ldi	r24, 0x08	; 8
     4b6:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     4ba:	8e e5       	ldi	r24, 0x5E	; 94
     4bc:	80 93 e4 00 	sts	0x00E4, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     4c0:	10 92 e5 00 	sts	0x00E5, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     4c4:	80 eb       	ldi	r24, 0xB0	; 176
     4c6:	80 93 db 00 	sts	0x00DB, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     4ca:	8f e7       	ldi	r24, 0x7F	; 127
     4cc:	80 93 df 00 	sts	0x00DF, r24
	CANIE2 = 0xFF;
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	80 93 de 00 	sts	0x00DE, r24
	sei();
     4d6:	78 94       	sei

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     4d8:	b9 81       	ldd	r27, Y+1	; 0x01
     4da:	bb 23       	and	r27, r27
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <CAN_Init+0x108>
     4de:	86 c0       	rjmp	.+268    	; 0x5ec <CAN_Init+0x214>
     4e0:	0f 2e       	mov	r0, r31
     4e2:	f0 e1       	ldi	r31, 0x10	; 16
     4e4:	8f 2e       	mov	r8, r31
     4e6:	f1 e0       	ldi	r31, 0x01	; 1
     4e8:	9f 2e       	mov	r9, r31
     4ea:	f0 2d       	mov	r31, r0
     4ec:	aa 24       	eor	r10, r10
     4ee:	bb 24       	eor	r11, r11
     4f0:	66 24       	eor	r6, r6
     4f2:	77 24       	eor	r7, r7
     4f4:	63 94       	inc	r6


static char CAN_InitRxMob(unsigned int ide)
{
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     4f6:	0f 2e       	mov	r0, r31
     4f8:	fd ee       	ldi	r31, 0xED	; 237
     4fa:	ef 2e       	mov	r14, r31
     4fc:	ff 24       	eor	r15, r15
     4fe:	f0 2d       	mov	r31, r0
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     500:	0f 2e       	mov	r0, r31
     502:	ff ee       	ldi	r31, 0xEF	; 239
     504:	cf 2e       	mov	r12, r31
     506:	dd 24       	eor	r13, r13
     508:	f0 2d       	mov	r31, r0
	for(i = 0; i < numOfNodes; ++i)
	{
		CAN_InitRxMob(i + 1);
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     50a:	0f 2e       	mov	r0, r31
     50c:	fe e2       	ldi	r31, 0x2E	; 46
     50e:	4f 2e       	mov	r4, r31
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	5f 2e       	mov	r5, r31
     514:	f0 2d       	mov	r31, r0
     516:	0f 2e       	mov	r0, r31
     518:	f4 e2       	ldi	r31, 0x24	; 36
     51a:	2f 2e       	mov	r2, r31
     51c:	f1 e0       	ldi	r31, 0x01	; 1
     51e:	3f 2e       	mov	r3, r31
     520:	f0 2d       	mov	r31, r0

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     522:	85 01       	movw	r16, r10


static char CAN_InitRxMob(unsigned int ide)
{
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     524:	f7 01       	movw	r30, r14
     526:	20 81       	ld	r18, Z

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     528:	a9 ed       	ldi	r26, 0xD9	; 217
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	8c 91       	ld	r24, X
     52e:	84 fd       	sbrc	r24, 4
     530:	fb cf       	rjmp	.-10     	; 0x528 <CAN_Init+0x150>
     532:	8c 91       	ld	r24, X
     534:	83 fd       	sbrc	r24, 3
     536:	f8 cf       	rjmp	.-16     	; 0x528 <CAN_Init+0x150>
     538:	90 e0       	ldi	r25, 0x00	; 0

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     53a:	89 2f       	mov	r24, r25
     53c:	82 95       	swap	r24
     53e:	80 7f       	andi	r24, 0xF0	; 240
     540:	f7 01       	movw	r30, r14
     542:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     544:	d6 01       	movw	r26, r12
     546:	8c 91       	ld	r24, X
     548:	82 95       	swap	r24
     54a:	86 95       	lsr	r24
     54c:	86 95       	lsr	r24
     54e:	83 70       	andi	r24, 0x03	; 3
     550:	19 f5       	brne	.+70     	; 0x598 <CAN_Init+0x1c0>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     552:	ef e0       	ldi	r30, 0x0F	; 15
     554:	ec 93       	st	X, r30

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     556:	c3 01       	movw	r24, r6
     558:	90 70       	andi	r25, 0x00	; 0
     55a:	96 95       	lsr	r25
     55c:	87 95       	ror	r24
     55e:	96 95       	lsr	r25
     560:	87 95       	ror	r24
     562:	96 95       	lsr	r25
     564:	87 95       	ror	r24
     566:	a3 ef       	ldi	r26, 0xF3	; 243
     568:	b0 e0       	ldi	r27, 0x00	; 0
     56a:	8c 93       	st	X, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     56c:	86 2d       	mov	r24, r6
     56e:	82 95       	swap	r24
     570:	88 0f       	add	r24, r24
     572:	80 7e       	andi	r24, 0xE0	; 224
     574:	e2 ef       	ldi	r30, 0xF2	; 242
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     57a:	e0 ee       	ldi	r30, 0xE0	; 224
     57c:	a6 ef       	ldi	r26, 0xF6	; 246
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	ec 93       	st	X, r30
		CANIDM1 = 0xFF;
     582:	ef ef       	ldi	r30, 0xFF	; 255
     584:	a7 ef       	ldi	r26, 0xF7	; 247
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	ec 93       	st	X, r30

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     58a:	d6 01       	movw	r26, r12
     58c:	8c 91       	ld	r24, X
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     592:	f7 01       	movw	r30, r14
     594:	20 83       	st	Z, r18
     596:	05 c0       	rjmp	.+10     	; 0x5a2 <CAN_Init+0x1ca>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     598:	9f 5f       	subi	r25, 0xFF	; 255
     59a:	9f 30       	cpi	r25, 0x0F	; 15
     59c:	71 f6       	brne	.-100    	; 0x53a <CAN_Init+0x162>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     59e:	d7 01       	movw	r26, r14
     5a0:	2c 93       	st	X, r18
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
	{
		CAN_InitRxMob(i + 1);
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     5a2:	85 e0       	ldi	r24, 0x05	; 5
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	f5 d5       	rcall	.+3050   	; 0x1196 <calloc>
     5ac:	f4 01       	movw	r30, r8
     5ae:	80 83       	st	Z, r24
     5b0:	91 83       	std	Z+1, r25	; 0x01
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     5b2:	e8 e3       	ldi	r30, 0x38	; 56
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	e0 0f       	add	r30, r16
     5b8:	f1 1f       	adc	r31, r17
     5ba:	10 82       	st	Z, r1
     5bc:	80 81       	ld	r24, Z
     5be:	f2 01       	movw	r30, r4
     5c0:	e0 0f       	add	r30, r16
     5c2:	f1 1f       	adc	r31, r17
     5c4:	80 83       	st	Z, r24
     5c6:	80 81       	ld	r24, Z
     5c8:	f1 01       	movw	r30, r2
     5ca:	e0 0f       	add	r30, r16
     5cc:	f1 1f       	adc	r31, r17
     5ce:	80 83       	st	Z, r24
     5d0:	08 94       	sec
     5d2:	a1 1c       	adc	r10, r1
     5d4:	b1 1c       	adc	r11, r1
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	88 0e       	add	r8, r24
     5dc:	99 1e       	adc	r9, r25
     5de:	08 94       	sec
     5e0:	61 1c       	adc	r6, r1
     5e2:	71 1c       	adc	r7, r1

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     5e4:	99 81       	ldd	r25, Y+1	; 0x01
     5e6:	a9 16       	cp	r10, r25
     5e8:	08 f4       	brcc	.+2      	; 0x5ec <CAN_Init+0x214>
     5ea:	9b cf       	rjmp	.-202    	; 0x522 <CAN_Init+0x14a>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     5ec:	0f 90       	pop	r0
     5ee:	cf 91       	pop	r28
     5f0:	df 91       	pop	r29
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	bf 90       	pop	r11
     600:	af 90       	pop	r10
     602:	9f 90       	pop	r9
     604:	8f 90       	pop	r8
     606:	7f 90       	pop	r7
     608:	6f 90       	pop	r6
     60a:	5f 90       	pop	r5
     60c:	4f 90       	pop	r4
     60e:	3f 90       	pop	r3
     610:	2f 90       	pop	r2
     612:	08 95       	ret

00000614 <main>:
	}
}

int main(void)
{
	SystemInit();
     614:	f6 d2       	rcall	.+1516   	; 0xc02 <SystemInit>
     616:	28 ee       	ldi	r18, 0xE8	; 232
     618:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     61a:	4a ef       	ldi	r20, 0xFA	; 250
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	ca 01       	movw	r24, r20
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <main+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     624:	21 50       	subi	r18, 0x01	; 1
     626:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     628:	d1 f7       	brne	.-12     	; 0x61e <main+0xa>
	
	_delay_ms(100);
    while (1) 
    {
		purpleSide();
     62a:	00 d2       	rcall	.+1024   	; 0xa2c <purpleSide>
     62c:	fe cf       	rjmp	.-4      	; 0x62a <main+0x16>

0000062e <TimerHook>:
#include "actuators.h"
#include "odometry.h"

void TimerHook(void)
{
	if(matchIsStarted() == 1 && getSystemTime() > 90000)
     62e:	e6 d2       	rcall	.+1484   	; 0xbfc <matchIsStarted>
     630:	81 30       	cpi	r24, 0x01	; 1
     632:	49 f4       	brne	.+18     	; 0x646 <TimerHook+0x18>
     634:	d5 d2       	rcall	.+1450   	; 0xbe0 <getSystemTime>
     636:	61 59       	subi	r22, 0x91	; 145
     638:	7f 45       	sbci	r23, 0x5F	; 95
     63a:	81 40       	sbci	r24, 0x01	; 1
     63c:	90 40       	sbci	r25, 0x00	; 0
     63e:	18 f0       	brcs	.+6      	; 0x646 <TimerHook+0x18>
	{
		stop(HARD_STOP);
     640:	83 e5       	ldi	r24, 0x53	; 83
     642:	cd d0       	rcall	.+410    	; 0x7de <stop>
     644:	ff cf       	rjmp	.-2      	; 0x644 <TimerHook+0x16>
     646:	08 95       	ret

00000648 <setPosition>:
		}
	}
}

char setPosition(position coordinates)
{
     648:	2f 92       	push	r2
     64a:	3f 92       	push	r3
     64c:	4f 92       	push	r4
     64e:	5f 92       	push	r5
     650:	6f 92       	push	r6
     652:	7f 92       	push	r7
     654:	8f 92       	push	r8
     656:	9f 92       	push	r9
     658:	af 92       	push	r10
     65a:	bf 92       	push	r11
     65c:	cf 92       	push	r12
     65e:	df 92       	push	r13
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	df 93       	push	r29
     66a:	cf 93       	push	r28
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	66 97       	sbiw	r28, 0x16	; 22
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	49 87       	std	Y+9, r20	; 0x09
     67e:	5a 87       	std	Y+10, r21	; 0x0a
     680:	6b 87       	std	Y+11, r22	; 0x0b
     682:	7c 87       	std	Y+12, r23	; 0x0c
     684:	8d 87       	std	Y+13, r24	; 0x0d
     686:	9e 87       	std	Y+14, r25	; 0x0e
     688:	4d 84       	ldd	r4, Y+13	; 0x0d
     68a:	5e 84       	ldd	r5, Y+14	; 0x0e
	position temp;
	
	while(1)
	{
		buffer[0] = 'I';
		buffer[1] = coordinates.x >> 8;
     68c:	89 85       	ldd	r24, Y+9	; 0x09
     68e:	9a 85       	ldd	r25, Y+10	; 0x0a
     690:	98 8b       	std	Y+16, r25	; 0x10
     692:	8f 87       	std	Y+15, r24	; 0x0f
     694:	5e 8b       	std	Y+22, r21	; 0x16
		buffer[2] = coordinates.x & 0XFF;
		buffer[3] = coordinates.y >> 8;
     696:	2b 84       	ldd	r2, Y+11	; 0x0b
     698:	3c 84       	ldd	r3, Y+12	; 0x0c
     69a:	7d 8b       	std	Y+21, r23	; 0x15
     69c:	0a ef       	ldi	r16, 0xFA	; 250
     69e:	10 e0       	ldi	r17, 0x00	; 0
		buffer[4] = coordinates.y & 0XFF;
		buffer[5] = coordinates.angle << 8;
		buffer[6] = coordinates.angle & 0XFF;
		
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     6a0:	7e 01       	movw	r14, r28
     6a2:	08 94       	sec
     6a4:	e1 1c       	adc	r14, r1
     6a6:	f1 1c       	adc	r15, r1
     6a8:	0f 2e       	mov	r0, r31
     6aa:	f4 ef       	ldi	r31, 0xF4	; 244
     6ac:	6f 2e       	mov	r6, r31
     6ae:	f1 e0       	ldi	r31, 0x01	; 1
     6b0:	7f 2e       	mov	r7, r31
     6b2:	f0 2d       	mov	r31, r0
	unsigned char buffer[8];
	position temp;
	
	while(1)
	{
		buffer[0] = 'I';
     6b4:	89 e4       	ldi	r24, 0x49	; 73
     6b6:	89 83       	std	Y+1, r24	; 0x01
		buffer[1] = coordinates.x >> 8;
     6b8:	9e 89       	ldd	r25, Y+22	; 0x16
     6ba:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2] = coordinates.x & 0XFF;
     6bc:	2f 85       	ldd	r18, Y+15	; 0x0f
     6be:	2b 83       	std	Y+3, r18	; 0x03
		buffer[3] = coordinates.y >> 8;
     6c0:	8d 89       	ldd	r24, Y+21	; 0x15
     6c2:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4] = coordinates.y & 0XFF;
     6c4:	2d 82       	std	Y+5, r2	; 0x05
		buffer[5] = coordinates.angle << 8;
     6c6:	1e 82       	std	Y+6, r1	; 0x06
		buffer[6] = coordinates.angle & 0XFF;
     6c8:	4f 82       	std	Y+7, r4	; 0x07
     6ca:	07 c0       	rjmp	.+14     	; 0x6da <setPosition+0x92>
		
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     6cc:	93 01       	movw	r18, r6
     6ce:	c8 01       	movw	r24, r16
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <setPosition+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d4:	21 50       	subi	r18, 0x01	; 1
     6d6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6d8:	d1 f7       	brne	.-12     	; 0x6ce <setPosition+0x86>
     6da:	c7 01       	movw	r24, r14
     6dc:	63 ec       	ldi	r22, 0xC3	; 195
     6de:	34 de       	rcall	.-920    	; 0x348 <CAN_Write>
     6e0:	88 23       	and	r24, r24
     6e2:	a1 f7       	brne	.-24     	; 0x6cc <setPosition+0x84>
		_delay_ms(50); // DA LI TREBA PROVERA ZA ERROR?
		
		buffer[0] = 'P';
     6e4:	90 e5       	ldi	r25, 0x50	; 80
     6e6:	99 83       	std	Y+1, r25	; 0x01
     6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <setPosition+0xb0>
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     6ea:	93 01       	movw	r18, r6
     6ec:	c8 01       	movw	r24, r16
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <setPosition+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f2:	21 50       	subi	r18, 0x01	; 1
     6f4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6f6:	d1 f7       	brne	.-12     	; 0x6ec <setPosition+0xa4>
     6f8:	c7 01       	movw	r24, r14
     6fa:	63 ec       	ldi	r22, 0xC3	; 195
     6fc:	25 de       	rcall	.-950    	; 0x348 <CAN_Write>
     6fe:	88 23       	and	r24, r24
     700:	a1 f7       	brne	.-24     	; 0x6ea <setPosition+0xa2>
		_delay_ms(50);
		CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
     702:	c7 01       	movw	r24, r14
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	c4 dd       	rcall	.-1144   	; 0x290 <CAN_Read>
		
		temp.x = (buffer[1] << 8) | buffer[2];
		temp.y = (buffer[3] << 8) | buffer[4];
     708:	2c 81       	ldd	r18, Y+4	; 0x04
     70a:	2c 8b       	std	Y+20, r18	; 0x14
     70c:	8d 81       	ldd	r24, Y+5	; 0x05
     70e:	8b 8b       	std	Y+19, r24	; 0x13
		temp.angle = (buffer[5] << 8) | buffer[6];
     710:	9e 81       	ldd	r25, Y+6	; 0x06
     712:	9a 8b       	std	Y+18, r25	; 0x12
     714:	2f 81       	ldd	r18, Y+7	; 0x07
     716:	29 8b       	std	Y+17, r18	; 0x11
		
		if(!((fabs(temp.x - coordinates.x) > 5) || (fabs(temp.y - coordinates.y) > 5 || (fabs(temp.angle - coordinates.angle) > 5))))
     718:	da 80       	ldd	r13, Y+2	; 0x02
     71a:	cc 24       	eor	r12, r12
     71c:	8b 81       	ldd	r24, Y+3	; 0x03
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	b6 01       	movw	r22, r12
     722:	68 2b       	or	r22, r24
     724:	79 2b       	or	r23, r25
     726:	8f 85       	ldd	r24, Y+15	; 0x0f
     728:	98 89       	ldd	r25, Y+16	; 0x10
     72a:	68 1b       	sub	r22, r24
     72c:	79 0b       	sbc	r23, r25
     72e:	88 27       	eor	r24, r24
     730:	77 fd       	sbrc	r23, 7
     732:	80 95       	com	r24
     734:	98 2f       	mov	r25, r24
     736:	7b d4       	rcall	.+2294   	; 0x102e <__floatsisf>
     738:	9f 77       	andi	r25, 0x7F	; 127
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 ea       	ldi	r20, 0xA0	; 160
     740:	50 e4       	ldi	r21, 0x40	; 64
     742:	01 d5       	rcall	.+2562   	; 0x1146 <__gesf2>
     744:	18 16       	cp	r1, r24
     746:	0c f4       	brge	.+2      	; 0x74a <setPosition+0x102>
     748:	b5 cf       	rjmp	.-150    	; 0x6b4 <setPosition+0x6c>
     74a:	bc 88       	ldd	r11, Y+20	; 0x14
     74c:	aa 24       	eor	r10, r10
     74e:	2b 89       	ldd	r18, Y+19	; 0x13
     750:	82 2f       	mov	r24, r18
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	b5 01       	movw	r22, r10
     756:	68 2b       	or	r22, r24
     758:	79 2b       	or	r23, r25
     75a:	62 19       	sub	r22, r2
     75c:	73 09       	sbc	r23, r3
     75e:	88 27       	eor	r24, r24
     760:	77 fd       	sbrc	r23, 7
     762:	80 95       	com	r24
     764:	98 2f       	mov	r25, r24
     766:	63 d4       	rcall	.+2246   	; 0x102e <__floatsisf>
     768:	9f 77       	andi	r25, 0x7F	; 127
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 ea       	ldi	r20, 0xA0	; 160
     770:	50 e4       	ldi	r21, 0x40	; 64
     772:	e9 d4       	rcall	.+2514   	; 0x1146 <__gesf2>
     774:	18 16       	cp	r1, r24
     776:	0c f4       	brge	.+2      	; 0x77a <setPosition+0x132>
     778:	9d cf       	rjmp	.-198    	; 0x6b4 <setPosition+0x6c>
     77a:	9a 88       	ldd	r9, Y+18	; 0x12
     77c:	88 24       	eor	r8, r8
     77e:	29 89       	ldd	r18, Y+17	; 0x11
     780:	82 2f       	mov	r24, r18
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	b4 01       	movw	r22, r8
     786:	68 2b       	or	r22, r24
     788:	79 2b       	or	r23, r25
     78a:	64 19       	sub	r22, r4
     78c:	75 09       	sbc	r23, r5
     78e:	88 27       	eor	r24, r24
     790:	77 fd       	sbrc	r23, 7
     792:	80 95       	com	r24
     794:	98 2f       	mov	r25, r24
     796:	4b d4       	rcall	.+2198   	; 0x102e <__floatsisf>
     798:	9f 77       	andi	r25, 0x7F	; 127
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 ea       	ldi	r20, 0xA0	; 160
     7a0:	50 e4       	ldi	r21, 0x40	; 64
     7a2:	d1 d4       	rcall	.+2466   	; 0x1146 <__gesf2>
     7a4:	18 16       	cp	r1, r24
     7a6:	0c f4       	brge	.+2      	; 0x7aa <setPosition+0x162>
     7a8:	85 cf       	rjmp	.-246    	; 0x6b4 <setPosition+0x6c>
		return ODOMETRY_SUCCESS;
	}
}
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	66 96       	adiw	r28, 0x16	; 22
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	cf 91       	pop	r28
     7ba:	df 91       	pop	r29
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	ff 90       	pop	r15
     7c2:	ef 90       	pop	r14
     7c4:	df 90       	pop	r13
     7c6:	cf 90       	pop	r12
     7c8:	bf 90       	pop	r11
     7ca:	af 90       	pop	r10
     7cc:	9f 90       	pop	r9
     7ce:	8f 90       	pop	r8
     7d0:	7f 90       	pop	r7
     7d2:	6f 90       	pop	r6
     7d4:	5f 90       	pop	r5
     7d6:	4f 90       	pop	r4
     7d8:	3f 90       	pop	r3
     7da:	2f 90       	pop	r2
     7dc:	08 95       	ret

000007de <stop>:
#include <stdlib.h>
#include <util/delay.h>
#include <math.h>

char stop(char type)
{
     7de:	af 92       	push	r10
     7e0:	bf 92       	push	r11
     7e2:	cf 92       	push	r12
     7e4:	df 92       	push	r13
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	df 93       	push	r29
     7f0:	cf 93       	push	r28
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	28 97       	sbiw	r28, 0x08	; 8
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
     802:	b8 2e       	mov	r11, r24
     804:	0a ef       	ldi	r16, 0xFA	; 250
     806:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
		buffer[0] = type;
		
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     808:	7e 01       	movw	r14, r28
     80a:	08 94       	sec
     80c:	e1 1c       	adc	r14, r1
     80e:	f1 1c       	adc	r15, r1
     810:	0f 2e       	mov	r0, r31
     812:	f4 ef       	ldi	r31, 0xF4	; 244
     814:	cf 2e       	mov	r12, r31
     816:	f1 e0       	ldi	r31, 0x01	; 1
     818:	df 2e       	mov	r13, r31
     81a:	f0 2d       	mov	r31, r0
		_delay_ms(50);
		
		buffer[0] = 'P';
     81c:	0f 2e       	mov	r0, r31
     81e:	f0 e5       	ldi	r31, 0x50	; 80
     820:	af 2e       	mov	r10, r31
     822:	f0 2d       	mov	r31, r0
{
	unsigned char buffer[8];
	
	while(1)
	{
		buffer[0] = type;
     824:	b9 82       	std	Y+1, r11	; 0x01
     826:	07 c0       	rjmp	.+14     	; 0x836 <stop+0x58>
		
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     828:	96 01       	movw	r18, r12
     82a:	c8 01       	movw	r24, r16
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <stop+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     830:	21 50       	subi	r18, 0x01	; 1
     832:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     834:	d1 f7       	brne	.-12     	; 0x82a <stop+0x4c>
     836:	c7 01       	movw	r24, r14
     838:	63 ec       	ldi	r22, 0xC3	; 195
     83a:	86 dd       	rcall	.-1268   	; 0x348 <CAN_Write>
     83c:	88 23       	and	r24, r24
     83e:	a1 f7       	brne	.-24     	; 0x828 <stop+0x4a>
		_delay_ms(50);
		
		buffer[0] = 'P';
     840:	a9 82       	std	Y+1, r10	; 0x01
     842:	07 c0       	rjmp	.+14     	; 0x852 <stop+0x74>
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     844:	96 01       	movw	r18, r12
     846:	c8 01       	movw	r24, r16
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <stop+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     84c:	21 50       	subi	r18, 0x01	; 1
     84e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     850:	d1 f7       	brne	.-12     	; 0x846 <stop+0x68>
     852:	c7 01       	movw	r24, r14
     854:	63 ec       	ldi	r22, 0xC3	; 195
     856:	78 dd       	rcall	.-1296   	; 0x348 <CAN_Write>
     858:	88 23       	and	r24, r24
     85a:	a1 f7       	brne	.-24     	; 0x844 <stop+0x66>
		_delay_ms(50);
		CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
     85c:	c7 01       	movw	r24, r14
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	17 dd       	rcall	.-1490   	; 0x290 <CAN_Read>
		
		if(buffer[0] != MOVING && buffer[0] != ROTATING)
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	8d 34       	cpi	r24, 0x4D	; 77
     866:	f1 f2       	breq	.-68     	; 0x824 <stop+0x46>
     868:	82 35       	cpi	r24, 0x52	; 82
     86a:	e1 f2       	breq	.-72     	; 0x824 <stop+0x46>
		return ODOMETRY_SUCCESS;
	}
}
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	28 96       	adiw	r28, 0x08	; 8
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	cf 91       	pop	r28
     87c:	df 91       	pop	r29
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	bf 90       	pop	r11
     88c:	af 90       	pop	r10
     88e:	08 95       	ret

00000890 <gotoXY>:
		}
	}
}

char gotoXY(position coordinates, unsigned char speed, signed char direction, char (*callback)(unsigned long startTime))
{
     890:	2f 92       	push	r2
     892:	3f 92       	push	r3
     894:	4f 92       	push	r4
     896:	5f 92       	push	r5
     898:	7f 92       	push	r7
     89a:	8f 92       	push	r8
     89c:	9f 92       	push	r9
     89e:	af 92       	push	r10
     8a0:	bf 92       	push	r11
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	df 93       	push	r29
     8b0:	cf 93       	push	r28
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	2e 97       	sbiw	r28, 0x0e	; 14
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	49 87       	std	Y+9, r20	; 0x09
     8c4:	5a 87       	std	Y+10, r21	; 0x0a
     8c6:	6b 87       	std	Y+11, r22	; 0x0b
     8c8:	7c 87       	std	Y+12, r23	; 0x0c
     8ca:	8d 87       	std	Y+13, r24	; 0x0d
     8cc:	9e 87       	std	Y+14, r25	; 0x0e
     8ce:	70 2e       	mov	r7, r16
     8d0:	27 01       	movw	r4, r14
     8d2:	c9 84       	ldd	r12, Y+9	; 0x09
     8d4:	da 84       	ldd	r13, Y+10	; 0x0a
     8d6:	eb 84       	ldd	r14, Y+11	; 0x0b
     8d8:	fc 84       	ldd	r15, Y+12	; 0x0c
	unsigned char buffer[8], callbackReturnValue;
	unsigned long time;
	
	buffer[0] = 'V';
     8da:	86 e5       	ldi	r24, 0x56	; 86
     8dc:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = speed;
     8de:	2a 83       	std	Y+2, r18	; 0x02
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     8e0:	5e 01       	movw	r10, r28
     8e2:	08 94       	sec
     8e4:	a1 1c       	adc	r10, r1
     8e6:	b1 1c       	adc	r11, r1
     8e8:	0f 2e       	mov	r0, r31
     8ea:	f4 ef       	ldi	r31, 0xF4	; 244
     8ec:	8f 2e       	mov	r8, r31
     8ee:	f1 e0       	ldi	r31, 0x01	; 1
     8f0:	9f 2e       	mov	r9, r31
     8f2:	f0 2d       	mov	r31, r0
     8f4:	0a ef       	ldi	r16, 0xFA	; 250
     8f6:	10 e0       	ldi	r17, 0x00	; 0
     8f8:	07 c0       	rjmp	.+14     	; 0x908 <gotoXY+0x78>
     8fa:	94 01       	movw	r18, r8
     8fc:	c8 01       	movw	r24, r16
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <gotoXY+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     902:	21 50       	subi	r18, 0x01	; 1
     904:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     906:	d1 f7       	brne	.-12     	; 0x8fc <gotoXY+0x6c>
     908:	c5 01       	movw	r24, r10
     90a:	63 ec       	ldi	r22, 0xC3	; 195
     90c:	1d dd       	rcall	.-1478   	; 0x348 <CAN_Write>
     90e:	88 23       	and	r24, r24
     910:	a1 f7       	brne	.-24     	; 0x8fa <gotoXY+0x6a>
	_delay_ms(50);
	
	buffer[0] = 'G';
     912:	87 e4       	ldi	r24, 0x47	; 71
     914:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = coordinates.x >> 8;
     916:	8d 2d       	mov	r24, r13
     918:	99 27       	eor	r25, r25
     91a:	87 fd       	sbrc	r24, 7
     91c:	9a 95       	dec	r25
     91e:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = coordinates.x & 0XFF;
     920:	cb 82       	std	Y+3, r12	; 0x03
	buffer[3] = coordinates.y >> 8;
     922:	8f 2d       	mov	r24, r15
     924:	99 27       	eor	r25, r25
     926:	87 fd       	sbrc	r24, 7
     928:	9a 95       	dec	r25
     92a:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = coordinates.y & 0XFF;
     92c:	ed 82       	std	Y+5, r14	; 0x05
	buffer[5] = 0;//Mozda ne treba 0
     92e:	1e 82       	std	Y+6, r1	; 0x06
	buffer[6] = direction;
     930:	7f 82       	std	Y+7, r7	; 0x07
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     932:	7e 01       	movw	r14, r28
     934:	08 94       	sec
     936:	e1 1c       	adc	r14, r1
     938:	f1 1c       	adc	r15, r1
     93a:	0f 2e       	mov	r0, r31
     93c:	f4 ef       	ldi	r31, 0xF4	; 244
     93e:	cf 2e       	mov	r12, r31
     940:	f1 e0       	ldi	r31, 0x01	; 1
     942:	df 2e       	mov	r13, r31
     944:	f0 2d       	mov	r31, r0
     946:	0a ef       	ldi	r16, 0xFA	; 250
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	07 c0       	rjmp	.+14     	; 0x95a <gotoXY+0xca>
     94c:	96 01       	movw	r18, r12
     94e:	c8 01       	movw	r24, r16
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <gotoXY+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     954:	21 50       	subi	r18, 0x01	; 1
     956:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     958:	d1 f7       	brne	.-12     	; 0x94e <gotoXY+0xbe>
     95a:	c7 01       	movw	r24, r14
     95c:	63 ec       	ldi	r22, 0xC3	; 195
     95e:	f4 dc       	rcall	.-1560   	; 0x348 <CAN_Write>
     960:	88 23       	and	r24, r24
     962:	a1 f7       	brne	.-24     	; 0x94c <gotoXY+0xbc>
	_delay_ms(50);
	
	time = getSystemTime();
     964:	3d d1       	rcall	.+634    	; 0xbe0 <getSystemTime>
     966:	4c 01       	movw	r8, r24
     968:	aa 24       	eor	r10, r10
     96a:	97 fc       	sbrc	r9, 7
     96c:	a0 94       	com	r10
     96e:	ba 2c       	mov	r11, r10
	while (1)
	{
		buffer[0] = 'P';
     970:	0f 2e       	mov	r0, r31
     972:	f0 e5       	ldi	r31, 0x50	; 80
     974:	7f 2e       	mov	r7, r31
     976:	f0 2d       	mov	r31, r0
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     978:	0f 2e       	mov	r0, r31
     97a:	f4 ef       	ldi	r31, 0xF4	; 244
     97c:	2f 2e       	mov	r2, r31
     97e:	f1 e0       	ldi	r31, 0x01	; 1
     980:	3f 2e       	mov	r3, r31
     982:	f0 2d       	mov	r31, r0
     984:	0a ef       	ldi	r16, 0xFA	; 250
     986:	10 e0       	ldi	r17, 0x00	; 0
     988:	7e 01       	movw	r14, r28
     98a:	08 94       	sec
     98c:	e1 1c       	adc	r14, r1
     98e:	f1 1c       	adc	r15, r1
     990:	c1 01       	movw	r24, r2
     992:	d2 2c       	mov	r13, r2
     994:	c9 2e       	mov	r12, r25
	_delay_ms(50);
	
	time = getSystemTime();
	while (1)
	{
		buffer[0] = 'P';
     996:	79 82       	std	Y+1, r7	; 0x01
     998:	07 c0       	rjmp	.+14     	; 0x9a8 <gotoXY+0x118>
		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     99a:	8d 2d       	mov	r24, r13
     99c:	9c 2d       	mov	r25, r12
     99e:	f8 01       	movw	r30, r16
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	f1 f7       	brne	.-4      	; 0x9a0 <gotoXY+0x110>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9a6:	d9 f7       	brne	.-10     	; 0x99e <gotoXY+0x10e>
     9a8:	c7 01       	movw	r24, r14
     9aa:	63 ec       	ldi	r22, 0xC3	; 195
     9ac:	cd dc       	rcall	.-1638   	; 0x348 <CAN_Write>
     9ae:	88 23       	and	r24, r24
     9b0:	a1 f7       	brne	.-24     	; 0x99a <gotoXY+0x10a>
		_delay_ms(50);
		CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
     9b2:	c7 01       	movw	r24, r14
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	6c dc       	rcall	.-1832   	; 0x290 <CAN_Read>
		
		if(buffer[0] == IDLE)
     9b8:	49 81       	ldd	r20, Y+1	; 0x01
     9ba:	49 34       	cpi	r20, 0x49	; 73
     9bc:	11 f4       	brne	.+4      	; 0x9c2 <gotoXY+0x132>
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	1d c0       	rjmp	.+58     	; 0x9fc <gotoXY+0x16c>
		return ODOMETRY_SUCCESS;
		else if(buffer[0] == STUCK)
     9c2:	43 35       	cpi	r20, 0x53	; 83
     9c4:	11 f4       	brne	.+4      	; 0x9ca <gotoXY+0x13a>
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	19 c0       	rjmp	.+50     	; 0x9fc <gotoXY+0x16c>
		return ODOMETRY_STUCK;
		else if(buffer[0] == ERROR)
     9ca:	45 34       	cpi	r20, 0x45	; 69
     9cc:	b1 f0       	breq	.+44     	; 0x9fa <gotoXY+0x16a>
     9ce:	91 01       	movw	r18, r2
     9d0:	c8 01       	movw	r24, r16
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <gotoXY+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9d6:	21 50       	subi	r18, 0x01	; 1
     9d8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9da:	d1 f7       	brne	.-12     	; 0x9d0 <gotoXY+0x140>
		return ODOMETRY_FAIL;
		
		_delay_ms(50);
		if(buffer[0] != 'R' && callback != NULL)
     9dc:	42 35       	cpi	r20, 0x52	; 82
     9de:	d9 f2       	breq	.-74     	; 0x996 <gotoXY+0x106>
     9e0:	41 14       	cp	r4, r1
     9e2:	51 04       	cpc	r5, r1
     9e4:	c1 f2       	breq	.-80     	; 0x996 <gotoXY+0x106>
		{
			callbackReturnValue = callback(time);
     9e6:	c5 01       	movw	r24, r10
     9e8:	b4 01       	movw	r22, r8
     9ea:	f2 01       	movw	r30, r4
     9ec:	09 95       	icall
			if(callbackReturnValue == 1)
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	21 f0       	breq	.+8      	; 0x9fa <gotoXY+0x16a>
			return ODOMETRY_FAIL;
			if(callbackReturnValue == 2)
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	81 f6       	brne	.-96     	; 0x996 <gotoXY+0x106>
     9f6:	83 e0       	ldi	r24, 0x03	; 3
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <gotoXY+0x16c>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
			return ODOMETRY_CALLBACK_RETURN;
		}
	}
}
     9fc:	2e 96       	adiw	r28, 0x0e	; 14
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	cf 91       	pop	r28
     a0a:	df 91       	pop	r29
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	bf 90       	pop	r11
     a1a:	af 90       	pop	r10
     a1c:	9f 90       	pop	r9
     a1e:	8f 90       	pop	r8
     a20:	7f 90       	pop	r7
     a22:	5f 90       	pop	r5
     a24:	4f 90       	pop	r4
     a26:	3f 90       	pop	r3
     a28:	2f 90       	pop	r2
     a2a:	08 95       	ret

00000a2c <purpleSide>:

/*************************************************************************************************************************************************************************************
																				ZELENA STRANA
*************************************************************************************************************************************************************************************/
void purpleSide(void)
{
     a2c:	2f 92       	push	r2
     a2e:	3f 92       	push	r3
     a30:	4f 92       	push	r4
     a32:	5f 92       	push	r5
     a34:	6f 92       	push	r6
     a36:	7f 92       	push	r7
     a38:	8f 92       	push	r8
     a3a:	9f 92       	push	r9
     a3c:	af 92       	push	r10
     a3e:	bf 92       	push	r11
     a40:	cf 92       	push	r12
     a42:	df 92       	push	r13
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	df 93       	push	r29
     a4e:	cf 93       	push	r28
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	27 97       	sbiw	r28, 0x07	; 7
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
	position startingPosition;
	unsigned char currentPosition = 0, nextPosition = 0, odometryStatus;
	unsigned char activeState = TACTIC_ONE;
	
	//namestiti startingposition
	startingPosition.x = 0;
     a60:	1a 82       	std	Y+2, r1	; 0x02
     a62:	19 82       	std	Y+1, r1	; 0x01
	startingPosition.y = 0;
     a64:	1c 82       	std	Y+4, r1	; 0x04
     a66:	1b 82       	std	Y+3, r1	; 0x03
	startingPosition.angle = 0;
     a68:	1e 82       	std	Y+6, r1	; 0x06
     a6a:	1d 82       	std	Y+5, r1	; 0x05
	setPosition(startingPosition);
     a6c:	49 81       	ldd	r20, Y+1	; 0x01
     a6e:	5a 81       	ldd	r21, Y+2	; 0x02
     a70:	6b 81       	ldd	r22, Y+3	; 0x03
     a72:	7c 81       	ldd	r23, Y+4	; 0x04
     a74:	8d 81       	ldd	r24, Y+5	; 0x05
     a76:	9e 81       	ldd	r25, Y+6	; 0x06
     a78:	e7 dd       	rcall	.-1074   	; 0x648 <setPosition>
				nextPosition = currentPosition;
				break;
			case TACTIC_ONE:
				for(currentPosition = nextPosition;currentPosition < TACTIC_ONE_POSITION_COUNT; currentPosition++)
				{
					odometryStatus = gotoXY(purpleSideTacticOnePositions[currentPosition].point, purpleSideTacticOnePositions[currentPosition].speed,
     a7a:	ac e0       	ldi	r26, 0x0C	; 12
     a7c:	b1 e0       	ldi	r27, 0x01	; 1
     a7e:	fd 01       	movw	r30, r26
     a80:	81 91       	ld	r24, Z+
     a82:	8f 83       	std	Y+7, r24	; 0x07
     a84:	10 81       	ld	r17, Z
     a86:	12 96       	adiw	r26, 0x02	; 2
     a88:	ad 90       	ld	r10, X+
     a8a:	bc 90       	ld	r11, X
     a8c:	13 97       	sbiw	r26, 0x03	; 3
     a8e:	41 e0       	ldi	r20, 0x01	; 1
     a90:	70 90 06 01 	lds	r7, 0x0106
     a94:	60 90 07 01 	lds	r6, 0x0107
     a98:	50 90 08 01 	lds	r5, 0x0108
     a9c:	40 90 09 01 	lds	r4, 0x0109
     aa0:	30 90 0a 01 	lds	r3, 0x010A
     aa4:	20 90 0b 01 	lds	r2, 0x010B
	startingPosition.angle = 0;
	setPosition(startingPosition);
	
	while (1)
	{
		switch(activeState)
     aa8:	0f 2e       	mov	r0, r31
     aaa:	f0 e1       	ldi	r31, 0x10	; 16
     aac:	8f 2e       	mov	r8, r31
     aae:	f7 e2       	ldi	r31, 0x27	; 39
     ab0:	9f 2e       	mov	r9, r31
     ab2:	f0 2d       	mov	r31, r0
     ab4:	0f 2e       	mov	r0, r31
     ab6:	fa ef       	ldi	r31, 0xFA	; 250
     ab8:	cf 2e       	mov	r12, r31
     aba:	dd 24       	eor	r13, r13
     abc:	f0 2d       	mov	r31, r0
     abe:	42 30       	cpi	r20, 0x02	; 2
     ac0:	19 f0       	breq	.+6      	; 0xac8 <purpleSide+0x9c>
     ac2:	41 30       	cpi	r20, 0x01	; 1
     ac4:	e1 f7       	brne	.-8      	; 0xabe <purpleSide+0x92>
     ac6:	08 c0       	rjmp	.+16     	; 0xad8 <purpleSide+0xac>
     ac8:	94 01       	movw	r18, r8
     aca:	c6 01       	movw	r24, r12
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <purpleSide+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ad0:	21 50       	subi	r18, 0x01	; 1
     ad2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad4:	d1 f7       	brne	.-12     	; 0xaca <purpleSide+0x9e>
     ad6:	f3 cf       	rjmp	.-26     	; 0xabe <purpleSide+0x92>
				nextPosition = currentPosition;
				break;
			case TACTIC_ONE:
				for(currentPosition = nextPosition;currentPosition < TACTIC_ONE_POSITION_COUNT; currentPosition++)
				{
					odometryStatus = gotoXY(purpleSideTacticOnePositions[currentPosition].point, purpleSideTacticOnePositions[currentPosition].speed,
     ad8:	47 2d       	mov	r20, r7
     ada:	56 2d       	mov	r21, r6
     adc:	65 2d       	mov	r22, r5
     ade:	74 2d       	mov	r23, r4
     ae0:	83 2d       	mov	r24, r3
     ae2:	92 2d       	mov	r25, r2
     ae4:	2f 81       	ldd	r18, Y+7	; 0x07
     ae6:	01 2f       	mov	r16, r17
     ae8:	75 01       	movw	r14, r10
     aea:	d2 de       	rcall	.-604    	; 0x890 <gotoXY>
     aec:	42 e0       	ldi	r20, 0x02	; 2
     aee:	e7 cf       	rjmp	.-50     	; 0xabe <purpleSide+0x92>

00000af0 <GPIO_ReadFromRegister>:

unsigned char GPIO_ReadFromRegister(unsigned char pinHandler)
{
	unsigned char state = 0;

	state = ((_MMIO_BYTE(gpios[pinHandler]->baseAddress - 2)) >> (gpios[pinHandler]->pinPosition)) & 0x01;
     af0:	e8 2f       	mov	r30, r24
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	eb 5b       	subi	r30, 0xBB	; 187
     afa:	fe 4f       	sbci	r31, 0xFE	; 254
     afc:	a0 81       	ld	r26, Z
     afe:	b1 81       	ldd	r27, Z+1	; 0x01
     b00:	ed 91       	ld	r30, X+
     b02:	fc 91       	ld	r31, X
     b04:	11 97       	sbiw	r26, 0x01	; 1
     b06:	32 97       	sbiw	r30, 0x02	; 2
     b08:	80 81       	ld	r24, Z
     b0a:	12 96       	adiw	r26, 0x02	; 2
     b0c:	2c 91       	ld	r18, X
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <GPIO_ReadFromRegister+0x26>
     b12:	95 95       	asr	r25
     b14:	87 95       	ror	r24
     b16:	2a 95       	dec	r18
     b18:	e2 f7       	brpl	.-8      	; 0xb12 <GPIO_ReadFromRegister+0x22>

	return state;
}
     b1a:	81 70       	andi	r24, 0x01	; 1
     b1c:	08 95       	ret

00000b1e <fillDebaunsingData>:

void fillDebaunsingData(void)
{
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
	unsigned char i;
	static char j = 0;

	if(++j >= 3)
     b2c:	80 91 44 01 	lds	r24, 0x0144
     b30:	8f 5f       	subi	r24, 0xFF	; 255
     b32:	80 93 44 01 	sts	0x0144, r24
     b36:	83 30       	cpi	r24, 0x03	; 3
     b38:	10 f0       	brcs	.+4      	; 0xb3e <fillDebaunsingData+0x20>
		j = 0;
     b3a:	10 92 44 01 	sts	0x0144, r1

	for(i = 0; i < inputsNumber; ++i)
     b3e:	80 91 43 01 	lds	r24, 0x0143
     b42:	88 23       	and	r24, r24
     b44:	09 f1       	breq	.+66     	; 0xb88 <fillDebaunsingData+0x6a>
		gpios[i]->buffer[j] = GPIO_ReadFromRegister(i);
     b46:	80 91 44 01 	lds	r24, 0x0144
     b4a:	c8 2f       	mov	r28, r24
     b4c:	d0 e0       	ldi	r29, 0x00	; 0
     b4e:	ff 24       	eor	r15, r15
     b50:	0f 2e       	mov	r0, r31
     b52:	f5 e4       	ldi	r31, 0x45	; 69
     b54:	cf 2e       	mov	r12, r31
     b56:	f1 e0       	ldi	r31, 0x01	; 1
     b58:	df 2e       	mov	r13, r31
     b5a:	f0 2d       	mov	r31, r0
     b5c:	8f 2d       	mov	r24, r15
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	f6 01       	movw	r30, r12
     b66:	e8 0f       	add	r30, r24
     b68:	f9 1f       	adc	r31, r25
     b6a:	00 81       	ld	r16, Z
     b6c:	11 81       	ldd	r17, Z+1	; 0x01
     b6e:	8f 2d       	mov	r24, r15
     b70:	bf df       	rcall	.-130    	; 0xaf0 <GPIO_ReadFromRegister>
     b72:	0c 0f       	add	r16, r28
     b74:	1d 1f       	adc	r17, r29
     b76:	0d 5f       	subi	r16, 0xFD	; 253
     b78:	1f 4f       	sbci	r17, 0xFF	; 255
     b7a:	f8 01       	movw	r30, r16
     b7c:	80 83       	st	Z, r24
	static char j = 0;

	if(++j >= 3)
		j = 0;

	for(i = 0; i < inputsNumber; ++i)
     b7e:	f3 94       	inc	r15
     b80:	80 91 43 01 	lds	r24, 0x0143
     b84:	f8 16       	cp	r15, r24
     b86:	50 f3       	brcs	.-44     	; 0xb5c <fillDebaunsingData+0x3e>
		gpios[i]->buffer[j] = GPIO_ReadFromRegister(i);
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	08 95       	ret

00000b98 <Timer_Init>:

void Timer_Init(unsigned int freq)
{
    TCCR1A = 0;
     b98:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
     b9c:	29 e0       	ldi	r18, 0x09	; 9
     b9e:	20 93 81 00 	sts	0x0081, r18
	OCR1A = (double)F_CPU / freq + 0.5;
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	bc 01       	movw	r22, r24
     ba8:	cd 01       	movw	r24, r26
     baa:	3f d2       	rcall	.+1150   	; 0x102a <__floatunsisf>
     bac:	9b 01       	movw	r18, r22
     bae:	ac 01       	movw	r20, r24
     bb0:	60 e8       	ldi	r22, 0x80	; 128
     bb2:	76 e9       	ldi	r23, 0x96	; 150
     bb4:	88 e1       	ldi	r24, 0x18	; 24
     bb6:	9b e4       	ldi	r25, 0x4B	; 75
     bb8:	a4 d1       	rcall	.+840    	; 0xf02 <__divsf3>
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	3b d1       	rcall	.+630    	; 0xe3a <__addsf3>
     bc4:	06 d2       	rcall	.+1036   	; 0xfd2 <__fixunssfsi>
     bc6:	70 93 89 00 	sts	0x0089, r23
     bca:	60 93 88 00 	sts	0x0088, r22
	TIMSK1 = 1 << OCIE1A;
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	80 93 6f 00 	sts	0x006F, r24

	SREG |= 0x80;
     bd4:	ef e5       	ldi	r30, 0x5F	; 95
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	80 68       	ori	r24, 0x80	; 128
     bdc:	80 83       	st	Z, r24
}
     bde:	08 95       	ret

00000be0 <getSystemTime>:
	systemTime = 0;
	matchStarted = 1;
}
unsigned long getSystemTime(void)
{
	return systemTime;
     be0:	20 91 6d 01 	lds	r18, 0x016D
     be4:	30 91 6e 01 	lds	r19, 0x016E
     be8:	40 91 6f 01 	lds	r20, 0x016F
     bec:	50 91 70 01 	lds	r21, 0x0170
}
     bf0:	62 2f       	mov	r22, r18
     bf2:	73 2f       	mov	r23, r19
     bf4:	84 2f       	mov	r24, r20
     bf6:	95 2f       	mov	r25, r21
     bf8:	08 95       	ret

00000bfa <jumperCheck>:
	{
		return 1;
	}
	
	return 0;*/
}
     bfa:	08 95       	ret

00000bfc <matchIsStarted>:
	
	return 0;
}
unsigned char matchIsStarted(void)
{
	return matchStarted;
     bfc:	80 91 42 01 	lds	r24, 0x0142
}
     c00:	08 95       	ret

00000c02 <SystemInit>:
}

void SystemInit(void)
{	
	//_delay_ms(1000);
	servo_init(50);
     c02:	82 e3       	ldi	r24, 0x32	; 50
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	65 da       	rcall	.-2870   	; 0xd2 <servo_init>
	
	Timer_Init(1000);
     c08:	88 ee       	ldi	r24, 0xE8	; 232
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	c5 df       	rcall	.-118    	; 0xb98 <Timer_Init>
	CAN_Init(4);
     c0e:	84 e0       	ldi	r24, 0x04	; 4
     c10:	e3 db       	rcall	.-2106   	; 0x3d8 <CAN_Init>
	
	
	//logger("Initializing digital inputs...\n\r");
	//forwardUpperLeftSensor = GPIO_PinRegister(GPIOA_BASE, 4);//prednji gornji levi senzor za detekciju protivnika		//radi
	
	while(jumperCheck() == 1);
     c12:	f3 df       	rcall	.-26     	; 0xbfa <jumperCheck>
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	61 f0       	breq	.+24     	; 0xc30 <SystemInit+0x2e>
	systemTime = 0;
     c18:	10 92 6d 01 	sts	0x016D, r1
     c1c:	10 92 6e 01 	sts	0x016E, r1
     c20:	10 92 6f 01 	sts	0x016F, r1
     c24:	10 92 70 01 	sts	0x0170, r1
	matchStarted = 1;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 42 01 	sts	0x0142, r24
}
     c2e:	08 95       	ret
     c30:	ff cf       	rjmp	.-2      	; 0xc30 <SystemInit+0x2e>

00000c32 <__vector_12>:
	SREG |= 0x80;
}


ISR(TIMER1_COMPA_vect)
{
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	0b b6       	in	r0, 0x3b	; 59
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
	fillDebaunsingData();
     c58:	62 df       	rcall	.-316    	; 0xb1e <fillDebaunsingData>
    #if USE_TIMER_HOOK == 1
    TimerHook();
     c5a:	e9 dc       	rcall	.-1582   	; 0x62e <TimerHook>
    #endif // USE_TIMER_HOOK
	systemTime++;
     c5c:	80 91 6d 01 	lds	r24, 0x016D
     c60:	90 91 6e 01 	lds	r25, 0x016E
     c64:	a0 91 6f 01 	lds	r26, 0x016F
     c68:	b0 91 70 01 	lds	r27, 0x0170
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	a1 1d       	adc	r26, r1
     c70:	b1 1d       	adc	r27, r1
     c72:	80 93 6d 01 	sts	0x016D, r24
     c76:	90 93 6e 01 	sts	0x016E, r25
     c7a:	a0 93 6f 01 	sts	0x016F, r26
     c7e:	b0 93 70 01 	sts	0x0170, r27
}
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	0f 90       	pop	r0
     c9c:	0b be       	out	0x3b, r0	; 59
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	0b b6       	in	r0, 0x3b	; 59
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	8f 93       	push	r24
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
	if(tx0_counter)
     cbc:	80 91 77 01 	lds	r24, 0x0177
     cc0:	88 23       	and	r24, r24
     cc2:	c9 f0       	breq	.+50     	; 0xcf6 <__vector_23+0x4e>
	{
		tx0_counter--;
     cc4:	80 91 77 01 	lds	r24, 0x0177
     cc8:	81 50       	subi	r24, 0x01	; 1
     cca:	80 93 77 01 	sts	0x0177, r24
		UDR0 = tx0_buffer[tx0_rd_index];
     cce:	80 91 78 01 	lds	r24, 0x0178
     cd2:	e9 e7       	ldi	r30, 0x79	; 121
     cd4:	f1 e0       	ldi	r31, 0x01	; 1
     cd6:	e8 0f       	add	r30, r24
     cd8:	f1 1d       	adc	r31, r1
     cda:	80 81       	ld	r24, Z
     cdc:	80 93 c6 00 	sts	0x00C6, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
     ce0:	80 91 78 01 	lds	r24, 0x0178
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	80 93 78 01 	sts	0x0178, r24
     cea:	80 91 78 01 	lds	r24, 0x0178
     cee:	80 34       	cpi	r24, 0x40	; 64
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <__vector_23+0x4e>
			tx0_rd_index = 0;	
     cf2:	10 92 78 01 	sts	0x0178, r1
	}	
}
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	8f 91       	pop	r24
     cfc:	0f 90       	pop	r0
     cfe:	0b be       	out	0x3b, r0	; 59
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	0f 90       	pop	r0
     d06:	1f 90       	pop	r1
     d08:	18 95       	reti

00000d0a <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	0b b6       	in	r0, 0x3b	; 59
     d14:	0f 92       	push	r0
     d16:	11 24       	eor	r1, r1
     d18:	8f 93       	push	r24
     d1a:	9f 93       	push	r25
     d1c:	ef 93       	push	r30
     d1e:	ff 93       	push	r31
	unsigned char status;
	status = UCSR0A;
     d20:	80 91 c0 00 	lds	r24, 0x00C0

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))	
     d24:	8c 71       	andi	r24, 0x1C	; 28
     d26:	c9 f4       	brne	.+50     	; 0xd5a <__vector_21+0x50>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
     d28:	80 91 76 01 	lds	r24, 0x0176
     d2c:	90 91 c6 00 	lds	r25, 0x00C6
     d30:	e9 eb       	ldi	r30, 0xB9	; 185
     d32:	f1 e0       	ldi	r31, 0x01	; 1
     d34:	e8 0f       	add	r30, r24
     d36:	f1 1d       	adc	r31, r1
     d38:	90 83       	st	Z, r25
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
     d3a:	80 91 76 01 	lds	r24, 0x0176
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	80 93 76 01 	sts	0x0176, r24
     d44:	80 91 76 01 	lds	r24, 0x0176
     d48:	80 34       	cpi	r24, 0x40	; 64
     d4a:	11 f4       	brne	.+4      	; 0xd50 <__vector_21+0x46>
			rx0_wr_index = 0;
     d4c:	10 92 76 01 	sts	0x0176, r1
			
		rx0_counter++;
     d50:	80 91 75 01 	lds	r24, 0x0175
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	80 93 75 01 	sts	0x0175, r24
	}
}
     d5a:	ff 91       	pop	r31
     d5c:	ef 91       	pop	r30
     d5e:	9f 91       	pop	r25
     d60:	8f 91       	pop	r24
     d62:	0f 90       	pop	r0
     d64:	0b be       	out	0x3b, r0	; 59
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
     d70:	1f 92       	push	r1
     d72:	0f 92       	push	r0
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	0f 92       	push	r0
     d78:	0b b6       	in	r0, 0x3b	; 59
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	8f 93       	push	r24
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
	if(tx1_counter)
     d84:	80 91 72 01 	lds	r24, 0x0172
     d88:	88 23       	and	r24, r24
     d8a:	c9 f0       	breq	.+50     	; 0xdbe <__vector_34+0x4e>
	{
		tx1_counter--;
     d8c:	80 91 72 01 	lds	r24, 0x0172
     d90:	81 50       	subi	r24, 0x01	; 1
     d92:	80 93 72 01 	sts	0x0172, r24
		UDR1=tx1_buffer[tx1_rd_index];
     d96:	80 91 74 01 	lds	r24, 0x0174
     d9a:	e9 ef       	ldi	r30, 0xF9	; 249
     d9c:	f1 e0       	ldi	r31, 0x01	; 1
     d9e:	e8 0f       	add	r30, r24
     da0:	f1 1d       	adc	r31, r1
     da2:	80 81       	ld	r24, Z
     da4:	80 93 ce 00 	sts	0x00CE, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
     da8:	80 91 74 01 	lds	r24, 0x0174
     dac:	8f 5f       	subi	r24, 0xFF	; 255
     dae:	80 93 74 01 	sts	0x0174, r24
     db2:	80 91 74 01 	lds	r24, 0x0174
     db6:	80 34       	cpi	r24, 0x40	; 64
     db8:	11 f4       	brne	.+4      	; 0xdbe <__vector_34+0x4e>
			tx1_rd_index = 0;	
     dba:	10 92 74 01 	sts	0x0174, r1
	}	
}
     dbe:	ff 91       	pop	r31
     dc0:	ef 91       	pop	r30
     dc2:	8f 91       	pop	r24
     dc4:	0f 90       	pop	r0
     dc6:	0b be       	out	0x3b, r0	; 59
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <__vector_32>:

ISR(USART1_RX_vect)
{
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	0b b6       	in	r0, 0x3b	; 59
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	8f 93       	push	r24
     de2:	9f 93       	push	r25
     de4:	ef 93       	push	r30
     de6:	ff 93       	push	r31
	unsigned char status;
	status = UCSR1A;
     de8:	80 91 c8 00 	lds	r24, 0x00C8

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
     dec:	8c 71       	andi	r24, 0x1C	; 28
     dee:	c9 f4       	brne	.+50     	; 0xe22 <__vector_32+0x50>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
     df0:	80 91 73 01 	lds	r24, 0x0173
     df4:	90 91 ce 00 	lds	r25, 0x00CE
     df8:	e9 e3       	ldi	r30, 0x39	; 57
     dfa:	f2 e0       	ldi	r31, 0x02	; 2
     dfc:	e8 0f       	add	r30, r24
     dfe:	f1 1d       	adc	r31, r1
     e00:	90 83       	st	Z, r25
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
     e02:	80 91 73 01 	lds	r24, 0x0173
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	80 93 73 01 	sts	0x0173, r24
     e0c:	80 91 73 01 	lds	r24, 0x0173
     e10:	80 34       	cpi	r24, 0x40	; 64
     e12:	11 f4       	brne	.+4      	; 0xe18 <__vector_32+0x46>
		rx1_wr_index = 0;
     e14:	10 92 73 01 	sts	0x0173, r1
		
		rx1_counter++;
     e18:	80 91 71 01 	lds	r24, 0x0171
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	80 93 71 01 	sts	0x0171, r24
	}
}
     e22:	ff 91       	pop	r31
     e24:	ef 91       	pop	r30
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	0f 90       	pop	r0
     e2c:	0b be       	out	0x3b, r0	; 59
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <__subsf3>:
     e38:	50 58       	subi	r21, 0x80	; 128

00000e3a <__addsf3>:
     e3a:	bb 27       	eor	r27, r27
     e3c:	aa 27       	eor	r26, r26
     e3e:	0e d0       	rcall	.+28     	; 0xe5c <__addsf3x>
     e40:	48 c1       	rjmp	.+656    	; 0x10d2 <__fp_round>
     e42:	39 d1       	rcall	.+626    	; 0x10b6 <__fp_pscA>
     e44:	30 f0       	brcs	.+12     	; 0xe52 <__addsf3+0x18>
     e46:	3e d1       	rcall	.+636    	; 0x10c4 <__fp_pscB>
     e48:	20 f0       	brcs	.+8      	; 0xe52 <__addsf3+0x18>
     e4a:	31 f4       	brne	.+12     	; 0xe58 <__addsf3+0x1e>
     e4c:	9f 3f       	cpi	r25, 0xFF	; 255
     e4e:	11 f4       	brne	.+4      	; 0xe54 <__addsf3+0x1a>
     e50:	1e f4       	brtc	.+6      	; 0xe58 <__addsf3+0x1e>
     e52:	2e c1       	rjmp	.+604    	; 0x10b0 <__fp_nan>
     e54:	0e f4       	brtc	.+2      	; 0xe58 <__addsf3+0x1e>
     e56:	e0 95       	com	r30
     e58:	e7 fb       	bst	r30, 7
     e5a:	24 c1       	rjmp	.+584    	; 0x10a4 <__fp_inf>

00000e5c <__addsf3x>:
     e5c:	e9 2f       	mov	r30, r25
     e5e:	4a d1       	rcall	.+660    	; 0x10f4 <__fp_split3>
     e60:	80 f3       	brcs	.-32     	; 0xe42 <__addsf3+0x8>
     e62:	ba 17       	cp	r27, r26
     e64:	62 07       	cpc	r22, r18
     e66:	73 07       	cpc	r23, r19
     e68:	84 07       	cpc	r24, r20
     e6a:	95 07       	cpc	r25, r21
     e6c:	18 f0       	brcs	.+6      	; 0xe74 <__addsf3x+0x18>
     e6e:	71 f4       	brne	.+28     	; 0xe8c <__addsf3x+0x30>
     e70:	9e f5       	brtc	.+102    	; 0xed8 <__addsf3x+0x7c>
     e72:	62 c1       	rjmp	.+708    	; 0x1138 <__fp_zero>
     e74:	0e f4       	brtc	.+2      	; 0xe78 <__addsf3x+0x1c>
     e76:	e0 95       	com	r30
     e78:	0b 2e       	mov	r0, r27
     e7a:	ba 2f       	mov	r27, r26
     e7c:	a0 2d       	mov	r26, r0
     e7e:	0b 01       	movw	r0, r22
     e80:	b9 01       	movw	r22, r18
     e82:	90 01       	movw	r18, r0
     e84:	0c 01       	movw	r0, r24
     e86:	ca 01       	movw	r24, r20
     e88:	a0 01       	movw	r20, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	ff 27       	eor	r31, r31
     e8e:	59 1b       	sub	r21, r25
     e90:	99 f0       	breq	.+38     	; 0xeb8 <__addsf3x+0x5c>
     e92:	59 3f       	cpi	r21, 0xF9	; 249
     e94:	50 f4       	brcc	.+20     	; 0xeaa <__addsf3x+0x4e>
     e96:	50 3e       	cpi	r21, 0xE0	; 224
     e98:	68 f1       	brcs	.+90     	; 0xef4 <__addsf3x+0x98>
     e9a:	1a 16       	cp	r1, r26
     e9c:	f0 40       	sbci	r31, 0x00	; 0
     e9e:	a2 2f       	mov	r26, r18
     ea0:	23 2f       	mov	r18, r19
     ea2:	34 2f       	mov	r19, r20
     ea4:	44 27       	eor	r20, r20
     ea6:	58 5f       	subi	r21, 0xF8	; 248
     ea8:	f3 cf       	rjmp	.-26     	; 0xe90 <__addsf3x+0x34>
     eaa:	46 95       	lsr	r20
     eac:	37 95       	ror	r19
     eae:	27 95       	ror	r18
     eb0:	a7 95       	ror	r26
     eb2:	f0 40       	sbci	r31, 0x00	; 0
     eb4:	53 95       	inc	r21
     eb6:	c9 f7       	brne	.-14     	; 0xeaa <__addsf3x+0x4e>
     eb8:	7e f4       	brtc	.+30     	; 0xed8 <__addsf3x+0x7c>
     eba:	1f 16       	cp	r1, r31
     ebc:	ba 0b       	sbc	r27, r26
     ebe:	62 0b       	sbc	r22, r18
     ec0:	73 0b       	sbc	r23, r19
     ec2:	84 0b       	sbc	r24, r20
     ec4:	ba f0       	brmi	.+46     	; 0xef4 <__addsf3x+0x98>
     ec6:	91 50       	subi	r25, 0x01	; 1
     ec8:	a1 f0       	breq	.+40     	; 0xef2 <__addsf3x+0x96>
     eca:	ff 0f       	add	r31, r31
     ecc:	bb 1f       	adc	r27, r27
     ece:	66 1f       	adc	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	c2 f7       	brpl	.-16     	; 0xec6 <__addsf3x+0x6a>
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <__addsf3x+0x98>
     ed8:	ba 0f       	add	r27, r26
     eda:	62 1f       	adc	r22, r18
     edc:	73 1f       	adc	r23, r19
     ede:	84 1f       	adc	r24, r20
     ee0:	48 f4       	brcc	.+18     	; 0xef4 <__addsf3x+0x98>
     ee2:	87 95       	ror	r24
     ee4:	77 95       	ror	r23
     ee6:	67 95       	ror	r22
     ee8:	b7 95       	ror	r27
     eea:	f7 95       	ror	r31
     eec:	9e 3f       	cpi	r25, 0xFE	; 254
     eee:	08 f0       	brcs	.+2      	; 0xef2 <__addsf3x+0x96>
     ef0:	b3 cf       	rjmp	.-154    	; 0xe58 <__addsf3+0x1e>
     ef2:	93 95       	inc	r25
     ef4:	88 0f       	add	r24, r24
     ef6:	08 f0       	brcs	.+2      	; 0xefa <__addsf3x+0x9e>
     ef8:	99 27       	eor	r25, r25
     efa:	ee 0f       	add	r30, r30
     efc:	97 95       	ror	r25
     efe:	87 95       	ror	r24
     f00:	08 95       	ret

00000f02 <__divsf3>:
     f02:	0c d0       	rcall	.+24     	; 0xf1c <__divsf3x>
     f04:	e6 c0       	rjmp	.+460    	; 0x10d2 <__fp_round>
     f06:	de d0       	rcall	.+444    	; 0x10c4 <__fp_pscB>
     f08:	40 f0       	brcs	.+16     	; 0xf1a <__divsf3+0x18>
     f0a:	d5 d0       	rcall	.+426    	; 0x10b6 <__fp_pscA>
     f0c:	30 f0       	brcs	.+12     	; 0xf1a <__divsf3+0x18>
     f0e:	21 f4       	brne	.+8      	; 0xf18 <__divsf3+0x16>
     f10:	5f 3f       	cpi	r21, 0xFF	; 255
     f12:	19 f0       	breq	.+6      	; 0xf1a <__divsf3+0x18>
     f14:	c7 c0       	rjmp	.+398    	; 0x10a4 <__fp_inf>
     f16:	51 11       	cpse	r21, r1
     f18:	10 c1       	rjmp	.+544    	; 0x113a <__fp_szero>
     f1a:	ca c0       	rjmp	.+404    	; 0x10b0 <__fp_nan>

00000f1c <__divsf3x>:
     f1c:	eb d0       	rcall	.+470    	; 0x10f4 <__fp_split3>
     f1e:	98 f3       	brcs	.-26     	; 0xf06 <__divsf3+0x4>

00000f20 <__divsf3_pse>:
     f20:	99 23       	and	r25, r25
     f22:	c9 f3       	breq	.-14     	; 0xf16 <__divsf3+0x14>
     f24:	55 23       	and	r21, r21
     f26:	b1 f3       	breq	.-20     	; 0xf14 <__divsf3+0x12>
     f28:	95 1b       	sub	r25, r21
     f2a:	55 0b       	sbc	r21, r21
     f2c:	bb 27       	eor	r27, r27
     f2e:	aa 27       	eor	r26, r26
     f30:	62 17       	cp	r22, r18
     f32:	73 07       	cpc	r23, r19
     f34:	84 07       	cpc	r24, r20
     f36:	38 f0       	brcs	.+14     	; 0xf46 <__divsf3_pse+0x26>
     f38:	9f 5f       	subi	r25, 0xFF	; 255
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	22 0f       	add	r18, r18
     f3e:	33 1f       	adc	r19, r19
     f40:	44 1f       	adc	r20, r20
     f42:	aa 1f       	adc	r26, r26
     f44:	a9 f3       	breq	.-22     	; 0xf30 <__divsf3_pse+0x10>
     f46:	33 d0       	rcall	.+102    	; 0xfae <__divsf3_pse+0x8e>
     f48:	0e 2e       	mov	r0, r30
     f4a:	3a f0       	brmi	.+14     	; 0xf5a <__divsf3_pse+0x3a>
     f4c:	e0 e8       	ldi	r30, 0x80	; 128
     f4e:	30 d0       	rcall	.+96     	; 0xfb0 <__divsf3_pse+0x90>
     f50:	91 50       	subi	r25, 0x01	; 1
     f52:	50 40       	sbci	r21, 0x00	; 0
     f54:	e6 95       	lsr	r30
     f56:	00 1c       	adc	r0, r0
     f58:	ca f7       	brpl	.-14     	; 0xf4c <__divsf3_pse+0x2c>
     f5a:	29 d0       	rcall	.+82     	; 0xfae <__divsf3_pse+0x8e>
     f5c:	fe 2f       	mov	r31, r30
     f5e:	27 d0       	rcall	.+78     	; 0xfae <__divsf3_pse+0x8e>
     f60:	66 0f       	add	r22, r22
     f62:	77 1f       	adc	r23, r23
     f64:	88 1f       	adc	r24, r24
     f66:	bb 1f       	adc	r27, r27
     f68:	26 17       	cp	r18, r22
     f6a:	37 07       	cpc	r19, r23
     f6c:	48 07       	cpc	r20, r24
     f6e:	ab 07       	cpc	r26, r27
     f70:	b0 e8       	ldi	r27, 0x80	; 128
     f72:	09 f0       	breq	.+2      	; 0xf76 <__divsf3_pse+0x56>
     f74:	bb 0b       	sbc	r27, r27
     f76:	80 2d       	mov	r24, r0
     f78:	bf 01       	movw	r22, r30
     f7a:	ff 27       	eor	r31, r31
     f7c:	93 58       	subi	r25, 0x83	; 131
     f7e:	5f 4f       	sbci	r21, 0xFF	; 255
     f80:	2a f0       	brmi	.+10     	; 0xf8c <__divsf3_pse+0x6c>
     f82:	9e 3f       	cpi	r25, 0xFE	; 254
     f84:	51 05       	cpc	r21, r1
     f86:	68 f0       	brcs	.+26     	; 0xfa2 <__divsf3_pse+0x82>
     f88:	8d c0       	rjmp	.+282    	; 0x10a4 <__fp_inf>
     f8a:	d7 c0       	rjmp	.+430    	; 0x113a <__fp_szero>
     f8c:	5f 3f       	cpi	r21, 0xFF	; 255
     f8e:	ec f3       	brlt	.-6      	; 0xf8a <__divsf3_pse+0x6a>
     f90:	98 3e       	cpi	r25, 0xE8	; 232
     f92:	dc f3       	brlt	.-10     	; 0xf8a <__divsf3_pse+0x6a>
     f94:	86 95       	lsr	r24
     f96:	77 95       	ror	r23
     f98:	67 95       	ror	r22
     f9a:	b7 95       	ror	r27
     f9c:	f7 95       	ror	r31
     f9e:	9f 5f       	subi	r25, 0xFF	; 255
     fa0:	c9 f7       	brne	.-14     	; 0xf94 <__divsf3_pse+0x74>
     fa2:	88 0f       	add	r24, r24
     fa4:	91 1d       	adc	r25, r1
     fa6:	96 95       	lsr	r25
     fa8:	87 95       	ror	r24
     faa:	97 f9       	bld	r25, 7
     fac:	08 95       	ret
     fae:	e1 e0       	ldi	r30, 0x01	; 1
     fb0:	66 0f       	add	r22, r22
     fb2:	77 1f       	adc	r23, r23
     fb4:	88 1f       	adc	r24, r24
     fb6:	bb 1f       	adc	r27, r27
     fb8:	62 17       	cp	r22, r18
     fba:	73 07       	cpc	r23, r19
     fbc:	84 07       	cpc	r24, r20
     fbe:	ba 07       	cpc	r27, r26
     fc0:	20 f0       	brcs	.+8      	; 0xfca <__divsf3_pse+0xaa>
     fc2:	62 1b       	sub	r22, r18
     fc4:	73 0b       	sbc	r23, r19
     fc6:	84 0b       	sbc	r24, r20
     fc8:	ba 0b       	sbc	r27, r26
     fca:	ee 1f       	adc	r30, r30
     fcc:	88 f7       	brcc	.-30     	; 0xfb0 <__divsf3_pse+0x90>
     fce:	e0 95       	com	r30
     fd0:	08 95       	ret

00000fd2 <__fixunssfsi>:
     fd2:	98 d0       	rcall	.+304    	; 0x1104 <__fp_splitA>
     fd4:	88 f0       	brcs	.+34     	; 0xff8 <__fixunssfsi+0x26>
     fd6:	9f 57       	subi	r25, 0x7F	; 127
     fd8:	90 f0       	brcs	.+36     	; 0xffe <__fixunssfsi+0x2c>
     fda:	b9 2f       	mov	r27, r25
     fdc:	99 27       	eor	r25, r25
     fde:	b7 51       	subi	r27, 0x17	; 23
     fe0:	a0 f0       	brcs	.+40     	; 0x100a <__fixunssfsi+0x38>
     fe2:	d1 f0       	breq	.+52     	; 0x1018 <__fixunssfsi+0x46>
     fe4:	66 0f       	add	r22, r22
     fe6:	77 1f       	adc	r23, r23
     fe8:	88 1f       	adc	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	1a f0       	brmi	.+6      	; 0xff4 <__fixunssfsi+0x22>
     fee:	ba 95       	dec	r27
     ff0:	c9 f7       	brne	.-14     	; 0xfe4 <__fixunssfsi+0x12>
     ff2:	12 c0       	rjmp	.+36     	; 0x1018 <__fixunssfsi+0x46>
     ff4:	b1 30       	cpi	r27, 0x01	; 1
     ff6:	81 f0       	breq	.+32     	; 0x1018 <__fixunssfsi+0x46>
     ff8:	9f d0       	rcall	.+318    	; 0x1138 <__fp_zero>
     ffa:	b1 e0       	ldi	r27, 0x01	; 1
     ffc:	08 95       	ret
     ffe:	9c c0       	rjmp	.+312    	; 0x1138 <__fp_zero>
    1000:	67 2f       	mov	r22, r23
    1002:	78 2f       	mov	r23, r24
    1004:	88 27       	eor	r24, r24
    1006:	b8 5f       	subi	r27, 0xF8	; 248
    1008:	39 f0       	breq	.+14     	; 0x1018 <__fixunssfsi+0x46>
    100a:	b9 3f       	cpi	r27, 0xF9	; 249
    100c:	cc f3       	brlt	.-14     	; 0x1000 <__fixunssfsi+0x2e>
    100e:	86 95       	lsr	r24
    1010:	77 95       	ror	r23
    1012:	67 95       	ror	r22
    1014:	b3 95       	inc	r27
    1016:	d9 f7       	brne	.-10     	; 0x100e <__fixunssfsi+0x3c>
    1018:	3e f4       	brtc	.+14     	; 0x1028 <__fixunssfsi+0x56>
    101a:	90 95       	com	r25
    101c:	80 95       	com	r24
    101e:	70 95       	com	r23
    1020:	61 95       	neg	r22
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	8f 4f       	sbci	r24, 0xFF	; 255
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	08 95       	ret

0000102a <__floatunsisf>:
    102a:	e8 94       	clt
    102c:	09 c0       	rjmp	.+18     	; 0x1040 <__floatsisf+0x12>

0000102e <__floatsisf>:
    102e:	97 fb       	bst	r25, 7
    1030:	3e f4       	brtc	.+14     	; 0x1040 <__floatsisf+0x12>
    1032:	90 95       	com	r25
    1034:	80 95       	com	r24
    1036:	70 95       	com	r23
    1038:	61 95       	neg	r22
    103a:	7f 4f       	sbci	r23, 0xFF	; 255
    103c:	8f 4f       	sbci	r24, 0xFF	; 255
    103e:	9f 4f       	sbci	r25, 0xFF	; 255
    1040:	99 23       	and	r25, r25
    1042:	a9 f0       	breq	.+42     	; 0x106e <__floatsisf+0x40>
    1044:	f9 2f       	mov	r31, r25
    1046:	96 e9       	ldi	r25, 0x96	; 150
    1048:	bb 27       	eor	r27, r27
    104a:	93 95       	inc	r25
    104c:	f6 95       	lsr	r31
    104e:	87 95       	ror	r24
    1050:	77 95       	ror	r23
    1052:	67 95       	ror	r22
    1054:	b7 95       	ror	r27
    1056:	f1 11       	cpse	r31, r1
    1058:	f8 cf       	rjmp	.-16     	; 0x104a <__floatsisf+0x1c>
    105a:	fa f4       	brpl	.+62     	; 0x109a <__floatsisf+0x6c>
    105c:	bb 0f       	add	r27, r27
    105e:	11 f4       	brne	.+4      	; 0x1064 <__floatsisf+0x36>
    1060:	60 ff       	sbrs	r22, 0
    1062:	1b c0       	rjmp	.+54     	; 0x109a <__floatsisf+0x6c>
    1064:	6f 5f       	subi	r22, 0xFF	; 255
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	8f 4f       	sbci	r24, 0xFF	; 255
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	16 c0       	rjmp	.+44     	; 0x109a <__floatsisf+0x6c>
    106e:	88 23       	and	r24, r24
    1070:	11 f0       	breq	.+4      	; 0x1076 <__floatsisf+0x48>
    1072:	96 e9       	ldi	r25, 0x96	; 150
    1074:	11 c0       	rjmp	.+34     	; 0x1098 <__floatsisf+0x6a>
    1076:	77 23       	and	r23, r23
    1078:	21 f0       	breq	.+8      	; 0x1082 <__floatsisf+0x54>
    107a:	9e e8       	ldi	r25, 0x8E	; 142
    107c:	87 2f       	mov	r24, r23
    107e:	76 2f       	mov	r23, r22
    1080:	05 c0       	rjmp	.+10     	; 0x108c <__floatsisf+0x5e>
    1082:	66 23       	and	r22, r22
    1084:	71 f0       	breq	.+28     	; 0x10a2 <__floatsisf+0x74>
    1086:	96 e8       	ldi	r25, 0x86	; 134
    1088:	86 2f       	mov	r24, r22
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	2a f0       	brmi	.+10     	; 0x109a <__floatsisf+0x6c>
    1090:	9a 95       	dec	r25
    1092:	66 0f       	add	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	88 1f       	adc	r24, r24
    1098:	da f7       	brpl	.-10     	; 0x1090 <__floatsisf+0x62>
    109a:	88 0f       	add	r24, r24
    109c:	96 95       	lsr	r25
    109e:	87 95       	ror	r24
    10a0:	97 f9       	bld	r25, 7
    10a2:	08 95       	ret

000010a4 <__fp_inf>:
    10a4:	97 f9       	bld	r25, 7
    10a6:	9f 67       	ori	r25, 0x7F	; 127
    10a8:	80 e8       	ldi	r24, 0x80	; 128
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	08 95       	ret

000010b0 <__fp_nan>:
    10b0:	9f ef       	ldi	r25, 0xFF	; 255
    10b2:	80 ec       	ldi	r24, 0xC0	; 192
    10b4:	08 95       	ret

000010b6 <__fp_pscA>:
    10b6:	00 24       	eor	r0, r0
    10b8:	0a 94       	dec	r0
    10ba:	16 16       	cp	r1, r22
    10bc:	17 06       	cpc	r1, r23
    10be:	18 06       	cpc	r1, r24
    10c0:	09 06       	cpc	r0, r25
    10c2:	08 95       	ret

000010c4 <__fp_pscB>:
    10c4:	00 24       	eor	r0, r0
    10c6:	0a 94       	dec	r0
    10c8:	12 16       	cp	r1, r18
    10ca:	13 06       	cpc	r1, r19
    10cc:	14 06       	cpc	r1, r20
    10ce:	05 06       	cpc	r0, r21
    10d0:	08 95       	ret

000010d2 <__fp_round>:
    10d2:	09 2e       	mov	r0, r25
    10d4:	03 94       	inc	r0
    10d6:	00 0c       	add	r0, r0
    10d8:	11 f4       	brne	.+4      	; 0x10de <__fp_round+0xc>
    10da:	88 23       	and	r24, r24
    10dc:	52 f0       	brmi	.+20     	; 0x10f2 <__fp_round+0x20>
    10de:	bb 0f       	add	r27, r27
    10e0:	40 f4       	brcc	.+16     	; 0x10f2 <__fp_round+0x20>
    10e2:	bf 2b       	or	r27, r31
    10e4:	11 f4       	brne	.+4      	; 0x10ea <__fp_round+0x18>
    10e6:	60 ff       	sbrs	r22, 0
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <__fp_round+0x20>
    10ea:	6f 5f       	subi	r22, 0xFF	; 255
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	8f 4f       	sbci	r24, 0xFF	; 255
    10f0:	9f 4f       	sbci	r25, 0xFF	; 255
    10f2:	08 95       	ret

000010f4 <__fp_split3>:
    10f4:	57 fd       	sbrc	r21, 7
    10f6:	90 58       	subi	r25, 0x80	; 128
    10f8:	44 0f       	add	r20, r20
    10fa:	55 1f       	adc	r21, r21
    10fc:	59 f0       	breq	.+22     	; 0x1114 <__fp_splitA+0x10>
    10fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1100:	71 f0       	breq	.+28     	; 0x111e <__fp_splitA+0x1a>
    1102:	47 95       	ror	r20

00001104 <__fp_splitA>:
    1104:	88 0f       	add	r24, r24
    1106:	97 fb       	bst	r25, 7
    1108:	99 1f       	adc	r25, r25
    110a:	61 f0       	breq	.+24     	; 0x1124 <__fp_splitA+0x20>
    110c:	9f 3f       	cpi	r25, 0xFF	; 255
    110e:	79 f0       	breq	.+30     	; 0x112e <__fp_splitA+0x2a>
    1110:	87 95       	ror	r24
    1112:	08 95       	ret
    1114:	12 16       	cp	r1, r18
    1116:	13 06       	cpc	r1, r19
    1118:	14 06       	cpc	r1, r20
    111a:	55 1f       	adc	r21, r21
    111c:	f2 cf       	rjmp	.-28     	; 0x1102 <__stack+0x3>
    111e:	46 95       	lsr	r20
    1120:	f1 df       	rcall	.-30     	; 0x1104 <__fp_splitA>
    1122:	08 c0       	rjmp	.+16     	; 0x1134 <__fp_splitA+0x30>
    1124:	16 16       	cp	r1, r22
    1126:	17 06       	cpc	r1, r23
    1128:	18 06       	cpc	r1, r24
    112a:	99 1f       	adc	r25, r25
    112c:	f1 cf       	rjmp	.-30     	; 0x1110 <__fp_splitA+0xc>
    112e:	86 95       	lsr	r24
    1130:	71 05       	cpc	r23, r1
    1132:	61 05       	cpc	r22, r1
    1134:	08 94       	sec
    1136:	08 95       	ret

00001138 <__fp_zero>:
    1138:	e8 94       	clt

0000113a <__fp_szero>:
    113a:	bb 27       	eor	r27, r27
    113c:	66 27       	eor	r22, r22
    113e:	77 27       	eor	r23, r23
    1140:	cb 01       	movw	r24, r22
    1142:	97 f9       	bld	r25, 7
    1144:	08 95       	ret

00001146 <__gesf2>:
    1146:	03 d0       	rcall	.+6      	; 0x114e <__fp_cmp>
    1148:	08 f4       	brcc	.+2      	; 0x114c <__gesf2+0x6>
    114a:	8f ef       	ldi	r24, 0xFF	; 255
    114c:	08 95       	ret

0000114e <__fp_cmp>:
    114e:	99 0f       	add	r25, r25
    1150:	00 08       	sbc	r0, r0
    1152:	55 0f       	add	r21, r21
    1154:	aa 0b       	sbc	r26, r26
    1156:	e0 e8       	ldi	r30, 0x80	; 128
    1158:	fe ef       	ldi	r31, 0xFE	; 254
    115a:	16 16       	cp	r1, r22
    115c:	17 06       	cpc	r1, r23
    115e:	e8 07       	cpc	r30, r24
    1160:	f9 07       	cpc	r31, r25
    1162:	c0 f0       	brcs	.+48     	; 0x1194 <__fp_cmp+0x46>
    1164:	12 16       	cp	r1, r18
    1166:	13 06       	cpc	r1, r19
    1168:	e4 07       	cpc	r30, r20
    116a:	f5 07       	cpc	r31, r21
    116c:	98 f0       	brcs	.+38     	; 0x1194 <__fp_cmp+0x46>
    116e:	62 1b       	sub	r22, r18
    1170:	73 0b       	sbc	r23, r19
    1172:	84 0b       	sbc	r24, r20
    1174:	95 0b       	sbc	r25, r21
    1176:	39 f4       	brne	.+14     	; 0x1186 <__fp_cmp+0x38>
    1178:	0a 26       	eor	r0, r26
    117a:	61 f0       	breq	.+24     	; 0x1194 <__fp_cmp+0x46>
    117c:	23 2b       	or	r18, r19
    117e:	24 2b       	or	r18, r20
    1180:	25 2b       	or	r18, r21
    1182:	21 f4       	brne	.+8      	; 0x118c <__fp_cmp+0x3e>
    1184:	08 95       	ret
    1186:	0a 26       	eor	r0, r26
    1188:	09 f4       	brne	.+2      	; 0x118c <__fp_cmp+0x3e>
    118a:	a1 40       	sbci	r26, 0x01	; 1
    118c:	a6 95       	lsr	r26
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	81 1d       	adc	r24, r1
    1192:	81 1d       	adc	r24, r1
    1194:	08 95       	ret

00001196 <calloc>:
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	68 9f       	mul	r22, r24
    11a0:	80 01       	movw	r16, r0
    11a2:	69 9f       	mul	r22, r25
    11a4:	10 0d       	add	r17, r0
    11a6:	78 9f       	mul	r23, r24
    11a8:	10 0d       	add	r17, r0
    11aa:	11 24       	eor	r1, r1
    11ac:	c8 01       	movw	r24, r16
    11ae:	0d d0       	rcall	.+26     	; 0x11ca <malloc>
    11b0:	ec 01       	movw	r28, r24
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	21 f0       	breq	.+8      	; 0x11be <calloc+0x28>
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	a8 01       	movw	r20, r16
    11bc:	0b d1       	rcall	.+534    	; 0x13d4 <memset>
    11be:	ce 01       	movw	r24, r28
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <malloc>:
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	bc 01       	movw	r22, r24
    11d0:	82 30       	cpi	r24, 0x02	; 2
    11d2:	91 05       	cpc	r25, r1
    11d4:	10 f4       	brcc	.+4      	; 0x11da <malloc+0x10>
    11d6:	62 e0       	ldi	r22, 0x02	; 2
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	a0 91 7b 02 	lds	r26, 0x027B
    11de:	b0 91 7c 02 	lds	r27, 0x027C
    11e2:	ed 01       	movw	r28, r26
    11e4:	e0 e0       	ldi	r30, 0x00	; 0
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	21 c0       	rjmp	.+66     	; 0x1230 <malloc+0x66>
    11ee:	88 81       	ld	r24, Y
    11f0:	99 81       	ldd	r25, Y+1	; 0x01
    11f2:	86 17       	cp	r24, r22
    11f4:	97 07       	cpc	r25, r23
    11f6:	69 f4       	brne	.+26     	; 0x1212 <malloc+0x48>
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	30 97       	sbiw	r30, 0x00	; 0
    11fe:	19 f0       	breq	.+6      	; 0x1206 <malloc+0x3c>
    1200:	93 83       	std	Z+3, r25	; 0x03
    1202:	82 83       	std	Z+2, r24	; 0x02
    1204:	04 c0       	rjmp	.+8      	; 0x120e <malloc+0x44>
    1206:	90 93 7c 02 	sts	0x027C, r25
    120a:	80 93 7b 02 	sts	0x027B, r24
    120e:	fe 01       	movw	r30, r28
    1210:	34 c0       	rjmp	.+104    	; 0x127a <malloc+0xb0>
    1212:	68 17       	cp	r22, r24
    1214:	79 07       	cpc	r23, r25
    1216:	38 f4       	brcc	.+14     	; 0x1226 <malloc+0x5c>
    1218:	41 15       	cp	r20, r1
    121a:	51 05       	cpc	r21, r1
    121c:	19 f0       	breq	.+6      	; 0x1224 <malloc+0x5a>
    121e:	84 17       	cp	r24, r20
    1220:	95 07       	cpc	r25, r21
    1222:	08 f4       	brcc	.+2      	; 0x1226 <malloc+0x5c>
    1224:	ac 01       	movw	r20, r24
    1226:	fe 01       	movw	r30, r28
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	9b 81       	ldd	r25, Y+3	; 0x03
    122c:	9c 01       	movw	r18, r24
    122e:	e9 01       	movw	r28, r18
    1230:	20 97       	sbiw	r28, 0x00	; 0
    1232:	e9 f6       	brne	.-70     	; 0x11ee <malloc+0x24>
    1234:	41 15       	cp	r20, r1
    1236:	51 05       	cpc	r21, r1
    1238:	a9 f1       	breq	.+106    	; 0x12a4 <malloc+0xda>
    123a:	ca 01       	movw	r24, r20
    123c:	86 1b       	sub	r24, r22
    123e:	97 0b       	sbc	r25, r23
    1240:	04 97       	sbiw	r24, 0x04	; 4
    1242:	08 f4       	brcc	.+2      	; 0x1246 <malloc+0x7c>
    1244:	ba 01       	movw	r22, r20
    1246:	e0 e0       	ldi	r30, 0x00	; 0
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	2a c0       	rjmp	.+84     	; 0x12a0 <malloc+0xd6>
    124c:	8d 91       	ld	r24, X+
    124e:	9c 91       	ld	r25, X
    1250:	11 97       	sbiw	r26, 0x01	; 1
    1252:	84 17       	cp	r24, r20
    1254:	95 07       	cpc	r25, r21
    1256:	f9 f4       	brne	.+62     	; 0x1296 <malloc+0xcc>
    1258:	64 17       	cp	r22, r20
    125a:	75 07       	cpc	r23, r21
    125c:	81 f4       	brne	.+32     	; 0x127e <malloc+0xb4>
    125e:	12 96       	adiw	r26, 0x02	; 2
    1260:	8d 91       	ld	r24, X+
    1262:	9c 91       	ld	r25, X
    1264:	13 97       	sbiw	r26, 0x03	; 3
    1266:	30 97       	sbiw	r30, 0x00	; 0
    1268:	19 f0       	breq	.+6      	; 0x1270 <malloc+0xa6>
    126a:	93 83       	std	Z+3, r25	; 0x03
    126c:	82 83       	std	Z+2, r24	; 0x02
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <malloc+0xae>
    1270:	90 93 7c 02 	sts	0x027C, r25
    1274:	80 93 7b 02 	sts	0x027B, r24
    1278:	fd 01       	movw	r30, r26
    127a:	32 96       	adiw	r30, 0x02	; 2
    127c:	4f c0       	rjmp	.+158    	; 0x131c <malloc+0x152>
    127e:	ca 01       	movw	r24, r20
    1280:	86 1b       	sub	r24, r22
    1282:	97 0b       	sbc	r25, r23
    1284:	fd 01       	movw	r30, r26
    1286:	e8 0f       	add	r30, r24
    1288:	f9 1f       	adc	r31, r25
    128a:	61 93       	st	Z+, r22
    128c:	71 93       	st	Z+, r23
    128e:	02 97       	sbiw	r24, 0x02	; 2
    1290:	8d 93       	st	X+, r24
    1292:	9c 93       	st	X, r25
    1294:	43 c0       	rjmp	.+134    	; 0x131c <malloc+0x152>
    1296:	fd 01       	movw	r30, r26
    1298:	82 81       	ldd	r24, Z+2	; 0x02
    129a:	93 81       	ldd	r25, Z+3	; 0x03
    129c:	9c 01       	movw	r18, r24
    129e:	d9 01       	movw	r26, r18
    12a0:	10 97       	sbiw	r26, 0x00	; 0
    12a2:	a1 f6       	brne	.-88     	; 0x124c <malloc+0x82>
    12a4:	80 91 79 02 	lds	r24, 0x0279
    12a8:	90 91 7a 02 	lds	r25, 0x027A
    12ac:	89 2b       	or	r24, r25
    12ae:	41 f4       	brne	.+16     	; 0x12c0 <malloc+0xf6>
    12b0:	80 91 02 01 	lds	r24, 0x0102
    12b4:	90 91 03 01 	lds	r25, 0x0103
    12b8:	90 93 7a 02 	sts	0x027A, r25
    12bc:	80 93 79 02 	sts	0x0279, r24
    12c0:	40 91 04 01 	lds	r20, 0x0104
    12c4:	50 91 05 01 	lds	r21, 0x0105
    12c8:	41 15       	cp	r20, r1
    12ca:	51 05       	cpc	r21, r1
    12cc:	41 f4       	brne	.+16     	; 0x12de <malloc+0x114>
    12ce:	4d b7       	in	r20, 0x3d	; 61
    12d0:	5e b7       	in	r21, 0x3e	; 62
    12d2:	80 91 00 01 	lds	r24, 0x0100
    12d6:	90 91 01 01 	lds	r25, 0x0101
    12da:	48 1b       	sub	r20, r24
    12dc:	59 0b       	sbc	r21, r25
    12de:	20 91 79 02 	lds	r18, 0x0279
    12e2:	30 91 7a 02 	lds	r19, 0x027A
    12e6:	24 17       	cp	r18, r20
    12e8:	35 07       	cpc	r19, r21
    12ea:	b0 f4       	brcc	.+44     	; 0x1318 <malloc+0x14e>
    12ec:	ca 01       	movw	r24, r20
    12ee:	82 1b       	sub	r24, r18
    12f0:	93 0b       	sbc	r25, r19
    12f2:	86 17       	cp	r24, r22
    12f4:	97 07       	cpc	r25, r23
    12f6:	80 f0       	brcs	.+32     	; 0x1318 <malloc+0x14e>
    12f8:	ab 01       	movw	r20, r22
    12fa:	4e 5f       	subi	r20, 0xFE	; 254
    12fc:	5f 4f       	sbci	r21, 0xFF	; 255
    12fe:	84 17       	cp	r24, r20
    1300:	95 07       	cpc	r25, r21
    1302:	50 f0       	brcs	.+20     	; 0x1318 <malloc+0x14e>
    1304:	42 0f       	add	r20, r18
    1306:	53 1f       	adc	r21, r19
    1308:	50 93 7a 02 	sts	0x027A, r21
    130c:	40 93 79 02 	sts	0x0279, r20
    1310:	f9 01       	movw	r30, r18
    1312:	61 93       	st	Z+, r22
    1314:	71 93       	st	Z+, r23
    1316:	02 c0       	rjmp	.+4      	; 0x131c <malloc+0x152>
    1318:	e0 e0       	ldi	r30, 0x00	; 0
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	cf 01       	movw	r24, r30
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	08 95       	ret

00001324 <free>:
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	09 f4       	brne	.+2      	; 0x132e <free+0xa>
    132c:	50 c0       	rjmp	.+160    	; 0x13ce <free+0xaa>
    132e:	ec 01       	movw	r28, r24
    1330:	22 97       	sbiw	r28, 0x02	; 2
    1332:	1b 82       	std	Y+3, r1	; 0x03
    1334:	1a 82       	std	Y+2, r1	; 0x02
    1336:	a0 91 7b 02 	lds	r26, 0x027B
    133a:	b0 91 7c 02 	lds	r27, 0x027C
    133e:	10 97       	sbiw	r26, 0x00	; 0
    1340:	09 f1       	breq	.+66     	; 0x1384 <free+0x60>
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	ac 17       	cp	r26, r28
    1348:	bd 07       	cpc	r27, r29
    134a:	08 f1       	brcs	.+66     	; 0x138e <free+0x6a>
    134c:	bb 83       	std	Y+3, r27	; 0x03
    134e:	aa 83       	std	Y+2, r26	; 0x02
    1350:	fe 01       	movw	r30, r28
    1352:	21 91       	ld	r18, Z+
    1354:	31 91       	ld	r19, Z+
    1356:	e2 0f       	add	r30, r18
    1358:	f3 1f       	adc	r31, r19
    135a:	ae 17       	cp	r26, r30
    135c:	bf 07       	cpc	r27, r31
    135e:	79 f4       	brne	.+30     	; 0x137e <free+0x5a>
    1360:	8d 91       	ld	r24, X+
    1362:	9c 91       	ld	r25, X
    1364:	11 97       	sbiw	r26, 0x01	; 1
    1366:	28 0f       	add	r18, r24
    1368:	39 1f       	adc	r19, r25
    136a:	2e 5f       	subi	r18, 0xFE	; 254
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	39 83       	std	Y+1, r19	; 0x01
    1370:	28 83       	st	Y, r18
    1372:	12 96       	adiw	r26, 0x02	; 2
    1374:	8d 91       	ld	r24, X+
    1376:	9c 91       	ld	r25, X
    1378:	13 97       	sbiw	r26, 0x03	; 3
    137a:	9b 83       	std	Y+3, r25	; 0x03
    137c:	8a 83       	std	Y+2, r24	; 0x02
    137e:	41 15       	cp	r20, r1
    1380:	51 05       	cpc	r21, r1
    1382:	71 f4       	brne	.+28     	; 0x13a0 <free+0x7c>
    1384:	d0 93 7c 02 	sts	0x027C, r29
    1388:	c0 93 7b 02 	sts	0x027B, r28
    138c:	20 c0       	rjmp	.+64     	; 0x13ce <free+0xaa>
    138e:	12 96       	adiw	r26, 0x02	; 2
    1390:	8d 91       	ld	r24, X+
    1392:	9c 91       	ld	r25, X
    1394:	13 97       	sbiw	r26, 0x03	; 3
    1396:	ad 01       	movw	r20, r26
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	11 f0       	breq	.+4      	; 0x13a0 <free+0x7c>
    139c:	dc 01       	movw	r26, r24
    139e:	d3 cf       	rjmp	.-90     	; 0x1346 <free+0x22>
    13a0:	fa 01       	movw	r30, r20
    13a2:	d3 83       	std	Z+3, r29	; 0x03
    13a4:	c2 83       	std	Z+2, r28	; 0x02
    13a6:	21 91       	ld	r18, Z+
    13a8:	31 91       	ld	r19, Z+
    13aa:	e2 0f       	add	r30, r18
    13ac:	f3 1f       	adc	r31, r19
    13ae:	ce 17       	cp	r28, r30
    13b0:	df 07       	cpc	r29, r31
    13b2:	69 f4       	brne	.+26     	; 0x13ce <free+0xaa>
    13b4:	88 81       	ld	r24, Y
    13b6:	99 81       	ldd	r25, Y+1	; 0x01
    13b8:	28 0f       	add	r18, r24
    13ba:	39 1f       	adc	r19, r25
    13bc:	2e 5f       	subi	r18, 0xFE	; 254
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	fa 01       	movw	r30, r20
    13c2:	31 83       	std	Z+1, r19	; 0x01
    13c4:	20 83       	st	Z, r18
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ca:	93 83       	std	Z+3, r25	; 0x03
    13cc:	82 83       	std	Z+2, r24	; 0x02
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <memset>:
    13d4:	dc 01       	movw	r26, r24
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <memset+0x6>
    13d8:	6d 93       	st	X+, r22
    13da:	41 50       	subi	r20, 0x01	; 1
    13dc:	50 40       	sbci	r21, 0x00	; 0
    13de:	e0 f7       	brcc	.-8      	; 0x13d8 <memset+0x4>
    13e0:	08 95       	ret

000013e2 <_exit>:
    13e2:	f8 94       	cli

000013e4 <__stop_program>:
    13e4:	ff cf       	rjmp	.-2      	; 0x13e4 <__stop_program>
